<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h3><blockquote>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。Git 是基于差异（delta-based）的版本控制工具。<br>在 Git中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 会为每个版本都创建一个快照。</p>
</blockquote>
<span id="more"></span>

<h3 id="Git-工作方式"><a href="#Git-工作方式" class="headerlink" title="Git 工作方式"></a>Git 工作方式</h3><p>基本的 Git 工作流程如下：</p>
<ol>
<li>在工作区中修改文件。</li>
<li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>
<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>
</ol>
<p>文件的三种状态：已提交（committed）、已修改（modified） 和 已暂存（staged）。</p>
<ul>
<li>已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
<li>已提交表示数据已经安全地保存在本地数据库中。</li>
</ul>
<p>结合文件的三种状态，与之对应的有三个位置：工作区（workspace）、暂存区（index）、Git仓库（repository）；</p>
<ul>
<li>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li>
<li>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</li>
<li>Git仓库是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</li>
</ul>
<p>Git 工作三个阶段:</p>
<img src="/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png" class="">

<p>Git 文件状态变更:</p>
<img src="/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%8F%98%E6%9B%B4.png" class="">

<h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p>Windows 上安装：</p>
<ol>
<li>从官网下载，<a href="https://git-scm.com/downloads">地址</a>；</li>
<li>执行安装程序，不更改默认选项，一路确认完成安装；</li>
<li>安装完成后查看 Git 版本，<code>git --version</code> ；</li>
</ol>
<p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Linux、Mac 安装</a></p>
<h3 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h3><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p><code>git config</code>命令用于查看或更改配置信息。安装完 Git 之后，要做的第一件事就是设置用户名和邮件地址。这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改。该配置项会被写入用户文件夹下的.gitconfig 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span> <span class="comment"># 设置用户名</span></span><br><span class="line">$ git config --global user.email username@example.com <span class="comment"># 设置邮箱地址</span></span><br><span class="line">$ git config &lt;key&gt; <span class="comment"># 显示指定配置项</span></span><br><span class="line">$ git config --list <span class="comment"># 显示所有配置信息</span></span><br><span class="line">$ git config --list --show-origin <span class="comment"># 显示配置信息及配置文件路径</span></span><br><span class="line">$ git config --global core.editor <span class="string">&quot;path/to/editor&quot;</span> <span class="comment"># 配置默认的编辑器</span></span><br><span class="line">$ git config --global core.editor notepad <span class="comment"># 设置默认编辑器未notepad</span></span><br></pre></td></tr></table></figure>

<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>Git 创建仓库一般分为两种方式：</p>
<ol>
<li>在本地创建</li>
</ol>
<p><code>git init</code>命令将创建一个名为 .git 的子目录（隐藏文件夹），这个子目录包括初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/myProject <span class="comment"># 进入到项目文件夹下</span></span><br><span class="line">$ git init <span class="comment"># 在本地创建 Git 仓库，将尚未进行版本控制的本地目录转换为 Git 仓库；</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从远程克隆</li>
</ol>
<p><code>git clone</code>命令将从远程 Git 服务器上将项目下载到本地，形成一个本地的克隆仓库，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/User/Project.git <span class="comment"># 使用http协议在当前文件夹下下载Project项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:User/Project.git <span class="comment"># 使用Git协议在当前文件夹下下载Project项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/User/Project.git newName <span class="comment"># 下载Project项目到newName文件夹中，也可以跟路径，下载到指定位置</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b &lt;branchName&gt; https://github.com/User/Project.git <span class="comment"># 下载项目指定分支，并且绑定获取和推送地址为该分支；</span></span><br><span class="line"><span class="comment"># 下载链接后的 .git 可以不加；</span></span><br></pre></td></tr></table></figure>

<h4 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h4><p><code>git status</code>命令用于查看项目中文件状态，待提交、已修改、未跟踪等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment"># 查看文件状态</span></span><br><span class="line">$ git status -s/--short <span class="comment"># 查看文件状态的简略信息，其中文件名前会显示两列标志，左栏表示暂存区的状态，右栏表示工作区的状态，?表示未跟踪，A表示新增，M表示修改过</span></span><br></pre></td></tr></table></figure>

<p><code>git add</code>命令用于添加文件到缓冲区并跟踪文件，即监视文件变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add &lt;file&gt; <span class="comment"># 添加跟踪文件到暂存区</span></span><br><span class="line">$ git add *.c <span class="comment"># 添加所有.c文件</span></span><br><span class="line">$ git add . <span class="comment"># 添加所有文件</span></span><br></pre></td></tr></table></figure>

<p><code>git diff</code>命令用于查看文件更改前后之间的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff &lt;file&gt; <span class="comment"># 比较工作目录中当前文件和暂存区域快照之间的差异；</span></span><br><span class="line">$ git diff --staged <span class="comment"># 比对已暂存文件与最后一次提交的文件差异;</span></span><br></pre></td></tr></table></figure>

<p><code>git commit</code>命令用于将缓冲区中的文件提交到本地仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit <span class="comment"># 提交代码到本地仓库，默认使用 nano 编辑器，建议更改默认编辑器</span></span><br><span class="line">$ git commit -m <span class="string">&quot;comments&quot;</span> <span class="comment"># 提交代码并添加注释</span></span><br><span class="line">$ git commit -a <span class="comment"># 跳过 git add 添加到缓冲区操作，直接提交已跟踪的更改文件</span></span><br><span class="line">$ git commit -am <span class="string">&quot;comments&quot;</span> <span class="comment"># 直接提交更改文件，同时添加注释</span></span><br><span class="line">$ git commit --amend <span class="comment"># 重新提交，可以补充提交暂存区中的文件，也可以重写注释</span></span><br></pre></td></tr></table></figure>

<p><code>git mv</code>命令用于重命名已跟踪的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;fileA&gt; &lt;fileB&gt; <span class="comment"># 将文件fileA重命名为fileB</span></span><br></pre></td></tr></table></figure>

<p><code>git merge</code>命令用于合并分支，待补充。</p>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><p>远程仓库是指托管在因特网或其他网络中的你的项目的版本库。<br><code>git remote</code>命令用于查看、配置远程信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote <span class="comment"># 用于显示远程配置信息，列出你指定的每一个远程服务器的简写，克隆仓库会显示origin，这是默认远程仓库的名称\</span></span><br><span class="line">$ git remote -v <span class="comment"># 显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</span></span><br><span class="line">$ git remote add &lt;remoteName&gt; &lt;url&gt; <span class="comment"># 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写</span></span><br><span class="line">$ git remote show &lt;remoteName&gt; <span class="comment"># 显示指定远程仓库的信息</span></span><br></pre></td></tr></table></figure>

<p><code>git fetch</code>命令用于从远程仓库获取数据，该命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作，后续需要手动合并代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt; <span class="comment"># 抓取指定远程仓库的代码，省略则抓取默认的 origin 远程仓库</span></span><br></pre></td></tr></table></figure>

<p><code>git push</code>命令用于将本地仓库的代码推送到远程仓库。需要有写入权限，并且本地代码已经更新到和远程仓库同步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push [remote] [branch] <span class="comment"># 将代码推送到指定远程仓库的指定分支下，一般默认 origin 下的 master/main 主分支；</span></span><br><span class="line">$ git push [remote] HEAD:&lt;branch&gt; <span class="comment"># 使用该命令推送到指定的远程分支；</span></span><br><span class="line">$ git push --set-upstream origin &lt;newBranch&gt; <span class="comment"># 将本地分支推送到远程服务器，并创建对应的分支 </span></span><br><span class="line">$ git push origin --delete &lt;BranchName&gt; <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure>

<p><code>git pull</code>操作用于从服务器拉取更新代码，并自动合并到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull <span class="comment"># 相当于 git fetch + git merge 结合的操作</span></span><br><span class="line">$ git pull [remote] [branch] <span class="comment"># 下载指定分支代码，并快速合并</span></span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p><code>git branch</code>命令用于查看、创建分支等操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch <span class="comment"># 查看工作区下的分支，并显示当前分支</span></span><br><span class="line">$ git branch -a <span class="comment"># 显示所有本地分支和远程分支</span></span><br><span class="line">$ git branch -v <span class="comment"># 显示分支的哈希码以及上次提交注释信息</span></span><br><span class="line">$ git branch &lt;branchName&gt; <span class="comment"># 创建新的本地分支</span></span><br><span class="line">$ git branch -d &lt;branchName&gt; <span class="comment"># 删除本地分支</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>命令用于切换分支，切换分支体现在.git/HEAD文件中的指向；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment"># 显示工作区、暂存区和远程仓库之间的差异</span></span><br><span class="line">$ git checkout [branchName | hashValue] <span class="comment"># 切换到分支，可以切换到本地没有的分支，可以是历史提交的版本，或者远程分支，进入分离头模式（detached HEAD），在分离头模式中也可以创建新的分支；</span></span><br><span class="line">$ git checkout -b &lt;branchName&gt; <span class="comment"># 创建并切换分支</span></span><br><span class="line">$ git checkout --orphan &lt;branch-name&gt; <span class="comment"># 创建单独分支</span></span><br></pre></td></tr></table></figure>

<h4 id="撤销删除"><a href="#撤销删除" class="headerlink" title="撤销删除"></a>撤销删除</h4><p><code>git reset</code>用于撤销操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt; <span class="comment"># 用于从暂存区取消暂存文件</span></span><br></pre></td></tr></table></figure>

<p><code>git rm</code>命令用于删除 Git 项目中的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file&gt; <span class="comment"># 从暂存区中删除文件，同时永久删除文件，不能删除未提交到仓库中的文件</span></span><br><span class="line">$ git rm --cached &lt;file&gt; <span class="comment"># 只从缓冲区中删除文件，取消跟踪</span></span><br><span class="line">$ git rm -f &lt;file&gt; <span class="comment"># 强制删除文件，包括未提交到仓库中的文件</span></span><br><span class="line">$ git rm -rf . <span class="comment"># 强制移除项目中所有文件</span></span><br><span class="line">$ git rm -r --cached . <span class="comment"># 删除本地缓存，有时更新.gitignore文件不会立即生效，可以执行该命令</span></span><br></pre></td></tr></table></figure>

<p><code>git restore</code>命令用于丢弃更改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git restore &lt;file&gt; <span class="comment"># 忽略该文件的更改，退回到上次提交时的状态</span></span><br></pre></td></tr></table></figure>

<h4 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h4><p><code>git log</code>命令用于查看提交历史。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看提交历史，包括哈希值、作者、日期、注释等信息；</span></span><br><span class="line">$ git <span class="built_in">log</span> -p/--patch <span class="comment"># 补丁格式显示，显示更改内容；</span></span><br><span class="line">$ git <span class="built_in">log</span> [-2] <span class="comment"># 指定显示最后提交记录的条数；</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span> <span class="comment"># 显示提交记录的同时，显示每次提交的简略统计信息；</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline <span class="comment"># 指定显示格式，参数有 online | short | full | fuller，默认 full；</span></span><br><span class="line">$ git <span class="built_in">log</span> --abbrev-commit <span class="comment"># 只显示哈希码的前几位，一般7位</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline <span class="comment"># --pretty=oneline 和 --abbrev-commit 组合的缩写</span></span><br></pre></td></tr></table></figure>

<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><p><code>git tag</code>命令用于为不同版本提交设置标签，待补充。</p>
<h4 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h4><p>以下命令可以查看 Git 指令的描述，以及详细用法；打开的是本地的英文网页文档；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> &lt;action&gt;</span><br><span class="line">$ git &lt;action&gt; --<span class="built_in">help</span></span><br><span class="line">$ git &lt;action&gt; -h <span class="comment"># 命令缩写</span></span><br></pre></td></tr></table></figure>

<h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>当项目中有一些缓存文件、日志文件、临时文件、测试文件等不需要跟踪的文件时，可以在项目根目录下新建一个<code>.gitignore</code>文件，将不需要跟踪的文件添加进去，Git 会忽略到这些文件。</p>
<p><code>.gitignore</code>文件格式规范：</p>
<ul>
<li>所有空行或者以 # 开头的行都会被 Git 忽略，注释。</li>
<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>
<li>匹配模式可以以（/）开头防止递归。</li>
<li>匹配模式可以以（/）结尾指定目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li>
</ul>
<p>其中 glob 模式是指 shell 所使用的简化了的正则表达式。</p>
<ul>
<li>星号（*）匹配零个或多个任意字符；</li>
<li>[abc] 匹配任何一个列在方括号中的字符；</li>
<li>问号（?）只匹配一个任意字符；</li>
<li>如果在方括号中使用短划线分隔两个字符，表示匹配这两个字符范围内的字符；</li>
<li>使用两个星号（**）表示匹配任意中间目录；</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://git-scm.com/">Git 官网</a></li>
<li><a href="https://git-scm.com/book/zh/v2">progit 在线文档</a></li>
<li><a href="https://github.com/progit/progit2-zh/releases/download/2.1.55/progit_v2.1.55.pdf">progit PDF电子书</a></li>
<li><a href="https://www.jianshu.com/p/46ffff059092">Git 命令大全</a></li>
<li><a href="https://github.com/521xueweihan/git-tips">Git 奇淫技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>notes</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Gogs-学习笔记</title>
    <url>/2021/09/05/Gogs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="什么是-Gogs"><a href="#什么是-Gogs" class="headerlink" title="什么是 Gogs?"></a>什么是 Gogs?</h3><p>Gogs 是一款极易搭建的自助 Git 服务。可以根据操作系统平台下载二进制运行，或者通过 Docker 或 Vagrant，以及包管理安装。Gogs 是用 Go 语言开发，因此任何 Go 语言支持的平台都可以运行 Gogs，包括 Windows、Mac、Linux 以及 ARM。一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。甚至还可以将 Gogs 运行在 NAS 设备上。</p>
<p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p>
<span id="more"></span>

<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>数据库（选择以下一项）：</p>
<ul>
<li>MySQL：版本 &gt;= 5.7</li>
<li>PostgreSQL</li>
<li>TiDB（实验性支持，使用 MySQL 协议连接）</li>
<li>或者什么都不安装，直接使用 SQLite3</li>
</ul>
<p>Git（bash）：</p>
<ul>
<li>服务端和客户端均需版本 &gt;= 1.8.3</li>
<li>Windows 系统建议使用最新版</li>
</ul>
<p>SSH 服务器：</p>
<ul>
<li>如果您只使用 HTTP/HTTPS 的话请忽略此项</li>
<li>如果您选择在 Windows 系统使用内置 SSH 服务器，请确保添加<code>ssh-keygen</code>到您的<code>%PATH%</code>环境变量中</li>
<li>推荐 Windows 系统使用 Cygwin OpenSSH 或 Copssh</li>
<li>Windows 系统 请确保 Bash 是默认的 Shell 程序，而不是 PowerShell</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>安装好 Git，MySQL，NSSM；</li>
<li>新增 git 系统用户，并修改其权限，具体可以参考<a href="https://o-r.github.io/2018/05/12/Gogs%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/">这篇</a>；</li>
</ol>
<p>版本信息：</p>
<ul>
<li>Git：<code>2.29.2</code>；</li>
<li>MySQL：<code>15.1</code>；</li>
<li>NSSM：<code>2.24</code>；</li>
</ul>
<p>其中数据库我用的是 <a href="https://mariadb.org/">MariaDB</a>；</p>
<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>Gogs 有多种安装方式，一般使用源码安装和二进制安装。但是源码安装相对麻烦一点，需要在本地有 Go 语言环境，然后将源码下到本地，再进行编译，期间可能还会遇到其他一些问题。</p>
<p>通常直接进行二进制安装，下载最新版本的 Gogs，在 Windows 环境下有两种安装方式；</p>
<h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><p>下载 Gogs mws（Minimal Windows Service）版，即提供内置 Windows 服务支持版本；</p>
<p>下载完成之后依次执行以下步骤：</p>
<ol>
<li>解压压缩包；</li>
<li>使用命令 cd 进入到刚刚创建的目录；</li>
<li>执行命令 <code>./gogs web</code>；</li>
<li>访问<code>/install</code>以进行初始配置，默认在<code>3000</code>端口启动 HTTP 服务；</li>
<li>配置服务器访问端口；</li>
</ol>
<p>初次运行</p>
<img src="/2021/09/05/Gogs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Gogs%E8%BF%90%E8%A1%8C.png" class="">

<p>配置界面</p>
<img src="/2021/09/05/Gogs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Gogs%E9%85%8D%E7%BD%AE.png" class="">

<p>在本地测试的时候发现手动命令行启动 Gogs 时需要通过 Bash 开启服务，否则会出现无法克隆仓库的问题，后面才发现是环境变量不完整；</p>
<h4 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h4><p>而更推荐的做法是下载非 mws 版，这样可以使用 NSSM 将 Gogs 注册成 Windows 服务在后台运行；</p>
<p>然后通过 NSSM 注册服务并开启后，同样会出现无法克隆仓库的问题；<br>最后发现环境变量中要有 ssh-keygen 的路径，可以是 git 下的路径（<code>e.g. C:\Program Files\Git\usr\bin</code>）<br>当然也可以在 NSSM 注册服务时，通过 Environment 栏添加包含 ssh-keygen 的路径；</p>
<p>其中在使用 NSSM 注册服务时，可以按照<a href="https://gogs.io/docs/installation/run_as_windows_service">官方教程</a>进行手动配置；<br>而更简单的做法是，使用 Gogs 中自带的脚本进行自动注册；</p>
<ol>
<li>找到<code>C:\gogs\scripts\windows</code>下的<code>install-as-service.bat</code>文件；</li>
<li>右键以管理员身份打开；</li>
<li>然后看到注册成功的提示信息则说明服务已经注册并开启；</li>
<li>直接访问<code>localhost:3000</code>，进入初始配置页面进行配置；</li>
</ol>
<h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>通常在初始安装后的初始配置时完成各项配置，后续需要更新配置时可以在根目录下的<code>custom/conf/app.ini</code>。详细的配置解释和默认值请参考官方文档，其中关键的配置是下面这些，详细配置放在<a href="/2021/09/25/Gogs-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%8B%E5%86%8C/" title="Gogs-配置文件手册">Gogs-配置文件手册</a>中。</p>
<table>
<thead>
<tr>
<th align="left">配置</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">RUN_USER</td>
<td align="left">默认是 git，指定 Gogs 以哪个用户运行</td>
</tr>
<tr>
<td align="left">ROOT</td>
<td align="left">所有仓库的存储根路径</td>
</tr>
<tr>
<td align="left">PROTOCOL</td>
<td align="left">如果你使用 nginx 反代的话请使用 http，如果直接裸跑对外服务的话随意</td>
</tr>
<tr>
<td align="left">DOMAIN</td>
<td align="left">域名，会影响 SSH clone 地址</td>
</tr>
<tr>
<td align="left">ROOT_URL</td>
<td align="left">完整的根路径，会影响访问时页面上链接的指向，以及 HTTP clone 的地址</td>
</tr>
<tr>
<td align="left">HTTP_ADDR</td>
<td align="left">监听地址，使用 nginx 的话建议 127.0.0.1，否则 0.0.0.0 也可以</td>
</tr>
<tr>
<td align="left">HTTP_PORT</td>
<td align="left">监听端口，默认 3000</td>
</tr>
<tr>
<td align="left">INSTALL_LOCK</td>
<td align="left">锁定安装页面</td>
</tr>
<tr>
<td align="left">Mailer</td>
<td align="left">相关的选项，可以使用 Mailgun 的免费邮件发送服务，将 Mailgun 的 SMTP 配置填入到配置中</td>
</tr>
</tbody></table>
<p>此外除了基础配置外，还可以通过自定义模板更改默认的页面主题外观或新增一些额外的自定义功能；注意：所有针对自定义模板的修改都需要重启 Gogs 实例。</p>
<ul>
<li>重载 HTML 模板：通过在<code>custom/templates/</code>目录下创建一个自定义版本的副本实现 HTML 模板重载（包括邮件模板）</li>
<li>重载静态文件：通过在<code>custom/public/</code>目录下创建一个自定义版本的副本实现静态文件重载（CSS、JS、图片等等）</li>
<li>注入自定义内容到模板中：通过在<code>custom/templates/inject/head.tmpl</code>或<code>custom/templates/inject/footer.tmpl</code>文件中分别添加自定义头部 meta 信息和引入自定义静态资源（如 CSS）或自定义 JS 和分析代码；</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://gogs.io/docs">官方文档</a></li>
<li><a href="https://github.com/gogs/gogs/releases">历史版本</a></li>
<li><a href="https://blog.mynook.info/post/host-your-own-git-server-using-gogs/">使用 Gogs 搭建自己的 Git 服务器</a></li>
<li><a href="https://discuss.gogs.io/t/how-to-inject-custom-head-and-footer/943">注入自定义头部和尾部</a></li>
<li><a href="https://o-r.github.io/2018/05/12/Gogs%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/">Gogs在windows上的安装和配置</a></li>
<li><a href="https://dashdream.github.io/p/7dd2a61d.html">gogs配置详解</a></li>
<li><a href="https://www.cxyzjd.com/article/e891377/109302884">win10操作系统Gogs配置解决ssh方式git免密下载上传问题</a></li>
<li><a href="https://www.itfanr.cc/2017/03/24/docker-ubuntu-gogs-problems/">Docker-Ubuntu-Gogs部署及配置时遇到的问题</a></li>
<li><a href="https://www.jianshu.com/p/b78b385cf168">Windows下安装Gogs</a></li>
<li><a href="https://www.cnblogs.com/configure/p/7878501.html">Git服务器Gogs简易安装-Windows环境</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Gogs-配置文件手册</title>
    <url>/2021/09/25/Gogs-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>该配置文件手册是有关 Gogs 配置文件选项的详尽描述，主要为了方便使用 Gogs 时查相关配置项。<br>注：Gogs 任何修改都是发生在<code>custom/conf/app.ini</code>自定义配置文件中，该文件的具体位置与您的设置有关。<br>完整的默认设置可以通过<code>app.ini</code>文件查看。如果看到类似<code>%(X)s</code>字符，这是由 ini 提供的递归取值的特性。</p>
<span id="more"></span>

<p><strong>概览</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">APP_NAME</td>
<td align="left">应用名称，可以改成您的组织或公司名称</td>
</tr>
<tr>
<td align="left">RUN_USER</td>
<td align="left">运行应用的用户名称，我们建议您使用 git，但如果您在个人计算机上运行 Gogs，请修改为您的系统用户名称。如果没有正确设置这个值，很可能导致您的应用崩溃</td>
</tr>
<tr>
<td align="left">RUN_MODE</td>
<td align="left">鉴于性能和其它考虑，建议在部署环境下修改为 prod 模式。在您完成安装操作时，该值也会被设置为 prod</td>
</tr>
</tbody></table>
<p><strong>服务器 (server)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PROTOCOL</td>
<td align="left">http 或 https</td>
</tr>
<tr>
<td align="left">DOMAIN</td>
<td align="left">服务器域名</td>
</tr>
<tr>
<td align="left">ROOT_URL</td>
<td align="left">公开的完整 URL 路径</td>
</tr>
<tr>
<td align="left">HTTP_ADDR</td>
<td align="left">应用 HTTP 监听地址</td>
</tr>
<tr>
<td align="left">HTTP_PORT</td>
<td align="left">应用 HTTP 监听端口号</td>
</tr>
<tr>
<td align="left">UNIX_SOCKET_PERMISSION</td>
<td align="left">Unix 套接字文件的权限</td>
</tr>
<tr>
<td align="left">LOCAL_ROOT_URL</td>
<td align="left">用于 Gogs 工作进程（如：SSH）回访应用的本地（DMZ）URL，一般情况下请保持默认值，除非您的 SSH 服务器节点与 HTTP 并不是同一个节点入口</td>
</tr>
<tr>
<td align="left">DISABLE_SSH</td>
<td align="left">当 SSH 功能不可用时可以禁用</td>
</tr>
<tr>
<td align="left">START_SSH_SERVER</td>
<td align="left">启用该选项来启动内置 SSH 服务器</td>
</tr>
<tr>
<td align="left">SSH_DOMAIN</td>
<td align="left">允许公用网络访问 SSH 的域名</td>
</tr>
<tr>
<td align="left">SSH_PORT</td>
<td align="left">SSH 端口号，如果不为 22 的话可以在此修改</td>
</tr>
<tr>
<td align="left">SSH_LISTEN_HOST</td>
<td align="left">内置 SSH 服务器监听的地址</td>
</tr>
<tr>
<td align="left">SSH_LISTEN_PORT</td>
<td align="left">内置 SSH 服务器监听的端口</td>
</tr>
<tr>
<td align="left">SSH_ROOT_PATH</td>
<td align="left">SSH 根目录，一般为 ~/.ssh，但必须填写为 /home/git/.ssh</td>
</tr>
<tr>
<td align="left">REWRITE_AUTHORIZED_KEYS_AT_START</td>
<td align="left">激活该选项以在应用启动时自动重写 authorized_keys 文件，该选项在使用内置 SSH 服务器时将会被自动禁用</td>
</tr>
<tr>
<td align="left">SSH_KEY_TEST_PATH</td>
<td align="left">用于测试 SSH 公钥的临时目录</td>
</tr>
<tr>
<td align="left">SSH_KEYGEN_PATH</td>
<td align="left">ssh-keygen 程序的路径，默认为 ssh-keygen 即通过系统路径查找</td>
</tr>
<tr>
<td align="left">MINIMUM_KEY_SIZE_CHECK</td>
<td align="left">指定不同类型的公钥的最小密钥大小</td>
</tr>
<tr>
<td align="left">OFFLINE_MODE</td>
<td align="left">激活该选项来禁止从 CDN 获取静态资源，同时 Gravatar 服务也将被自动禁用</td>
</tr>
<tr>
<td align="left">DISABLE_ROUTER_LOG</td>
<td align="left">激活该选项来禁止打印路由日志</td>
</tr>
<tr>
<td align="left">CERT_FILE</td>
<td align="left">HTTPS 授权文件路径</td>
</tr>
<tr>
<td align="left">KEY_FILE</td>
<td align="left">HTTPS 的密钥文件路径</td>
</tr>
<tr>
<td align="left">STATIC_ROOT_PATH</td>
<td align="left">模板文件和静态文件的上级目录，默认为应用二进制所在的位置</td>
</tr>
<tr>
<td align="left">APP_DATA_PATH</td>
<td align="left">应用内部数据的存放目录</td>
</tr>
<tr>
<td align="left">ENABLE_GZIP</td>
<td align="left">激活该选项来启用应用级别 GZIP 支持</td>
</tr>
<tr>
<td align="left">LANDING_PAGE</td>
<td align="left">未登录用户的默认首页，可以是 home 或 explore（探索页）</td>
</tr>
</tbody></table>
<p><strong>仓库 (repository)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ROOT</td>
<td align="left">用户仓库存储根目录，必须为绝对路径，默认为 ~/<user name>/gogs-repositories</td>
</tr>
<tr>
<td align="left">SCRIPT_TYPE</td>
<td align="left">系统脚本类型，一般情况下均为 bash，但有些用户反应只能使用 sh</td>
</tr>
<tr>
<td align="left">ANSI_CHARSET</td>
<td align="left">当遇到无法识别的字符集时使用的默认字符集</td>
</tr>
<tr>
<td align="left">FORCE_PRIVATE</td>
<td align="left">强制要求所有新建的仓库都是私有的</td>
</tr>
<tr>
<td align="left">MAX_CREATION_LIMIT</td>
<td align="left">全局默认的每个用户可创建创建仓库上限，-1 表示无限制</td>
</tr>
<tr>
<td align="left">PREFERRED_LICENSES</td>
<td align="left">建议用户首选的授权类型</td>
</tr>
<tr>
<td align="left">DISABLE_HTTP_GIT</td>
<td align="left">激活该选项来禁止用户通过 HTTP 对 Git 仓库进行交互操作，即用户只能通过 SSH 操作</td>
</tr>
<tr>
<td align="left">ENABLE_LOCAL_PATH_MIGRATION</td>
<td align="left">激活该选项来启用本地路径迁移仓库功能。启动后默认只有管理员可以使用，普通用户必须经由管理员授权</td>
</tr>
<tr>
<td align="left">ENABLE_RAW_FILE_RENDER_MODE</td>
<td align="left">激活该选项来启用在查看原始数据时对页面进行真实渲染，例如渲染实际的 HTML 页面，有潜在安全隐患</td>
</tr>
</tbody></table>
<p><strong>仓库 - 编辑器 (repository.editor)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LINE_WRAP_EXTENSIONS</td>
<td align="left">需要显示为行包装的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：.txt,</td>
</tr>
</tbody></table>
<p><strong>仓库 - 文件上传 (repository.upload)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">激活该选项来启用仓库文件上传功能</td>
</tr>
<tr>
<td align="left">TEMP_PATH</td>
<td align="left">文件上传的临时存放目录</td>
</tr>
<tr>
<td align="left">ALLOWED_TYPES</td>
<td align="left">允许上传的文件类型（例如：”image/jpeg|image/png”），留空表示允许上传任意类型的文件</td>
</tr>
<tr>
<td align="left">FILE_MAX_SIZE</td>
<td align="left">单个上传的文件的最大体积，以 MB 为单位</td>
</tr>
<tr>
<td align="left">MAX_FILES</td>
<td align="left">单次同时上传的最多文件个数</td>
</tr>
</tbody></table>
<p><strong>版本发布 - 附件 (release.attachment)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">激活该选项来启用版本发布附件功能</td>
</tr>
<tr>
<td align="left">PATH</td>
<td align="left">存放附件的路径</td>
</tr>
<tr>
<td align="left">ALLOWED_TYPES</td>
<td align="left">允许上传的 MIME 类型，例如 “image/jpeg</td>
</tr>
<tr>
<td align="left">MAX_SIZE</td>
<td align="left">最大允许上传的附件体积，单位为 MB，例如 32</td>
</tr>
<tr>
<td align="left">MAX_FILES</td>
<td align="left">最大允许一次性上传的附件个数，例如 10</td>
</tr>
</tbody></table>
<p><strong>Markdown (markdown)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLE_HARD_LINE_BREAK</td>
<td align="left">指示是否启用硬性换行扩展</td>
</tr>
<tr>
<td align="left">CUSTOM_URL_SCHEMES</td>
<td align="left">允许被解析为链接的自定义 URL 方案，例如 git（用于 git://）和magnet（用于 magnet://）</td>
</tr>
<tr>
<td align="left">FILE_EXTENSIONS</td>
<td align="left">需要被渲染为 Markdown 格式的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：.markdown,</td>
</tr>
</tbody></table>
<p><strong>Smartypants (smartypants)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">指示是否启用 Smartypants 扩展</td>
</tr>
</tbody></table>
<p><strong>HTTP (http)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACCESS_CONTROL_ALLOW_ORIGIN</td>
<td align="left">头信息 Access-Control-Allow-Origin 的自定义值，默认为空，即不响应此头信息</td>
</tr>
</tbody></table>
<p><strong>数据库 (database)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DB_TYPE</td>
<td align="left">数据库类型，可以是 mysql、postgres、mssql 或 sqlite3</td>
</tr>
<tr>
<td align="left">HOST</td>
<td align="left">数据库主机地址与端口</td>
</tr>
<tr>
<td align="left">NAME</td>
<td align="left">数据库名称</td>
</tr>
<tr>
<td align="left">USER</td>
<td align="left">数据库用户名</td>
</tr>
<tr>
<td align="left">PASSWD</td>
<td align="left">数据库用户密码</td>
</tr>
<tr>
<td align="left">SSL_MODE</td>
<td align="left">仅限 PostgreSQL 使用</td>
</tr>
<tr>
<td align="left">PATH</td>
<td align="left">仅限 SQLite3 使用，数据库文件路径</td>
</tr>
</tbody></table>
<p><strong>应用管理 (admin)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DISABLE_REGULAR_ORG_CREATION</td>
<td align="left">激活该选项来禁止普通用户（非管理员）创建组织</td>
</tr>
</tbody></table>
<p><strong>安全 (security)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">INSTALL_LOCK</td>
<td align="left">用于指示是否允许访问安装页面（该页面可以设置管理员帐号，因此该选项非常重要）</td>
</tr>
<tr>
<td align="left">SECRET_KEY</td>
<td align="left">全局的加密密钥，务必修改该值以确保您的服务器安全（会在每次安装时自动生成随机字符串）</td>
</tr>
<tr>
<td align="left">LOGIN_REMEMBER_DAYS</td>
<td align="left">记住登录的天数</td>
</tr>
<tr>
<td align="left">COOKIE_USERNAME</td>
<td align="left">记录用户名的 Cookie 名称</td>
</tr>
<tr>
<td align="left">COOKIE_REMEMBER_NAME</td>
<td align="left">记录用户自动登录信息的 Cookie 名称</td>
</tr>
<tr>
<td align="left">REVERSE_PROXY_AUTHENTICATION_USER</td>
<td align="left">反向代理认证用户的 Header 字段名</td>
</tr>
</tbody></table>
<p><strong>服务 (service)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACTIVE_CODE_LIVE_MINUTES</td>
<td align="left">激活码的有效期，单位为分钟</td>
</tr>
<tr>
<td align="left">RESET_PASSWD_CODE_LIVE_MINUTES</td>
<td align="left">重置密码的有效期，单位为分钟</td>
</tr>
<tr>
<td align="left">REGISTER_EMAIL_CONFIRM</td>
<td align="left">激活该选项来要求注册用户必须验证邮箱，要求已启用 Mailer</td>
</tr>
<tr>
<td align="left">DISABLE_REGISTRATION</td>
<td align="left">激活该选项来禁止用户注册功能，只能由管理员创建帐号</td>
</tr>
<tr>
<td align="left">SHOW_REGISTRATION_BUTTON</td>
<td align="left">用于指示是否显示注册按钮</td>
</tr>
<tr>
<td align="left">REQUIRE_SIGNIN_VIEW</td>
<td align="left">激活该选项来要求用户必须登录才能浏览任何页面</td>
</tr>
<tr>
<td align="left">ENABLE_CACHE_AVATAR</td>
<td align="left">激活该选项来缓存 Gravatar 的头像</td>
</tr>
<tr>
<td align="left">ENABLE_NOTIFY_MAIL</td>
<td align="left">激活该选项来发送通知邮件给关注者，例如创建 issue 时，要求已启用 Mailer</td>
</tr>
<tr>
<td align="left">ENABLE_REVERSE_PROXY_AUTHENTICATION</td>
<td align="left">激活该选项来开启反向代理用户认证，请从 #165 了解更多信息</td>
</tr>
<tr>
<td align="left">ENABLE_REVERSE_PROXY_AUTO_REGISTRATION</td>
<td align="left">激活该选项来开启反向代理用户认证的自动注册功能</td>
</tr>
<tr>
<td align="left">DISABLE_MINIMUM_KEY_SIZE_CHECK</td>
<td align="left">激活该选项来禁止检查响应类型的密钥最小长度</td>
</tr>
<tr>
<td align="left">ENABLE_CAPTCHA</td>
<td align="left">激活该选项以在用户注册时要求输入验证码</td>
</tr>
</tbody></table>
<p><strong>Web 钩子 (webhook)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TYPES</td>
<td align="left">启动的 Web 钩子类型，可以是 gogs、slack、discord或dingtalk</td>
</tr>
<tr>
<td align="left">QUEUE_LENGTH</td>
<td align="left">Web钩子队列长度，如果发现部分Webhook未能成功触发，可考虑增加该值</td>
</tr>
<tr>
<td align="left">DELIVER_TIMEOUT</td>
<td align="left">发送通知的超时时间，以秒为单位</td>
</tr>
<tr>
<td align="left">SKIP_TLS_VERIFY</td>
<td align="left">指示是否允许向具有非信任证书的地址发送通知</td>
</tr>
<tr>
<td align="left">PAGING_NUM</td>
<td align="left">Web 钩子历史页面每页显示记录条数</td>
</tr>
</tbody></table>
<p><strong>邮件 (mailer)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">启用该选项以激活邮件服务</td>
</tr>
<tr>
<td align="left">SUBJECT_PREFIX</td>
<td align="left">邮件标题的前缀</td>
</tr>
<tr>
<td align="left">HOST</td>
<td align="left">SMTP 主机地址与端口</td>
</tr>
<tr>
<td align="left">DISABLE_HELO</td>
<td align="left">禁用 HELO 操作</td>
</tr>
<tr>
<td align="left">HELO_HOSTNAME</td>
<td align="left">HELO 操作的自定义主机名</td>
</tr>
<tr>
<td align="left">SKIP_VERIFY</td>
<td align="left">不验证自签发证书的有效性</td>
</tr>
<tr>
<td align="left">FROM</td>
<td align="left">邮箱的来自地址，遵循 RFC 5322规范，可以是一个单纯的邮箱地址或者 “名字” <a href="mailto:&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#x6d;">&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a> 的形式</td>
</tr>
<tr>
<td align="left">USER</td>
<td align="left">邮箱用户名</td>
</tr>
<tr>
<td align="left">PASSWD</td>
<td align="left">邮箱密码</td>
</tr>
<tr>
<td align="left">USE_PLAIN_TEXT</td>
<td align="left">使用 text/plain 作为邮件内容格式</td>
</tr>
</tbody></table>
<p>备注：Gogs 仅支持使用 STARTTLS 的 SMTP 协议</p>
<p><strong>缓存 (cache)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ADAPTER</td>
<td align="left">缓存引擎适配器，可以为 memory、redis 或 memcache。如果您使用 redis 或 memcache，请确保使用 -tags 选项重新构建所有依赖，例如：go build -tags=’redis’</td>
</tr>
<tr>
<td align="left">INTERVAL</td>
<td align="left">仅限内存缓存使用，GC 周期，单位为秒</td>
</tr>
<tr>
<td align="left">HOST</td>
<td align="left">仅限 redis 和 memcache 使用，主机地址和端口号</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">Redis：network=tcp,addr=127.0.0.1:6379,password=macaron,db=0,pool_size=100,idle_timeout=180</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">Memache：127.0.0.1:9090;127.0.0.1:9091</td>
</tr>
</tbody></table>
<p><strong>会话 (session)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PROVIDER</td>
<td align="left">Session 引擎提供者，可以是 memory、file、redis 或 mysql</td>
</tr>
<tr>
<td align="left">PROVIDER_CONFIG</td>
<td align="left">如果提供者为 file，则为文件根目录；如果为其它提供者，则为主机地址和端口号</td>
</tr>
<tr>
<td align="left">COOKIE_SECURE</td>
<td align="left">激活该选项以要求所有 session 操作均通过 HTTPS</td>
</tr>
<tr>
<td align="left">GC_INTERVAL_TIME</td>
<td align="left">GC 周期，单位为秒</td>
</tr>
</tbody></table>
<p><strong>图片 (picture)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">AVATAR_UPLOAD_PATH</td>
<td align="left">存放用户上传头像的目录</td>
</tr>
<tr>
<td align="left">GRAVATAR_SOURCE</td>
<td align="left">可以是 gravatar、duoshuo 或任何 URL，例如：<a href="http://cn.gravatar.com/avatar/">http://cn.gravatar.com/avatar/</a></td>
</tr>
<tr>
<td align="left">DISABLE_GRAVATAR</td>
<td align="left">激活该选项来仅使用本地头像</td>
</tr>
<tr>
<td align="left">ENABLE_FEDERATED_AVATAR</td>
<td align="left">激活该选项来启用 Federated 头像服务（<a href="http://www.libravatar.org),当/">http://www.libravatar.org），当</a> Gravatar 被禁用时此选项无法生效</td>
</tr>
</tbody></table>
<p><strong>附件 (attachment)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">激活该选项以允许用户上传附件</td>
</tr>
<tr>
<td align="left">PATH</td>
<td align="left">存放附件的路径</td>
</tr>
<tr>
<td align="left">ALLOWED_TYPES</td>
<td align="left">允许上传的 MIME 类型，例如 “image/jpeg</td>
</tr>
<tr>
<td align="left">MAX_SIZE</td>
<td align="left">最大允许上传的附件体积，单位为 MB，例如 4</td>
</tr>
<tr>
<td align="left">MAX_FILES</td>
<td align="left">最大允许一次性上传的附件个数，例如 5</td>
</tr>
</tbody></table>
<p><strong>时间 (time)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FORMAT</td>
<td align="left">指定日期的输出格式，默认为 RFC1123，其它可选的格式为 ANSIC、UnixDate、RubyDate、RFC822、RFC822Z、RFC850、RFC1123、RFC1123Z、RFC3339、RFC3339Nano、Kitchen、Stamp、StampMilli、StampMicro 和 StampNano。访问 <a href="http://golang.org/pkg/time/#pkg-constants">http://golang.org/pkg/time/#pkg-constants</a> 查看详情</td>
</tr>
</tbody></table>
<p><strong>日志 (log)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ROOT_PATH</td>
<td align="left">日志文件的根目录</td>
</tr>
<tr>
<td align="left">MODE</td>
<td align="left">日志记录模式，默认为 console。如果想要开启多模式，请使用逗号分割，例如：”console, file”</td>
</tr>
<tr>
<td align="left">LEVEL</td>
<td align="left">基本日志级别，默认为 Trace</td>
</tr>
</tbody></table>
<p><strong>日志 - 控制台 (log.console)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LEVEL</td>
<td align="left">控制台日志级别，留空则继承父值</td>
</tr>
</tbody></table>
<p><strong>日志 - 文件 (log.file)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LEVEL</td>
<td align="left">文件日志级别，留空则继承父值</td>
</tr>
<tr>
<td align="left">LOG_ROTATE</td>
<td align="left">激活该选项以启用日志文件自转</td>
</tr>
<tr>
<td align="left">DAILY_ROTATE</td>
<td align="left">激活该选项以进行日常自转</td>
</tr>
<tr>
<td align="left">MAX_SIZE_SHIFT</td>
<td align="left">自转需要达到的最大文件体积，使用位左移，默认为 28 即 1 &lt;&lt; 28，表示 256MB</td>
</tr>
<tr>
<td align="left">MAX_LINES</td>
<td align="left">自转需要达到的最大文件行数，默认为 1000000</td>
</tr>
<tr>
<td align="left">MAX_DAYS</td>
<td align="left">保留自转文件的最长期限，默认为 7 天后删除</td>
</tr>
</tbody></table>
<p><strong>日志 - Slack (log.slack)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LEVEL</td>
<td align="left">Slack 日志级别，留空则继承父值</td>
</tr>
<tr>
<td align="left">URL</td>
<td align="left">Slack Web 钩子 URL</td>
</tr>
</tbody></table>
<p><strong>日志 - Discord (log.discord)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LEVEL</td>
<td align="left">Discord 日志级别，留空则继承父值</td>
</tr>
<tr>
<td align="left">URL</td>
<td align="left">Discord Web 钩子 URL</td>
</tr>
<tr>
<td align="left">USERNAME</td>
<td align="left">在 Web 钩子中显示的用户名</td>
</tr>
</tbody></table>
<p><strong>Cron (cron)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">激活该选项以允许周期性运行 Cron 任务</td>
</tr>
<tr>
<td align="left">RUN_AT_START</td>
<td align="left">激活该选项以允许在启动时执行 Cron 任务</td>
</tr>
</tbody></table>
<p><strong>Cron - 更新镜像 (cron.update_mirrors)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SCHEDULE</td>
<td align="left">定时更新仓库镜像的 Cron 语法，例如：@every 1h</td>
</tr>
</tbody></table>
<p><strong>Cron - 仓库健康检查 (cron.repo_health_check)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SCHEDULE</td>
<td align="left">定时进行仓库健康检查的 Cron 语法，例如：@every 24h</td>
</tr>
<tr>
<td align="left">TIMEOUT</td>
<td align="left">仓库健康检查超时的定义语法，例如：60s</td>
</tr>
<tr>
<td align="left">ARGS</td>
<td align="left">git fsck 命令的参数，例如：–unreachable –tags</td>
</tr>
</tbody></table>
<p><strong>Cron - 仓库统计检查 (cron.check_repo_stats)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">RUN_AT_START</td>
<td align="left">激活该选项以在启动时执行仓库统计检查</td>
</tr>
<tr>
<td align="left">SCHEDULE</td>
<td align="left">定时进行仓库统计检查的 Cron 语法，例如：@every 24h</td>
</tr>
</tbody></table>
<p><strong>Cron - 仓库归档清理 (cron.repo_archive_cleanup)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">RUN_AT_START</td>
<td align="left">激活该选项以在启动时执行仓库归档清理</td>
</tr>
<tr>
<td align="left">SCHEDULE</td>
<td align="left">定时进行仓库归档清理的 Cron 语法，例如：@every 24h</td>
</tr>
<tr>
<td align="left">OLDER_THAN</td>
<td align="left">仓库归档的文件有效期，过期的归档将被清理，例如：24h</td>
</tr>
</tbody></table>
<p><strong>Git (git)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DISABLE_DIFF_HIGHLIGHT</td>
<td align="left">激活该选项以禁用行内差异高亮</td>
</tr>
<tr>
<td align="left">MAX_GIT_DIFF_LINES</td>
<td align="left">差异对比页面单个文件显示的最大行数</td>
</tr>
<tr>
<td align="left">MAX_GIT_DIFF_LINE_CHARACTERS</td>
<td align="left">差异对比页面单行显示的最大字符数</td>
</tr>
<tr>
<td align="left">MAX_GIT_DIFF_FILES</td>
<td align="left">差异对比页面文件显示的最多个数</td>
</tr>
<tr>
<td align="left">GC_ARGS</td>
<td align="left">git gc 命令的参数，例如：–aggressive –auto</td>
</tr>
</tbody></table>
<p><strong>Git - 超时 (git.timeout)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MIGRATE</td>
<td align="left">仓库迁移操作超时，默认为 600 秒</td>
</tr>
<tr>
<td align="left">MIRROR</td>
<td align="left">仓库镜像同步操作超时，默认为 300 秒</td>
</tr>
<tr>
<td align="left">CLONE</td>
<td align="left">仓库克隆操作超时，默认为 300 秒</td>
</tr>
<tr>
<td align="left">PULL</td>
<td align="left">仓库拉取操作超时，默认为 300 秒</td>
</tr>
<tr>
<td align="left">GC</td>
<td align="left">仓库垃圾回收操作超时，默认为 60 秒</td>
</tr>
</tbody></table>
<p><strong>UI (ui)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">EXPLORE_PAGING_NUM</td>
<td align="left">探索页面每页显示仓库的数量</td>
</tr>
<tr>
<td align="left">ISSUE_PAGING_NUM</td>
<td align="left">每页显示工单（Issue）的数量（应用到所有以列表形式显示工单的页面）</td>
</tr>
<tr>
<td align="left">FEED_MAX_COMMIT_NUM</td>
<td align="left">一条最新活动中显示代码提交（Commit）的最大数量</td>
</tr>
<tr>
<td align="left">THEME_COLOR_META_TAG</td>
<td align="left">被用于 Android &gt;= 5.0 版本 “theme-color” 标记的值，无效的值将被忽略并使用默认值（查看详情）</td>
</tr>
<tr>
<td align="left">MAX_DISPLAY_FILE_SIZE</td>
<td align="left">显示到页面的最大文件体积（Byte）</td>
</tr>
</tbody></table>
<p><strong>UI - Admin (ui.admin)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">USER_PAGING_NUM</td>
<td align="left">用户管理页面每页显示记录条数</td>
</tr>
<tr>
<td align="left">REPO_PAGING_NUM</td>
<td align="left">仓库管理页面每页显示记录条数</td>
</tr>
<tr>
<td align="left">NOTICE_PAGING_NUM</td>
<td align="left">系统提示管理页面每页显示记录条数</td>
</tr>
<tr>
<td align="left">ORG_PAGING_NUM</td>
<td align="left">组织管理页面每页显示记录条数</td>
</tr>
</tbody></table>
<p><strong>Prometheus (prometheus)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ENABLED</td>
<td align="left">激活该选项以启用 Prometheus 监控信息，默认为 true</td>
</tr>
<tr>
<td align="left">ENABLE_BASIC_AUTH</td>
<td align="left">激活该选项以启用 HTTP 基本认证保护监控信息数据，默认为 false</td>
</tr>
<tr>
<td align="left">BASIC_AUTH_USERNAME</td>
<td align="left">HTTP 基本认证的用户名</td>
</tr>
<tr>
<td align="left">BASIC_AUTH_PASSWORD</td>
<td align="left">HTTP 基本认证的密码</td>
</tr>
</tbody></table>
<p><strong>其他 (other)</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SHOW_FOOTER_BRANDING</td>
<td align="left">激活该选项以在页脚显示 Gogs 推广信息</td>
</tr>
<tr>
<td align="left">SHOW_FOOTER_VERSION</td>
<td align="left">激活该选项以在页脚显示 Gogs 版本信息</td>
</tr>
<tr>
<td align="left">SHOW_FOOTER_TEMPLATE_LOAD_TIME</td>
<td align="left">激活该选项以在页脚显示 Gogs 模板加载时间</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>Gogs</tag>
        <tag>自查手册</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages搭建个人博客网站</title>
    <url>/2021/04/05/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本文记录了如何利用 Hexo 和 Github Pages 快速搭建个人博客网站的整个过程。以下代码均已我的博客和仓库为例，请自行更改为自己的。</p>
<p>中文官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>
<span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h4><p>官网地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>选择相应版本安装后分别执行<code>node -v</code>和<code>npm -v</code>查看是否正确安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v12.16.2</span><br><span class="line">&gt; npm -v</span><br><span class="line">6.14.4</span><br></pre></td></tr></table></figure>

<h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p>官网地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>同样在安装好后检查安装的版本信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git --version</span><br><span class="line">git version 2.29.2.windows.2</span><br></pre></td></tr></table></figure>

<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>全局安装<code>hexo-cli</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>检查 Hexo 版本，会得到以下输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo -v</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 12.16.2</span><br><span class="line">v8: 7.8.279.23-node.34</span><br><span class="line">uv: 1.34.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.40.0</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1e</span><br><span class="line">cldr: 36.0</span><br><span class="line">icu: 65.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure>

<p>然后依次执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; mkdir myBlog <span class="comment"># 创建一个空的博客文件夹</span></span><br><span class="line">&gt; <span class="built_in">cd</span> myBlog <span class="comment"># 进入到博客文件夹中</span></span><br><span class="line">&gt; hexo init <span class="comment"># 使用 hexo init 命令下在 Hexo 项目初始化文件</span></span><br><span class="line">&gt; npm install <span class="comment"># 下载 Hexo 项目的第三方依赖</span></span><br></pre></td></tr></table></figure>

<p>最后得到的文件目录如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">文件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">_config.yml</td>
<td align="left">网站配置文件</td>
</tr>
<tr>
<td align="left">package.json</td>
<td align="left">项目配置文件</td>
</tr>
<tr>
<td align="left">scaffolds</td>
<td align="left">模板文件夹</td>
</tr>
<tr>
<td align="left">source</td>
<td align="left">资源文件夹</td>
</tr>
<tr>
<td align="left">themes</td>
<td align="left">主题文件夹</td>
</tr>
</tbody></table>
<p>本地预览</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo generate</span><br><span class="line">&gt; hexo server</span><br></pre></td></tr></table></figure>

<p>在浏览器中访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可查看网站默认样式。</p>
<h4 id="关联-GitHub-仓库"><a href="#关联-GitHub-仓库" class="headerlink" title="关联 GitHub 仓库"></a>关联 GitHub 仓库</h4><ul>
<li>创建仓库</li>
</ul>
<p>在 GitHub 中创建一个同名仓库，命名为<code>coley48.github.io</code>，这也将成为网站的域名。</p>
<ul>
<li>配置 Git</li>
</ul>
<p>如果初次使用 Git，需要设置用户名和邮箱。打开 Git Bash，设置全局用户名和邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name coley48</span><br><span class="line">$ git config --global user.email coley48@qq.com</span><br></pre></td></tr></table></figure>

<p>查看用户名和邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name &amp;&amp; git config user.email</span><br><span class="line">coley48</span><br><span class="line">coley48@qq.com</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 SSH 密钥</li>
</ul>
<p><code>ssh</code>还可以设置密码，通常方便起见，这里不设置密码，全部回车。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;coley48@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>默认创建在用户文件夹下的<code>.ssh</code>文件夹中，查看生成的密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh &amp;&amp; ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥，用于上传到 GitHub。</p>
<p>将<code>ssh key</code>关联到 GitHub 账号<br>在 Git Bash 中复制<code>id_rsa.pub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub &gt; /dev/clipboard</span><br></pre></td></tr></table></figure>

<p>或在 cmd 终端中复制<code>id_rsa.pub</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; clip &lt; id_rsa.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 SSH 密钥</li>
</ul>
<p>在 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 页面中选择<code>New SSH key</code>新建<code>ssh key</code>，标题自定义，然后将上一步复制的公钥粘贴进去，点击<code>Add SSH key</code>完成添加。</p>
<img src="/2021/04/05/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/%E6%B7%BB%E5%8A%A0ssh-key.png" class="">

<ul>
<li>测试 SSH 连接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">&#x27;192.30.255.113&#x27;</span> to the list of known hosts.</span><br><span class="line">Hi Coley48! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<p>GitHub文档：<a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh">使用 SSH 连接到 GitHub</a></p>
<ul>
<li>Hexo 一键部署</li>
</ul>
<p>一键部署功能是在本地编辑完成之后，直接使用<code>hexo deploy</code>命令就可以完成部署操作。</p>
<p>一键部署功能需要安装 Hexo 的部署插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后修改_config.yml，为 Hexo 指定部署的 Github 仓库：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Coley48/coley48.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>之后就可以使用以下命令更新网站：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean <span class="comment"># 清除之前生成的静态文件，不是必须的</span></span><br><span class="line">&gt; hexo generate <span class="comment"># 生成静态网页文件</span></span><br><span class="line">&gt; hexo deploy <span class="comment"># 部署到远程仓库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定个人域名</li>
</ul>
<p>GitHub Pages还提供 Custom Domain 可以使用自定义域名。</p>
<ol>
<li>在域名解析控制台添加 CNAME 解析记录，将 coley48.github.io 解析到 blog.coley48.cn。</li>
<li>同时在 github.io 仓库中设置 Custom Domain 为 blog.coley48.cn。</li>
<li>然后在 /source 文件夹下创建一个 CNAME 文本文件，存放域名。</li>
<li>最后重新生成部署一下网站，稍微等待片刻便可以通过自己的域名访问博客网站了。</li>
</ol>
<p>Github文档：<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site">配置 GitHub Pages 站点的自定义域</a></p>
<h3 id="Hexo-基本配置"><a href="#Hexo-基本配置" class="headerlink" title="Hexo 基本配置"></a>Hexo 基本配置</h3><p>Hexo的所有配置都在_config.yml文件中，部分配置如下：</p>
<table>
<thead>
<tr>
<th align="right">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="right">title</td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="right">subtitle</td>
<td align="left">网站副标题，可以放座右铭</td>
</tr>
<tr>
<td align="right">description</td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="right">keywords</td>
<td align="left">网站的关键词</td>
</tr>
<tr>
<td align="right">author</td>
<td align="left">作者名字</td>
</tr>
<tr>
<td align="right">language</td>
<td align="left">网站使用的语言</td>
</tr>
<tr>
<td align="right">url</td>
<td align="left">网址，必须是完整的url</td>
</tr>
<tr>
<td align="right">post_asset_folder</td>
<td align="left">启动 Asset 文件夹，默认false</td>
</tr>
<tr>
<td align="right">relative_link</td>
<td align="left">把链接改为与根目录的相对位址，默认false</td>
</tr>
<tr>
<td align="right">theme</td>
<td align="left">设置主题，false禁用主题</td>
</tr>
<tr>
<td align="right">theme_config</td>
<td align="left">主题的配置参数，优先级高</td>
</tr>
<tr>
<td align="right">deploy</td>
<td align="left">部署配置</td>
</tr>
</tbody></table>
<p>更多配置详见<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></p>
<h3 id="Hexo-的基本使用"><a href="#Hexo-的基本使用" class="headerlink" title="Hexo 的基本使用"></a>Hexo 的基本使用</h3><ul>
<li>初始化</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建网站，未指定 folder 时在当前文件夹下创建。<br>创建步骤：</p>
<ol>
<li>git 下载包含 hexo-theme-landscape 主题的 hexo-starter 项目。</li>
<li>通过包管理工具安装依赖，默认使用 npm。</li>
</ol>
<ul>
<li>新建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建文章，<code>layout</code>默认使用<code>_config.yml</code>中<code>default_layout</code>参数值，包含空格的标题需要加引号。三种布局：<code>post</code>、<code>page</code>、<code>draft</code>。<br>参数：<br><code>-p, --path</code> 自定义文章的路径，默认使用标题作为文章路径。<br><code>-r, --replace</code> 替换同名文章。<br><code>-s, --slug</code> 作为新文章的文件名和发布后的 URL。</p>
<ul>
<li>生成</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo generate/g</span><br></pre></td></tr></table></figure>

<p>生成网页，将生成的文件放入<code>public</code>文件夹下，如果存在<code>public</code>，默认只生成改动的文件。<br>参数：<br><code>-d, --deploy</code> 文件生成后立即部署网站。<br><code>-w, --watch</code> 监视文件变动。<br><code>-b, --bail</code> 生成过程中如果发生任何未处理的异常则爆出异常。<br><code>-f, --force</code> 强制重新生成文件，等同于<code>hexo clean &amp;&amp; hexo generate</code>。<br><code>-c, --concurrency</code> 设置最大同时生成文件的数量，默认无限制。<br><code>--config &lt;custom.yml&gt; [config.json]</code> 使用自定义配置文件。</p>
<ul>
<li>发布</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<ul>
<li>本地预览</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo server/s</span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，网址为：<a href="http://localhost:4000/">http://localhost:4000</a>。<br>参数：<br><code>-p, --port</code> 设置端口。<br><code>-s, --static</code> 只使用静态文件。<br><code>-l, --log</code> 启动日志记录，使用覆盖记录格式。<br><code>--config &lt;custom.yml&gt;</code> 使用自定义配置文件。</p>
<ul>
<li>部署</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo deploy/d</span><br></pre></td></tr></table></figure>

<p>部署网站<br><code>-g, --generate</code> 部署之前预先生成静态文件，等同于<code>hexo g -d</code>。</p>
<ul>
<li>清除</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件<code>db.json</code>和已生成的静态文件夹<code>public</code>。</p>
<p>更多命令详见<a href="https://hexo.io/zh-cn/docs/commands">官方文档</a>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></li>
<li><a href="https://www.cnblogs.com/michael-xiang/p/10464518.html">Hexo 搭建 Blog 精简笔记</a></li>
<li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.baidujs&dist_request_id=1328741.37347.16169781187402753&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.baidujs">Hexo 史上最全搭建教程</a></li>
<li><a href="http://www.xinxiaoyang.com/programming/2016-11-25-hexo-image-bug/">Hexo 图片插入</a></li>
<li><a href="https://www.mls-tech.info/hexo/hexo-use-internal-link/">如何在Hexo的博文中引用自己的文章</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题的配置和优化</title>
    <url>/2021/04/14/Hexo-Next%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Next-简介"><a href="#Next-简介" class="headerlink" title="Next 简介"></a>Next 简介</h3><p>Next 是 Hexo 最受欢迎的主题之一，而且在 Next 之下还分为4个<code>scheme</code>。可以根据个人喜好来设置相应的<code>scheme</code>。</p>
<img src="/2021/04/14/Hexo-Next%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/Next-theme.png" class="">

<p>官方文档：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a><br>GitHub 地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<span id="more"></span>

<h3 id="Next-安装"><a href="#Next-安装" class="headerlink" title="Next 安装"></a>Next 安装</h3><p>进入到博客根目录下，将主题项目下载到<code>themes/</code>文件夹下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> myBlog</span><br><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>然后打开根目录下的<code>_config.yml</code>配置文件，即网站配置文件，将其中的主题选项，参数改为<code>next</code>即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h3 id="Next-配置"><a href="#Next-配置" class="headerlink" title="Next 配置"></a>Next 配置</h3><p>这里有两种方式配置 Next 主题，一是更改<code>/themes/next/</code>文件夹下的<code>_config.yml</code>，即主题配置文件；二是在网站配置文件中添加一个 <code>theme_config</code>属性，然后在该属性后面添加配置参数。</p>
<p>这里推荐使用第二种方式，因为网站配置文件中<code>theme_config</code>下参数优先级高于主题配置文件，因此会覆盖主题配置文件，同时不用更改 Next 主题源码，当 Next 主题更新时也不需要再修改主题配置文件。</p>
<p>以我的博客为例，主题配置部分如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme_config:</span> </span><br><span class="line">  <span class="comment"># 页面底部设置</span></span><br><span class="line">  <span class="attr">footer:</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># 设置年份和版权信息</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span> <span class="comment"># 默认心形，也可以设置 Font Awessome 中的其他图标 </span></span><br><span class="line">      <span class="comment"># https://fontawesome.com/icons</span></span><br><span class="line">      <span class="attr">animated:</span> <span class="literal">true</span> <span class="comment"># 添加动画，默认 false</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#fc6423&quot;</span> <span class="comment"># 使用十六进制设置图标颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">powered:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Powered by Hexo &amp; NexT</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2021</span> <span class="comment"># 设置建站时间</span></span><br><span class="line">    <span class="attr">copyright:</span> <span class="string">Hush</span> <span class="comment"># 设置版权归属</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文章协议</span></span><br><span class="line">  <span class="attr">creative_commons:</span></span><br><span class="line">    <span class="attr">license:</span> <span class="string">by-nc-sa</span> <span class="comment"># 协议名</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="literal">false</span> <span class="comment"># 是否显示在侧栏</span></span><br><span class="line">    <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 是否显示在文章中</span></span><br><span class="line">    <span class="attr">language:</span> <span class="comment"># 选择语言</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 主题方案</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">Gemini</span> <span class="comment"># 选择主题方案，默认 Muse</span></span><br><span class="line">  <span class="comment"># Muse | Mist | Pisces | Geminim</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 菜单栏页面设置</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span> <span class="comment"># 主页</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span> <span class="comment"># 关于</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span> <span class="comment"># 标签</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span> <span class="comment"># 分类</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span> <span class="comment"># 归档</span></span><br><span class="line">    <span class="comment">#schedule: /schedule/ || fa fa-calendar # 计划</span></span><br><span class="line">    <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap # 站点地图</span></span><br><span class="line">    <span class="comment"># commonweal: /404/ || fa fa-heartbeat # 公益404</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 头像设置</span></span><br><span class="line">  <span class="attr">avatar:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/images/avator.jpg</span> <span class="comment"># 设置头像路径</span></span><br><span class="line">    <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 头像圆角</span></span><br><span class="line">    <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment"># 头像旋转效果</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 社交设置</span></span><br><span class="line">  <span class="attr">social:</span></span><br><span class="line">    <span class="attr">GitHub:</span> <span class="string">https://github.com/Coley48</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span> <span class="comment"># GitHub</span></span><br><span class="line">    <span class="attr">E-Mail:</span> <span class="string">mailto:coley48@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span> <span class="comment"># 邮箱</span></span><br><span class="line">    <span class="comment"># Weibo | Google | Twitter | FB Page | StackOverflow |  YouTube</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打赏功能设置</span></span><br><span class="line">  <span class="attr">reward_settings:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否开启打赏功能</span></span><br><span class="line">    <span class="attr">animation:</span> <span class="literal">false</span> <span class="comment"># 打赏功能动画效果</span></span><br><span class="line">    <span class="comment">#comment: Donate comment here. # 设置打赏语</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打赏方式设置</span></span><br><span class="line">  <span class="attr">reward:</span></span><br><span class="line">    <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">    <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">    <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">    <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代码块设置</span></span><br><span class="line">  <span class="attr">codeblock:</span></span><br><span class="line">    <span class="attr">highlight_theme:</span> <span class="string">normal</span> <span class="comment"># 高亮主题 </span></span><br><span class="line">    <span class="comment"># normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">    <span class="attr">copy_button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启一键复制功能</span></span><br><span class="line">      <span class="attr">show_result:</span> <span class="literal">true</span> <span class="comment"># 显示复制成功结果</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">mac</span> <span class="comment"># 三种显示效果 default | flat | mac</span></span><br><span class="line">    <span class="attr">beian:</span> <span class="comment"># 备案</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">icp:</span> <span class="string">蜀ICP备</span> <span class="number">20003974</span><span class="number">-1</span><span class="string">号</span></span><br><span class="line">      <span class="comment"># gongan_id: 1234567890</span></span><br><span class="line">      <span class="comment"># gongan_num: 京公网安备 1234567890号</span></span><br><span class="line">      <span class="comment"># gongan_icon_url: /uploads/beian.png</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 回顶部按钮</span></span><br><span class="line">  <span class="attr">back2top:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># 在侧栏显示</span></span><br><span class="line">    <span class="attr">scrollpercent:</span> <span class="literal">true</span> <span class="comment"># 显示百分比</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 阅读进度条</span></span><br><span class="line">  <span class="attr">reading_progress:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># 显示位置 top | bottom</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span> <span class="comment"># 进度条颜色</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">3px</span> <span class="comment"># 进度条宽度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">  <span class="attr">github_banner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="string">https://github.com/Coley48</span> <span class="comment"># GitHub 地址</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Local Search 本地搜索</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment"># 搜索结果显示方式，auto 内容更改显示；manual 手动回车显示</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span> <span class="comment"># 设置显示条数，-1 为显示所有</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span> <span class="comment"># 反转义 html 字符串</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span> <span class="comment"># 页面加载时预加载搜索数据</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 添加友链</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">    <span class="comment"># Title: http://site.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多配置详见：<a href="http://theme-next.iissnan.com/">Next 使用文档</a>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://jiyali.github.io/2019/04/15/hexo-next-%E9%83%A8%E7%BD%B2%E5%90%84%E7%A7%8D%E7%82%AB%E9%85%B7%E5%8D%9A%E5%AE%A2%E7%89%B9%E6%95%88/">hexo+next 部署各种炫酷博客特效</a></li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization/">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX环境搭建和配置教程</title>
    <url>/2021/10/10/LaTeX%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="关于-LaTeX"><a href="#关于-LaTeX" class="headerlink" title="关于 LaTeX"></a>关于 LaTeX</h3><blockquote>
<p>LaTeX is not a stand-alone typesetting program in itself, but document preparation software that runs on top of Donald E. Knuth’s TeX typesetting system. </p>
</blockquote>
<p>LaTeX 不是一个独立运行的排版程序，LaTeX 运行在高德纳 (Donald E. Knuth) 开发的、以排版文字和数学公式为目的的排版软件上。LaTeX 使用 TEX 作为它的排版引擎，可以粗略的把 LaTeX 理解为对 TeX 的一层封装。</p>
<p>本文主要记录了 LaTeX 环境搭建以及配置的过程。</p>
<span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>LaTeX 还有很多编辑器，如 TeXworks、TexStudio、WinEdt、MiKtex、protex等等。因为 TeX Live 同 VS Code 一样是开源免费的，且跨平台的工具；且维护更新都比较快；因此我选用 TeX Live 和 VS Code 搭建 LaTeX 的编译环境。</p>
<h4 id="安装-tex-Live"><a href="#安装-tex-Live" class="headerlink" title="安装 tex Live"></a>安装 tex Live</h4><p>这里只记录一下大致的安装步骤，详细带图的安装步骤可以参考<a href="https://zhuanlan.zhihu.com/p/41855480">最新TeXLive 环境的安装与配置</a>；</p>
<ol>
<li>从<a href="https://www.tug.org/texlive/">TeX Live 官网</a>或者<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">清华镜像源</a>下载 TeX Lsive 文件；</li>
<li>打开下载好的 iso 文件，找到文件夹下的<code>install-tl-windows.bat</code>，右键以管理员身份运行，就会看到安装的界面；</li>
<li>在安装界面中，修改一下安装的目录，去掉安装texwork前端界面选项，然后在高级选项中只保留中文，之后点击安装；</li>
<li>安装的时间稍微有点长，最后看到欢迎字样时，表示安装完成，可以直接关闭；</li>
<li>在命令行中输入<code>xelatex -v</code>命令测试，会有很多版本信息出现，表示安装成功；</li>
</ol>
<img src="/2021/10/10/LaTeX%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/TeX-Live%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" class="">

<h4 id="配置-VS-Code"><a href="#配置-VS-Code" class="headerlink" title="配置 VS Code"></a>配置 VS Code</h4><p>这里省略 VS Code 安装步骤，详细安装配置以及配置项说明可以参考<a href="https://zhuanlan.zhihu.com/p/166523064">Visual Studio Code 配置LaTeX</a>；</p>
<ol>
<li>安装插件 LaTeX Workshop；</li>
<li>在<code>setting.json</code>设置中添加一下配置；</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span>: <span class="string">&quot;never&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.error.show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.tools&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-outdir=%OUTDIR%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;XeLaTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PDFLaTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BibTeX&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LaTeXmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.out&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span>: <span class="string">&quot;onFailed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span>: <span class="string">&quot;lastUsed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span>: <span class="string">&quot;double-click&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ol>
<li>新建 tex 文件；</li>
<li>切换到右侧的 tex 栏；</li>
<li>选择构建方式<code>xelatex -&gt; bibtex -&gt; xelatex*2</code>；</li>
<li>编译后文件夹下会生成 pdf 文件和很多其他文件；</li>
</ol>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">Hello, <span class="keyword">\LaTeX</span>!</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/10/10/LaTeX%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/hello-latex.png" class="">

<p>在 VS Code 中可以使用快捷键：<br><code>Ctrl</code>+<code>Alt</code>+<code>b</code>：编译输出当前编辑的 tex 文件；<br><code>Ctrl</code>+<code>Alt</code>+<code>v</code>：预览当前编辑的 tex 文件输出的 pdf 文件；</p>
<p>主要的编译器：</p>
<ul>
<li>latex 虽然名为 latex 命令，底层调用的引擎其实是 pdfTEX。该命令生成 dvi（Device Indexpendent）格式的文档，用 dvipdfmx 命令可以将其转为 pdf。</li>
<li>pdflatex 底层调用的引擎也是 pdfTEX，可以直接生成 pdf 格式的文档。</li>
<li>xelatex 底层调用的引擎是 XƎTEX，支持 UTF-8 编码和 TrueType / OpenType 字体。当前较为方便的中文排版解决方案基于 xelatex。</li>
<li>lualatex 底层调用的引擎是 LuaTEX，这个引擎在 pdfTEX 引擎基础上发展而来，除了支持 UTF-8 编码和 TrueType / OpenType 字体外，还支持通过 Lua 语言扩展 TEX 的功能。lualatex 编译命令下的中文排版支持需要借助 luatex-ja 宏包。</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://www.latex-project.org/">LaTeX 官网</a></li>
<li><a href="https://www.tug.org/texlive/">TeX Live 官网</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">TeX Live 清华镜像源</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/41855480">最新TeXLive 环境的安装与配置</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/166523064">Visual Studio Code 配置LaTeX</a></li>
<li><a href="https://www.overleaf.com/">overleaf 在线编辑工具</a></li>
<li><a href="https://www.sharelatex.com/">ShareLaTeX 在线编辑工具</a></li>
<li><a href="https://www.tablesgenerator.com/">LaTeX 表格在线生成工具</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>文字排版</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI + GitHub Pages自动部署Hexo博客</title>
    <url>/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="什么是持续集成？"><a href="#什么是持续集成？" class="headerlink" title="什么是持续集成？"></a>什么是持续集成？</h3><p>持续集成（Continuous Integration，简称 CI）指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码“集成”到主干。</p>
<p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>
<p>Travis CI 提供的是持续集成服务。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p>
<p>本文记录了利用 Travis CI 搭建自动部署的 Hexo 博客系统的整个过程。</p>
<span id="more"></span>

<h3 id="Travis-CI-的使用"><a href="#Travis-CI-的使用" class="headerlink" title="Travis CI 的使用"></a>Travis CI 的使用</h3><h4 id="创建-token"><a href="#创建-token" class="headerlink" title="创建 token"></a>创建 token</h4><ol>
<li><p>进入配置页面，先在 Github 的设置页面中找到 Developer settings，点进入后选择第三条 Personal access tokens，或者直接点击<a href="https://github.com/settings/tokens">这个链接</a>跳转配置页面。</p>
</li>
<li><p>生成密钥，点击右上 Generate new token 按钮，可能会需要输入密码验证一下用户身份，然后填写 token 名称用于标识该 token 的用途，然后在下方为 token 设置权限，这里只需要添加 repo 即可。</p>

<p>这里需要注意的是，密钥只会在第一次生成时可见，页面刷新后就无法查看密钥的值，因此创建后需要立即保存，否则只能重新生成。</p>
</li>
<li><p>添加密钥，进入 Travis CI 官网 <a href="https://travis-ci.com/">travis-ci.com</a>，首次进入需要通过 Github 来进行仓库的授权访问，完成之后会进入到自己的控制面板，这里可以看到自己 GitHub 上的所有仓库，然后进入需要部署的仓库的 setting 页面，在这里添加环境变量，变量名设置为 GH_TOKEN ，变量值为上一步骤中保存的哈希值。</p>

<p>切记不要点开 DISPLAY VALUE IN BUILD LOG 选项，否则 token 值会输出到构建日志中，就会暴露给别人。</p>
</li>
</ol>
<h4 id="添加travis-yml"><a href="#添加travis-yml" class="headerlink" title="添加travis.yml"></a>添加<code>travis.yml</code></h4><p>Travis CI 的的部署极其简单，只用在项目根目录中添加一个<code>travis.yml</code>配置文件，该文件指定了所有 Travis CI 的构建和部署行为。</p>
<p>下面以我的 Hexo 博客项目为例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">os:</span> <span class="string">linux</span> <span class="comment"># 选择构建的操作系统</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 项目语言</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span>  <span class="comment"># 使用 nodejs LTS v10</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 只监控存放源代码的 main 分支</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span> <span class="comment"># 缓存 node_modules 加快构建速度</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="comment"># 构建环境搭建，根据所用的主题，这里会有所不同</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 在 CI 环境内安装 Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">themes</span> <span class="comment"># 由于 main 分支中没有将 themes/ 文件夹，所以需要重新创建</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/hexo-theme-next</span> <span class="string">themes/next</span> <span class="comment">#从 Github 上拉取 next 主题</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 最后在根目录安装站点需要的依赖 </span></span><br><span class="line"><span class="attr">script:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># 生成静态文件</span></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 根据个人情况，这里会有所不同</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span> <span class="comment"># 构建完成后不清除</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">git</span> <span class="comment"># 默认使用 git</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GH_TOKEN</span> <span class="comment"># 在 Travis CI 中设置的环境变量 token</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span> <span class="comment"># 保存历史</span></span><br><span class="line">  <span class="attr">fqdn:</span> <span class="string">blog.coley48.cn</span> <span class="comment"># 自定义域名，使用 username.github.io 可删除</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># hexo 站点源文件所在的 branch</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">gh-pages</span> <span class="comment"># 存放生成站点文件的 branch，使用 username.github.io 必须是 master</span></span><br></pre></td></tr></table></figure>

<h4 id="提交项目"><a href="#提交项目" class="headerlink" title="提交项目"></a>提交项目</h4><p><code>git push</code>命令执行完成之后，稍等片刻 Travis CI 就会开始运行。<br>在 Travis CI 控制面板中，进入到自己的仓库页面中可以看到项目正在构建，显示黄色：</p>


<p>在下方<code>Job log</code>中还可以查看构建过程中的输出信息：</p>


<p>当输出<code>Done. Your build exited with 0.</code>时，表示构建成功，显示为绿色：</p>


<p>此后，Travis CI 会自动监听 GitHub 仓库提交，每次有新的代码提交，Travis CI 会自动按照<code>travis.yml</code>配置文件中的命令执行，然后将生成的代码推送到指定的分支中。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.travis-ci.com/">Travis CI 官网</a></li>
<li><a href="https://www.travis-ci.com/getting_started">Travis CI 官方文档</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">持续集成服务 Travis CI 教程</a></li>
<li><a href="https://dunwu.github.io/tools/travis-ci%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B.html">Travis CI 极简教程</a></li>
<li><a href="https://www.itrhx.com/2018/08/15/A02-hexo-blog/">使用 Github Pages 和 Hexo 搭建自己的独立博客</a></li>
<li><a href="https://segmentfault.com/a/1190000017909815?utm_source=sf-similar-article">Travis CI + github + hexo 自动化部署</a></li>
<li><a href="https://segmentfault.com/a/1190000021987832">Travis CI 加 Hexo 实现自动构建部署 Github Pages 博客</a></li>
<li><a href="https://developer.aliyun.com/article/569237">使用Travis CI自动部署Hexo博客</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Travis-CI</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack-学习笔记</title>
    <url>/2021/07/28/Webpack-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="webpack-学习笔记"><a href="#webpack-学习笔记" class="headerlink" title="webpack 学习笔记"></a>webpack 学习笔记</h2><blockquote>
<p>At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles.<br>本质上，webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图 (dependency graph) ，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。</p>
</blockquote>
<span id="more"></span>

<h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>webpack 是基于 nodejs 的，因此 webpack 项目也是一个 node 项目，直接使用 npm 来初始化项目；对于大多数项目，建议本地安装，便于后期分项目升级；</p>
<ol>
<li>使用<code>npm init</code>命令初始化项目文件夹，创建<code>package.json</code>文件；</li>
<li>安装 webpack 和 webpack-cli 开发依赖；</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm init -y</span><br><span class="line">&gt; npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<p>以该项目为例，目录结构如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .gitignore</span><br><span class="line">├── README.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── src</span><br><span class="line">|   └── index.js</span><br><span class="line">└── dist</span><br></pre></td></tr></table></figure>

<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol>
<li>新建一个模块<code>a.js</code>，并在里面编写一个简单的打印函数；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/a.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    print,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建入口<code>index.js</code>，并引入模块<code>a.js</code>；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"></span><br><span class="line">moduleA.print(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行 <code>npx webpack</code> 开始打包，结果将被输出到根目录下 dist 文件夹中，并得到以下输出：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">asset main.js 224 bytes [compared <span class="keyword">for</span> emit] [minimized] (name: main)</span><br><span class="line">./src/index.js 83 bytes [built] [code generated]</span><br><span class="line">./src/a.js 104 bytes [built] [code generated]</span><br><span class="line"></span><br><span class="line">WARNING <span class="keyword">in</span> configuration</span><br><span class="line">The <span class="string">&#x27;mode&#x27;</span> option has not been <span class="built_in">set</span>, webpack will fallback to <span class="string">&#x27;production&#x27;</span> <span class="keyword">for</span> this value.</span><br><span class="line">Set <span class="string">&#x27;mode&#x27;</span> option to <span class="string">&#x27;development&#x27;</span> or <span class="string">&#x27;production&#x27;</span> to <span class="built_in">enable</span> defaults <span class="keyword">for</span> each environment.</span><br><span class="line">You can also <span class="built_in">set</span> it to <span class="string">&#x27;none&#x27;</span> to <span class="built_in">disable</span> any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line">webpack 5.37.1 compiled with 1 warning <span class="keyword">in</span> 201 ms</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>得到打包好的输出文件<code>dist/main.js</code>；</li>
</ol>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><strong>入口</strong>（entry）：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图（dependency graph）的开始，默认值是<code>./src/index.js</code>。</li>
<li><strong>输出</strong>（output）：告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在<code>./dist</code>文件夹中。</li>
<li><strong>加载器</strong>（loader）：让 webpack 能够去处理 js 和 json 以外的其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中。 </li>
<li><strong>插件</strong>（plugin）：让 webpack 可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量等。                           </li>
<li><strong>模式</strong>（mdoe）：通过选择<code>development</code>、<code>production</code>或<code>none</code>之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为<code>production</code>。</li>
<li><strong>目标</strong>（target）：告知 webpack 为部署目标指定一个环境。默认值为<code>browserslist</code>，如果没有找到<code>browserslist</code>的配置，则默认为<code>web</code>。      </li>
<li><strong>模块热替换</strong>（HMR - hot module replacement）：是指在应用程序运行过程中，替换、添加或删除模块，而无需重新加载整个页面。</li>
<li><strong>初始化块</strong>（initail chunk） 是入口起点的主块。此 chunk 包含为入口起点指定的所有模块及其依赖项。默认名为<code>main.js</code>。</li>
<li><strong>非初始化块</strong> （non-initial chunk）是可以延迟加载的块。可能会出现在使用 动态导入(dynamic imports) 或者 SplitChunksPlugin 时。默认情况下，这些非初始化块没有名称，因此会使用唯一 ID 来替代名称。</li>
</ul>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>webpack 可以无需使用任何配置文件。webpack 会假定项目的入口起点为<code>src/index.js</code>，然后会在<code>dist/main.js</code>输出结果，并且在生产环境开启压缩和优化。但通常我们还需要对 webpack 进行更精细化的配置，以充分发挥 webpack 的能力。</p>
<p>习惯性的将配置文件拆分为三个配置文件，并提取公共配置部分到<code>webpack.common.js</code>，然后分别将开发模式和生产模式的配置放在<code>webpack.dev.js</code>和<code>webpack.prod.js</code>中，并用<code>webpack-merge</code>合并公共部分的配置。</p>
<p>最后<code>package.json</code>中添加 webpack 的 script 启动命令，让 webpack 使用自定义的配置文件替代默认的<code>webpack.config.js</code>：</p>
<p><strong>package.json</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;script&quot; : &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;webpack --config webpack.dev.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遵循不重复原则(Don’t repeat yourself - DRY)，保留一个通用配置，将相同的公共配置放入<code>webpack.common.js</code>中：</p>
<p><strong>webpack.common.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">        print: <span class="string">&#x27;./src/print.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            include: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">            loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        &#125;, ],</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        symlinks: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        sideEffects: <span class="literal">true</span>,</span><br><span class="line">        usedExports: <span class="literal">true</span>,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">&#x27;async&#x27;</span>, <span class="comment">// 对哪些块进行优化，all | async | initial，</span></span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    priority: -<span class="number">10</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    priority: -<span class="number">20</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将开发模式的配置放入<code>webpack.dev.js</code>中：</p>
<p><strong>webpack.dev.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    merge</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(config, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        publicPath: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        port: <span class="number">8000</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            index: <span class="string">&#x27;/index.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            esModule: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            esModule: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        runtimeChunk: <span class="string">&#x27;single&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将生产模式的配置放入<code>webpack.prod.js</code>中：</p>
<p><strong>webpack.prod.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(config, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        publicPath: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">            assetNameRegExp: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            cssProcessor: <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>),</span><br><span class="line">            cssProcessorPluginOptions: &#123;</span><br><span class="line">                preset: [<span class="string">&#x27;default&#x27;</span>, &#123;</span><br><span class="line">                    discardComments: &#123;</span><br><span class="line">                        removeAll: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">            canPrint: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                sideEffects: <span class="literal">true</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            publicPath: <span class="string">&quot;../&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                sideEffects: <span class="literal">true</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            publicPath: <span class="string">&quot;../&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 webpack-cli 脚手架初始化项目，需要安装 @webpack-cli/generators 依赖；<br>根据项目需要选择相应配置；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npx webpack-cli init &lt;project&gt;</span><br></pre></td></tr></table></figure>

<h4 id="实现热重载"><a href="#实现热重载" class="headerlink" title="实现热重载"></a>实现热重载</h4><p>热重载能为开发提供极大的便利，不需要每次修改代码后手动编译，然后在浏览器中手动刷新页面来观察效果；同时每次只更新改动部分的代码，并且将编译的结果存在内存中；通过在内存中（而不是写入磁盘）编译和 serve 资源来提高性能。这里提供两种实现热重载的方式：</p>
<p><strong>webpack-dev-serve</strong><br>使用 webpack 官方提供的开发服务器实现热重载是最简便的方式，需要安装开发依赖<code>webpack-dev-serve</code>，然后只需要在<code>webpack.dev.js</code>配置文件中添加 devSever 项的配置即可；</p>
<p><strong>webpack watch + live server</strong><br>使用 webpack 的 watch 模式是一种替代方案，它会实时监听文件的变动，编辑保存后便开始编译，并将文件输出到 dist 文件夹下，然后开启 VS Code 的插件 live server 即可实现模块热替换。</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol>
<li>package.json 属性说明</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>name</code></td>
<td align="left">设置软件包的名称。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">列出软件包的作者名称。</td>
</tr>
<tr>
<td align="left"><code>contributors</code></td>
<td align="left">除作者外，该项目可以有一个或多个贡献者。 此属性是列出他们的数组。</td>
</tr>
<tr>
<td align="left"><code>bugs</code></td>
<td align="left">链接到软件包的问题跟踪器，最常用的是 GitHub 的 issues 页面。</td>
</tr>
<tr>
<td align="left"><code>homepage</code></td>
<td align="left">设置软件包的主页。</td>
</tr>
<tr>
<td align="left"><code>version</code></td>
<td align="left">指定软件包的当前版本。x.x.x 分别表示主版本号、次版本号、补丁版本号仅修复缺陷的版本是补丁版本，引入向后兼容的更改的版本是次版本，具有重大更改的是主版本。</td>
</tr>
<tr>
<td align="left"><code>license</code></td>
<td align="left">指定软件包的许可证。</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">此属性包含与软件包功能相关的关键字数组。</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">此属性包含了对软件包的简短描述。</td>
</tr>
<tr>
<td align="left"><code>repository</code></td>
<td align="left">此属性指定了此程序包仓库所在的位置。</td>
</tr>
<tr>
<td align="left"><code>main</code></td>
<td align="left">设置软件包的入口点。</td>
</tr>
<tr>
<td align="left"><code>private</code></td>
<td align="left">如果设置为 true，则可以防止应用程序/软件包被意外发布到 npm 上。</td>
</tr>
<tr>
<td align="left"><code>scripts</code></td>
<td align="left">可以定义一组可以运行的 node 脚本。</td>
</tr>
<tr>
<td align="left"><code>dependencies</code></td>
<td align="left">设置作为依赖安装的 npm 软件包的列表。</td>
</tr>
<tr>
<td align="left"><code>devDependencies</code></td>
<td align="left">设置作为开发依赖安装的 npm 软件包的列表。</td>
</tr>
<tr>
<td align="left"><code>browserslist</code></td>
<td align="left">用于告知要支持哪些浏览器（及其版本）。 Babel、Autoprefixer 和其他工具会用到它，以将所需的 polyfill 和 fallback 添加到目标浏览器。</td>
</tr>
</tbody></table>
<ol start="2">
<li>软件包版本说明符</li>
</ol>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">~</td>
<td align="left">如果写入的是 〜0.13.0，则只更新补丁版本：即 0.13.1 可以，但 0.14.0 不可以。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">如果写入的是 ^0.13.0，则要更新补丁版本和次版本：即 0.13.1、0.14.0、依此类推。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">如果写入的是 *，则表示接受所有的更新，包括主版本升级。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">接受高于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">接受等于或高于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">接受等于或低于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">接受低于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">无符号</td>
<td align="left">仅接受指定的特定版本。</td>
</tr>
<tr>
<td align="left">latest</td>
<td align="left">使用可用的最新版本。</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">使用范围组合</td>
</tr>
</tbody></table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://webpack.docschina.org/">webpack中文官方文档</a></li>
<li><a href="https://v4.webpack.js.org/">webpack v4 官网</a></li>
<li><a href="https://github.com/ronami/minipack">一个简单打包工具的详细说明</a></li>
<li><a href="https://blog.csdn.net/weixin_33936401/article/details/87963738">nodejs 中的依赖管理</a></li>
<li><a href="https://github.com/Coley48/webpack">个人webpack项目地址</a></li>
<li><a href="https://github.com/Coley48/webpack-code">个人webpack测试代码项目地址</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>写给自己</title>
    <url>/2021/06/29/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p>首先要对自己说一句：“毕业快乐！”。<br>四年大学生活已经落下帷幕，从此也踏上了新的人生征途。<br>纵观整个大学四年，我觉得自己过得很充实，也没留下什么遗憾。</p>
<span id="more"></span>

<p><strong>做个简单的总结：</strong></p>
<p>大一担任了班委，进了院上两委会，工作上比较忙，有时候饭都顾不上吃；然后参加了校上运动会，结交了很多朋友，但是学业上有些忽略了，所以前期成绩不太理想，后面开始慢慢将精力投入到学习上来，成绩有了很大的提升；</p>
<p>大二因为大一表现还不错，有幸读了党校，也因此认识了更多的优秀的同学；虽然大二没有留在两委会，但进入了学校的社团，认识了不少其他学院的同学；平时的时间大多都是在泡在图书馆里看书学习，因此大二整个学年的成绩都还不错；</p>
<p>从大三开始，积极参加了各种专业上的学科竞赛，数学建模、创新创业、计算机设计大赛、蓝桥杯等，不断积累项目经验以及获奖经历；专业的知识技能也是在大三这一年不断的通过项目的打磨提升上来的。</p>
<p>到了大四，整个第一学期，几乎都是在为老师写项目，我们也因为项目成为了很好的朋友；这个项目也是成为了我的毕业设计，然后也是找到了跟专业对口的工作，进入了新的人生阶段；</p>
<img src="/2021/06/29/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/thumbnail.png" class="">

<p>当然毕业不是终点，而是新生活、新奋斗的起点；<br>况且学无止境，我愿常怀一颗赤子之心，在知识的海洋里，乘风破浪；在学习的道路上，披荆斩棘！</p>
<p>最后愿你历尽千帆，归来仍是少年；<br>愿你在多年之后再读到这篇文章时，仍是个积极进取，不断向前的少年。加油！</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>大学</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>单车维修之补胎换胎</title>
    <url>/2021/10/08/%E5%8D%95%E8%BD%A6%E7%BB%B4%E4%BF%AE%E4%B9%8B%E8%A1%A5%E8%83%8E%E6%8D%A2%E8%83%8E/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间，我的车前轮胎瘪了，又刚好那段时间连着下了好长一段时间的雨，我也就很长时间没有管。后边考虑了一下，觉得自己换轮胎要方便些，于是就在网上买了轮胎和一些工具，然后照着网上的视频开始自己换轮胎。</p>
<p>其实说来惭愧，骑了这么多年的车，都没有自己换过轮胎，这里记录一下换轮胎时需要注意的一些细节。</p>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>卸外胎：可以借助撬胎棒等工具把外胎掰开，然后顺着口子把整个外胎弄到钢圈外，因为公路车轮胎比较细，所以卸的时候会相对难一些；</li>
<li>检查外胎：卸下外胎后需要用手检查外胎内壁中是否有刺或其他异物，避免装上内胎后再次将内胎砸破；</li>
<li>补内胎：取出内胎，先用气枪加点气，然后放在耳垂旁感受气流，找到出气口；用锉刀把出气口周末打磨粗糙，再贴上补胎片，之后反复挤压搓几下使结合紧密；</li>
<li>上内胎：先往补好的内胎或者新内胎打少量的气定型，避免上内胎的时候与外胎挤压发生褶皱导致内胎破裂；然后把气嘴插入钢圈上对应的孔位，再依次将内胎放入外胎中；</li>
<li>装外胎：将内胎尽量放在内胎和钢圈中间的位置，然后将外胎在刚圈外的一侧依次摁入钢圈中；</li>
<li>打气：然后开始向轮胎中打气，轮胎的压强范围一般都在外胎上有标注，通常打到用手指掐不动的时候就差不多了；</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>为避免伤及外胎和内胎，在装胎过程中：</p>
<ol>
<li>严禁使用螺丝刀或其它锋利的工具；</li>
<li>严禁充气过饱；</li>
<li>定期检查，保持正常胎压；</li>
</ol>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>单车</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧汇总</title>
    <url>/2022/05/10/%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章主要是记录 HTML 部分可用于实际开发中的小技巧，部分章节是翻译整理而来，所有章节后都附有原文地址或者其他参考资料，本文将持续更新；</p>
<span id="more"></span>

<h3 id="添加键盘快捷键"><a href="#添加键盘快捷键" class="headerlink" title="添加键盘快捷键"></a>添加键盘快捷键</h3><p>通过使用 <code>accesskey</code> 特性，我们可以为用户激活或聚焦在一个元素上赋予一个快捷键。这个特性的值必须是一个单独的字符。</p>
<p>值得注意的是每个浏览器提供了不同的组合键来触发快捷方式。</p>
<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="left">macOS</th>
<th align="left">Windows</th>
<th align="left">Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Chrome</td>
<td align="left"><code>alt</code> + <code>ctrl</code> + key</td>
<td align="left"><code>alt</code> + key</td>
<td align="left"><code>alt</code> + key</td>
</tr>
<tr>
<td align="left">Firefox</td>
<td align="left"><code>alt</code> + <code>ctrl</code> + key</td>
<td align="left"><code>alt</code> + <code>shift</code> + key</td>
<td align="left"><code>alt</code> + <code>shift</code> + key</td>
</tr>
<tr>
<td align="left">Safari</td>
<td align="left"><code>alt</code> + <code>ctrl</code> + key</td>
<td align="left">n/a</td>
<td align="left">n/a</td>
</tr>
</tbody></table>
<p>在下面的示例代码中，在 macOS Chrome 中按下组合键  <code>alt</code> + <code>ctrl</code> + <code>e</code> 会触发按钮的 <code>click</code> 事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">accesskey</span>=<span class="string">&quot;e&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Edit&#x27;)&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://getfrontend.tips/add-keyboard-shortcuts/">原文：Add keyboard shortcuts</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>小白装机指南</title>
    <url>/2021/12/10/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>老早之前就打算换台电脑了，刚开始的时候看的都是整机，但是对于这些各种各样的参数配置我是不太了解的（说实话我对台式硬件部分了解不多）；然后就在网上找了一些讲电脑配置的视频看，然后就了解到DIY装机，因为我本身也是一个喜欢动手的人；然后就决定自己选配置，自己组装电脑；</p>
<p>经过这次更新电脑，我也算是恶补了很多电脑相关的硬件知识了。这里就整理一下整个装机的过程。</p>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>准备工作主要就是挑选配置，先罗列一下我的清单，方便抄作业的同学；</p>
<table>
<thead>
<tr>
<th align="left">组件</th>
<th align="left">类型</th>
<th align="left">单价</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CPU + 主板</td>
<td align="left">i7 11700 + 微星 B560M 迫击炮 WiFi版</td>
<td align="left">2869</td>
</tr>
<tr>
<td align="left">机箱</td>
<td align="left">爱国者 YOGO M2白</td>
<td align="left">163</td>
</tr>
<tr>
<td align="left">固态</td>
<td align="left">西数 SN550 1T</td>
<td align="left">620</td>
</tr>
<tr>
<td align="left">电源</td>
<td align="left">鑫谷 750W 金牌全模组 GP850G</td>
<td align="left">437</td>
</tr>
<tr>
<td align="left">显示器</td>
<td align="left">HKC V271M IPS 27英寸</td>
<td align="left">849</td>
</tr>
<tr>
<td align="left">键盘</td>
<td align="left">艾石头 84键RGB 红轴</td>
<td align="left">199</td>
</tr>
<tr>
<td align="left">内存条</td>
<td align="left">金士顿 FURY DDR4 3600</td>
<td align="left">658</td>
</tr>
<tr>
<td align="left">鼠标</td>
<td align="left">罗技 G102 RGB 白</td>
<td align="left">105</td>
</tr>
<tr>
<td align="left">扇热</td>
<td align="left">酷冷至尊 冰神B240 ARGB水冷</td>
<td align="left">399</td>
</tr>
<tr>
<td align="left">总计</td>
<td align="left"></td>
<td align="left">6299</td>
</tr>
</tbody></table>
<p>刚开始的时候，我也不懂这样那样的配置，所以就去B站上找了很多视频来看；然后在京东上一件一件的挑，不仅要看性能，还要看颜值。然后所有配置挑选出来之后，再慢慢筛，哪些地方可以优化的，哪些配置之间是有冲突的，然后再做一些调整；</p>
<h3 id="组装机器"><a href="#组装机器" class="headerlink" title="组装机器"></a>组装机器</h3><p>拿到所有配件，然后迫不及待就开始组装，经过一番研究，自己总结一下组装的顺序：</p>
<h4 id="CPU-主板"><a href="#CPU-主板" class="headerlink" title="CPU + 主板"></a>CPU + 主板</h4><ol>
<li>先打开主板上的盖子，注意千万不要触碰主板上的针脚❗；</li>
<li>然后辨别一下主板上和 CPU 边缘的卡槽位置，轻轻放上去；</li>
<li>用手指按住 CPU 上下左右移动一下，会发现主板和 CPU 之间稍微有一些间隙；</li>
<li>盖上主板的盖子，完成安装，AMD 和 Intel 的主板稍微有一点不同；</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/244970307">intel第11代i7-11700F装机配置推荐，11700F/11700搭配主板推荐，11700F搭配显卡推荐</a></li>
</ul>
<h4 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h4><p>在选择内存条的时候，要注意 CPU、主板和内存条的频率要一致，否则按照三者最低频率；当然这里不考虑超频的情况；</p>
<p>其次要注意主板支持的内存条类型，可以根据内存条上的豁口判断，我买的是 DDR4 的；</p>
<p>然后要注意，现在的主板大多支持双通道的内存，所以预计自己需要多大的内存，分成两根内存条，效果会比一根的要好；</p>
<ol>
<li>找到主板上内存条插槽，通常主板上有 2 个或者 4 个，有些主板甚至有 8 个；</li>
<li>然后打开插槽上两端的卡扣，对应内存条上的豁口，用力按下，直到卡口自动收起；</li>
<li>有些主板是单边卡口，安装差不多；</li>
</ol>
<ul>
<li><a href="https://www.sohu.com/a/472903735_121068095">电脑内存条频率取决于CPU还是主板？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/269392989">台式机 | 如何正确选购内存条</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/63604430">内存条怎么选？——从入门到精通</a></li>
</ul>
<h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>硬盘主要分两种，固态硬盘 SSD 以及 机械硬盘 HDD；现在市面上硬盘的接口主要以 SATA、mSATA、M.2 以及 PCI-E为主，我这里买的是 M.2 接口的固态硬盘；</p>
<p>B560M 上有两处 M.2 安装位置，一处位于中部散热片下方，再往下是另一处，建议优先安装散热片下的槽位；</p>
<ol>
<li>先要拆下散热片；</li>
<li>注意防呆插槽的位置，通常硬盘上有字的一面向上；</li>
<li>倾斜角度 30° 插入卡槽；</li>
<li>散热片背面一般会有贴纸，撕开后盖在硬盘上；</li>
<li>拧紧螺丝就完成了；</li>
</ol>
<h4 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h4><p>散热器一般分为风冷和水冷两种，风冷虽然性能上略低，但相对便宜；而水冷散热性能好，但是相对贵一些，还有就是会有水冷会有漏液的风险，所以要买好一点的水冷；</p>
<p>有些 CPU 是自带了一个原装散热的，我这款 11700 也是；为了方便后面做点亮测试，我就没有直接装上我自己买的水冷；</p>
<ol>
<li>在安装好 CPU 的基础上，进行以下操作；</li>
<li>在 CPU 表面涂一层硅脂，但是很多原装散热上有预涂的硅脂；</li>
<li>然后对准主板上 CPU 周围的四个孔位盖上散热；</li>
<li>固定散热，不同散热的连接方式有些不同，具体操作可以参看说明书；</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/258379061">2021年12月电脑cpu散热器选购指南</a></li>
</ul>
<h4 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h4><p>电源这块的话，如果有极限超频的需求建议在上面的推荐基础上选择高100W~200W的电源，当然不超频也可以买比我推荐功率更大的电源，也留下后续配置升级的空间。</p>
<p>电源有多种认证标志，从白牌到钛金；通常选择铜牌以上就可以了；等级越高转换效率越高也就越省电，但是和电源的品质不是正相关的，一般来说金牌以上的电源绝大部分质量都不错。</p>
<p>然后根据电源的线是否可拆卸可分为：全模组、半模组和非模组；其中全模组电源上的线均可拆卸；半模组电源的主板供电线和 CPU 供电线不能拆卸，其他可拆；非模组电源的线是不可拆卸的，所以装机的时候会有很多线是多余的，走线会比较难。</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/179066013">2021年12月电脑电源选择指南与推荐</a></li>
</ul>
<h4 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h4><p>注意机箱支持的主板规格：ATX、MATX、ITX；然后是显卡长度限制，风扇位个数，电池规格，硬盘位等；</p>
<p>当时我这款散热和主板就有点冲突，尝试拆了主板最上面的散热也不行，最后在水冷风扇上取了两个固定螺柱才装上去，捣鼓了好半天；</p>
<p>在正式装机之前，一般要做一个短接测试；</p>
<ol>
<li>将主板、CPU、内存条、固态、散热安装好；</li>
<li>用 8pin（CPU供电线） 和 24pin（主板供电线） 的线将主板和电源连接；</li>
<li>用数据线连接显示器，可以方便看到是否有图像输出；</li>
<li>将电源通电，使用螺丝刀轻触 power+ 和 power- 针脚，通常在主板右下方；</li>
<li>短接后，看到风扇转动，表示短接开机成功；</li>
<li>然后有些主板上有自检灯，当第二个黄灯一直亮起时说明内存条没有插好；</li>
<li>断电后❗，将内存条重新插好，再次短接开机；</li>
<li>看到亮起了白灯，自检通过；</li>
<li>同时屏幕上可以看到，顺利进入到 BIOS 界面；</li>
<li>至此短接测试就通过了，就可以正式装机了；</li>
</ol>
<p>大致的装机步骤：</p>
<ol>
<li> 在机箱上预埋主板螺柱，不同主板的孔位是有差异的，所以要根据主板来；</li>
<li> 然后把主板平行放入机箱中，一次拧上螺丝；</li>
<li> 安装散热，</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/337206779">2021年12月电脑机箱推荐</a></li>
</ul>
<h4 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h4><p>外设就是鼠标、键盘、显示器、音响等输入输出设备；这部分直接按着主板上的接口插就可以了；至此，硬件部分的安装就完成了；</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>主机组装完成之后就是</p>
<ul>
<li><a href="https://www.wepe.com.cn/">微PE官网</a></li>
<li><a href="https://blog.csdn.net/weixin_42256332/article/details/106933772">解决微PE不支持移动硬盘NTFS的UEFI启动</a></li>
</ul>
<h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/54529443">系统安装好后，怎么用最正规的方法安装驱动</a></li>
<li><a href="https://www.bilibili.com/video/BV12t4y1S7Uw">微星主板如何正确安装主板驱动和声卡驱动</a></li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/43011827">小白的初次DIY装机攻略</a></li>
<li><a href="https://www.163.com/dy/article/GE64K4040512MJDN.html">遇事不决？迫击炮！微星B560M迫击炮评测</a></li>
<li><a href="https://new.qq.com/omn/20210428/20210428A0A9TE00.html">微星MAG B560M MORTAR主板评测：主流配置再升级</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/349293186">热门Z590主板推荐。Z590主板CPU搭配建议。支持PCIE4.0。包含ATX,M-ATX,ITX版型。</a></li>
<li><a href="https://cn.msi.com/">微星中国官网</a></li>
<li><a href="https://cn.msi.com/Motherboard/MAG-B560M-MORTAR-WIFI/support#down-driver&Win10%2064">产品支持 MAG B560M MORTAR WIFI</a></li>
</ul>
]]></content>
      <tags>
        <tag>note</tag>
        <tag>电脑</tag>
        <tag>装机</tag>
      </tags>
  </entry>
  <entry>
    <title>总结@21-09</title>
    <url>/2021/10/02/%E6%80%BB%E7%BB%93-21-09/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>自意见实施以来已有1个月时间，从各方面来看，效果还是很明显的；总的来说，相较于9月之前，我已经在各个方面有了很大的进步，但我还有很多地方需要继续完善。</p>
<p>这里总结下自己这一个月以来在各方面的变化，以及接下来下一个月的大致规划：</p>
<span id="more"></span>

<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>整个9月可以说是工作以来最忙的一个月，QT组日常加班到9点，然后连续两个周六加班到了12点半，之后中秋前一天晚上又通知周日要去公司加班，当时的自己确实有点遭不住了，因为头两天家里停水了，连续两天晚上没洗成澡，就是加班完回去发现没法洗澡，心里头有点崩溃，说实话当时已经做好了离职的打算；</p>
<p>然后在最后一周调回了Web组，开始接手新的项目，另个项目发版，又跟着加班到了2点半，上个月加班说实话确实多；但是往后面看，在Web组，一般只会在发版的时候加班，平时的话一般都能6点下班，这样我还能回去自己做饭，晚上还能学习会。</p>
<p>从9月开始，我也开始分担了一些前端面试新人的工作，要知道，我才进公司工作了5个月，算起来我也还是一个新人；等国庆收假回来，我打算申请带那个即将入职的新人，好开心😉。</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>在平时，由于早起的缘故，每天早上会提前1小时到公司，通常是读半小时英语，有时是新闻，有时是科比自传；然后要么练会打字，要么看会文档，捣鼓一下自己的东西；</p>
<p>在周末，如果是放两天，我除了运动，一般也会抽时间专研一下技术；但是上个月由于加班比较多，自己剩下的时间相对较少，后期应该时间会相对充足一些；</p>
<p>9月把自己的 Git 服务器搭建好了，后面会逐渐把写的项目都放到 Git 下方便管理，然后10月要把持续集成搭建好，然后开始深入学习 JS 基础部分；</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>首先是作息较之前规律了很多，绝大部分时候是晚上11点睡觉，早上7点起床；其次现在的饮食也很规律，每天三餐都按时吃了，现在也拒绝外卖零食奶茶这些，然后坚持每天吃水果；</p>
<p>然后不管加班多晚，晚上的锻炼也从没有间歇过，肚子上的肥肉也少了一些，腹肌若隐若现，我感觉再坚持一个月，应该效果就更明显了。</p>
<p>9月也是很丰富的一个月，有和同事一起打了羽毛球，聚了餐，唱了歌；但是，因为上个月加班比较多，所以组织的活动相对较少；这个月开始应该会组织更多的活动；</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在后面的日子里，我还要更加严格的要求自己，更加专注的提升自己，更加主动的挑战自己。先撂下狠话：我，绝不躺平！</p>
<p>9月关键字是<code>规律</code>；10月关键字将是<code>专业</code>；</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>总结</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>总结@21-10</title>
    <url>/2021/11/05/%E6%80%BB%E7%BB%93-21-10/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>最近事情确实有点多，导致很多计划都被推迟或者暂停了；纵观整个10月，有很多时候并没有按照自己的规划来，说到底就是找了借口，就是惰性、懒；特别是从最近天气转凉，早上有点起不来就能看出来；</p>
<span id="more"></span>

<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>从上个月开始，我就全面负责千里眼项目，因为之前项目的设计就很复杂，就导致了我开发进度较慢，通常要花较长的时间来整理代码的逻辑；而且因为之前没有怎么做过小程序的开发，因此还踩了一些坑。😔</p>
<p>项目和项目之间关系也挺复杂，小程序页面里面嵌套了webview，然后webview里面的页面是uniapp开发的移动端和H5的页面，然后又在这里面套了一个网页，开发的时候一不注意就要影响到其他地方，上线的时候也要分成三部分；每次开发都要同时开七八个窗口，感觉开发的时候到处是坑，得特别小心才行；</p>
<p>特别地，需求是要在第三层的网页跳转到第一层的微信小程序，然后调用微信支付的api，然后在开发工具里面好好的，上线之后就失效不起作用了，后面才知道这是webview的一个坑，后面经过不懈的努力才终于把支付的功能弄好了；（😣心累。。。）</p>
<p>在月底的时候，我申请了调薪，现在公司的调薪和技术评级挂钩了，虽然自己来公司也并没有多久，也没有做出多大的贡献，不过最后还是涨了一些，还是挺好的。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><strong>21-10-01</strong></p>
<p>国庆这天叫肖玉林过来吃饭，然后下午去看长津湖，结果这货这几天反胃，没吃几口就吐了，😑，然后晚上佳文又约我们去吃饭，吃了饭又在外面转了好久，聊了好多我们高中的趣闻轶事，真好。</p>
<p><strong>21-10-07</strong></p>
<p>国庆最后一天，和同事去玩了剧本杀，第七号嫌疑人，一部推理本，这还是我头一次玩剧本杀，我们六个人推了6个小时，最后把答案全都推出来了，可真有我们的。</p>
<p><strong>21-10-16</strong></p>
<p>吕叔来成都找我玩，那天在春熙路逛了一晚上，请他吃了一个韩国菜；给他买了可乐，他又不喝，最后我拿回去了，现在都还放在家里。。。</p>
<p><strong>21-10-20</strong></p>
<p>双11居然10月份就开始了，我还是没忍住换了手机，然后把原来那个在闲鱼上卖了，还行，头一次在闲鱼上卖东西，没几天就卖掉了；</p>
<p>这个月生活整体上还算规律，不过到了下旬，大部分的时间在准备调薪的面谈了，所以每天早上读英语时间就一直搁置了；然后那段时间心情可能不太好，导致每周的运动计划也逐渐淡化了；处在了放纵的边缘；</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自己能够明显感觉到，自己对自己要求有些松了，要时刻提醒自己，不要找借口，并严格要求自己。</p>
]]></content>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>总结</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>总结@21-11</title>
    <url>/2021/12/01/%E6%80%BB%E7%BB%93-21-11/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>纵观整个11月份，自己过的很乱，熬夜次数也多了，这是个很不好的变化；但是不管多晚，还是有坚持在锻炼；从下个月开始，把手头事情处理完就得<br>开始好好整了；</p>
<span id="more"></span>

<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>因为月初的时候回了趟家，不知咋的，过了一周健康码变黄了，额😐；那段时间成都的疫情反弹有点严重，然后我就申请在家办公；9点上班，早上可以睡到8点50，是真的爽；</p>
<p>不知道为啥，感觉我一直扮演的是一个奇兵的作用，一旦有什么很紧急的任务，就会落到我的头上，所以我手上的项目换了一个又一个；然后很烦的是现在什么问题都找我，后端要改个接口，财务绑不了账号，售后又有什么问题了。有几天都是这样的，一直被打断，导致我开发的速度贼慢。</p>
<p>然后另外一个要吐槽的是，本来就整不完，还非要这周就要；周六也加到了9点，结果还不是第二周才弄完，第二周用的，搞不懂那些人是怎么想的，开发不是人吗？</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><strong>21-11-05</strong></p>
<p>黄码那一周，去做了两次核算，头一次做核算，直接就是鼻拭子，棉签捅进鼻子的时候，那种火辣辣的感觉，眼泪忍都忍不住，第二次就要好一点了；第二天健康码就转绿了，但还是被要求居家隔离7天，那几天差不多都是自己在做饭；</p>
<p><strong>21-11-13</strong></p>
<p>这天周六，欧阳过生日，叫我们去唱歌，我上午去了公司一趟，下午就去KTV，玩骰子，就喝了一场酒，然后就在隔壁吃的火锅，味道还挺好的，又是一场酒，吃完饭又去了小酒馆，存粹就是玩游戏喝酒了；其实本来我吃完饭之后就有一点酒意了，但是走小酒馆的时候就醒了差不多了；所以虽然那天喝了三场酒，但我没醉；倒是欧阳这个酒仙最后给喝醉了，🤣，不过那天是真的开心。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个月呢，感觉就是工作上的事情变多了，然后有点小累吧，很多时候就不想再学习了，或者做点其他事情什么的；然后就想着玩了，后面得平衡一下工作和生活，在这之间还是得留给自己学习提升的时间和空间；</p>
]]></content>
  </entry>
  <entry>
    <title>斯人已去，举国皆哀</title>
    <url>/2021/05/27/%E6%96%AF%E4%BA%BA%E5%B7%B2%E5%8E%BB%EF%BC%8C%E4%B8%BE%E5%9B%BD%E7%9A%86%E5%93%80/</url>
    <content><![CDATA[<blockquote>
<p>我一直有两个梦想，一个是 禾下乘凉梦，一个是杂交水稻覆盖世界梦。————袁隆平</p>
</blockquote>
<img src="/2021/05/27/%E6%96%AF%E4%BA%BA%E5%B7%B2%E5%8E%BB%EF%BC%8C%E4%B8%BE%E5%9B%BD%E7%9A%86%E5%93%80/dream.jpg" class="">

<span id="more"></span>

<p>2021年5月22日是每个中国人都应该铭记的日子，“杂交水稻之父”，中国工程院院士，“共和国勋章”获得者袁隆平爷爷永远的离开了我们。<br>先是从外公口中得知了这个消息，后面有人出来辟谣，但随后新闻报道证实，袁老因为多器官功能衰竭，在长沙逝世。得知这个噩耗，一时还真有点难以接受。</p>
<p>对此，我深有感触，因为这天上午刚刚在田里帮忙插秧，仅仅一个上午的时间，我就全身肌肉酸痛，所以我也早就明白了为什么粒粒皆辛苦，为什么纸上学来终觉浅，绝知此事要躬行！<br>晚上躺在床上，久久不能入睡，打开微博，全是袁老的话题。“袁老病危时仍挂念田里的稻子”，“长沙市民鸣笛送别袁老”，“市民雨中送别”……泪水止不住的往出涌。我也是一个感性的人，每每看到袁老那些感人的事迹，就会引起共鸣，立马泪目。</p>
<p>虽然文字是最苍白无力的，况且自己的文笔不好，但终究还是想写点什么。谨以此篇，献给为我们付出一生的袁老，一路走好！</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>纪念</tag>
      </tags>
  </entry>
  <entry>
    <title>我的大学</title>
    <url>/2021/08/31/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>一转眼已经毕业了2个月了，算上实习也工作了有4个月了。总的来说，自己已经逐渐适应了每天两点一线的上班生活。相较而言，工作的压力要大一些，什么事情都要自己考虑，花钱的地方也多，因此还是读书要比工作轻松；然后另一个感受是经济独立真的太爽了，从出来工作之后也没再问家里要过钱，虽然之前实习挣的少，还要交房租，但还是勉强撑过来了，之后的日子也会逐渐步入正轨，越来越好！</p>
<p>由于自己没有写日记的习惯，因此大学经历过的很多有趣好玩的事情并没记录下来，就打算写一篇文章，大概记录一下自己觉得好玩、有意义的事情，也算是自己的一篇大学的自传！有些时间点不准确，只是大概的参考日期。</p>
<span id="more"></span>

<h3 id="大一篇"><a href="#大一篇" class="headerlink" title="大一篇"></a>大一篇</h3><p><strong>2017-09-06</strong><br>大一，刚进入大学，便是为期一周的寝室内务 + 半个多月的军训，完全刷新了我对咱们学校的认知😱；不过比较好的一点是我们学校有一个传统是大二同专业的学长会带着大一新生搞内务；</p>
<p>这是我总结的内务操作指南：</p>
<ul>
<li>缝床单：要用针线把床单沿着席子的边缝在一起，这样看起来床单才整齐；</li>
<li>包棕垫：要用牛皮纸将棕垫包起来，用透明胶粘好，避免掉棕毛；</li>
<li>砂铁锈：要用砂纸将床上的铁锈擦掉，然后涂上指甲油防锈；</li>
<li>擦地板：要用洗衣粉把地面刷过之后，再拿帕子擦干净；</li>
<li>叠军被：要把处理过的被子叠成豆腐块，但我们睡觉的时候一般都收到柜子里盖另一床被子，免得每天都叠；</li>
<li>拉军被：要用桌桌面盖在被子上，来回拉扯把被子压得平薄，4人合作拉桌腿，2人站桌斗里加重量，1人往地上的席子上抹肥皂减小摩擦；</li>
</ul>
<p>拉军被的工作量最大，都是师兄弟一起拉了几天才完成，最后我们还去了女寝（还是头一次去女生寝室😊）帮女生拉军被，当时不知道有多少张桌子腿被拉断了。</p>
<p>军训期间我的社死瞬间：刚开始军训，无知的把军训服里的腰带当作皮带用了，然后教官讲了正确的使用方式，可是该死的裤子太大了，我只能把裤子提得尽量高一点，然后把腰带扎紧一点，这样裤子也被扎住了；可惜我还是年轻了，结束了上午的军训，刚好到饭点，高年级的也下课了，我转过主教楼，迎面走来几个师姐，好巧不巧的就在这个时候，我裤子哗的一下掉了下来，我🙃…..，也没敢看她们，就一把抓住了裤子，绕开从边上跑了，还隐隐听到了她们在笑，我去之后我就把裤子裁了。</p>
<p>还有一次，早上睡得正香的时候，被室长的叫声给吵醒了，本来还以为是军训集合了；给我们说了半天，但是不知道是他语速太快还是我们都还没清醒过来，都没听懂他在说啥，后面才知道他说老鼠爬到他床上了，还被他摸了🤨，然后看了看时间才4点过，都没当回事，接着又睡下了；</p>
<p><strong>2017-09-15</strong><br>军训期间，我也认识了我大学中的第一位贵人，我们的班助（班主任助理），也是我的老大——婷哥；</p>
<p><strong>2017-10-08</strong><br>国庆之后，班会上我竞选班长，落选了，当了劳生委员；后来我跟着婷哥进了两委会监察部，她是部长，我是干事。<br>按院上两委会的传统，每届都会有一个新干事见面大会，每个部门都会出一个节目，当时在一起排练的场景我还依稀记得；后面居然还是在新传演播大厅举行的！</p>
<p><strong>2017-10-18</strong><br>我在大学过的第一个生日是我们监察部的小伙伴陪我过的，真的很惊喜！<br>那天真的是出奇的忙，中午饭晚饭都没顾上吃，就中午忙完回了寝室吃了两口面包，还拉肚子了……<br>然后那天也是我们高中校庆，我还穿了一天高中校服。✌</p>
<p><strong>2017-11-01</strong><br>自己攒钱买了自行车，为此吃了半个月的土，谁能想象我半个月只用了80块；<br>从此我都生活中多了一个伙伴，没事的时候就喜欢骑车到处跑，所以南充的路，我也比较熟。</p>
<p><strong>2017-12-29</strong><br>后来遇到了我的初恋，那是快放寒假假的时候了；</p>
<p>寒假在家拿了驾照，之前科三挂了，然后还干了些啥都忘干净了。</p>
<p><strong>2018-04-01</strong><br>第二学期开学没多久，学校的运动会就来了；我也参加了院上的集训队，带我们训练的教练都是体育学院的高年级学长；只要不下雨，每天都会训练，包括周末；大概持续了大半个月的样子，反正每天都是腰酸背痛的，在训练的日子里，虽然训练的时候很累，但是过的真的很充实，还认识了很多朋友，大家都是一起训练的同学们，可能是因为一起吃过苦，所以革命友谊都很深厚！</p>
<p>有一次在我们训练的时候，院上新闻中心的干事来给我们拍照写新闻稿子。好巧不巧，当时在做一个一边扭腰一边横移的热身运动，专业名称叫啥我也不知道；然后我就被抓拍到了……🙄，然后就有了下面这张图，为啥刚好只有我一个人，为啥我当时要那么认真？</p>
<img src="/2021/08/31/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/exercise.png" class="">

<p><strong>2018-04-21</strong><br>因为我的优势是耐力好，所以我报的项目是5000米，后面进行专项训练的时候，差不多每天会跑15、6圈左右，最高纪录是训练一天一共跑了7000多米，没记错的话；正式比赛的时候，还是有点紧张，感觉还是没有发挥好，最后小组第3名，总成绩第10名，运动会也就告一段落了。</p>
<p>我还是像之前一样，一边学一边玩，不过数学课程已经听不懂了，是真心难😐；期中之后，突然意识到，这样下去不行，怕是毕业后工作都不好找，危机感油然而生；从此以后开始好好学习，课后都是追着老师问问题，有高中时候那味儿了。😕</p>
<p>然后大一还有一件让我记忆深刻的事情，有一天中午在寝室睡午觉，睡着睡着我给哭醒了；</p>
<p><strong>2018-07-09</strong><br>剩下半个学期也很快过去，临时通知要和大二的一起搬寝室到新区，折腾了两天总算搬完了；<br>然后我就踏上了回家的路途，但是和往常不同的是，这次放暑假，我选择骑自行车回家；都是瞒着家里的，他们这时候还不知道我自己买了自行车；😁</p>
<p><strong>2018-07-11</strong><br>大部分行李提前寄回家了，只背了一个书包，头一天上午全是在山里绕来绕去，有的坡是陡得没法，只能下来把车推上去；整个上午骑了刚好有100公里，已经一点钟了，找了个管子吃了饭，在路边休息了一会又出发了，下午骑了有60多公里，六点刚好到了绵阳三台，随便找了个宾馆住了一晚，花了我100块……（好贵，我回家车费也才100块不到😭）</p>
<p><strong>2018-07-12</strong><br>第二天早上有点下雨，我等到10点雨停了才出发；第二天明显比第一天累多了，不过路况要好得多，大多时候是走的省道；当然也有走机耕道的时候，特别是下午跟着导航走到了一处低洼处，这里的路已经被水淹没，还好我当时没打算涉险淌过去，我折回去，凭着感觉继续往另一边的大路上走，后面好长一段前不着村后不着店，水也喝完了，后面终于又导航到了一条新的路上；所以能够发现最后轨迹图上有一个很明显的弧形；</p>
<p>18年暑假那段时间刚好在下暴雨，不过那两天还好都没怎么下雨，我才能按计划顺利到家；在路上就能够看到路边的河道里全是洪水，岸边的玉米，一些房子有一半都泡在了水里；不过总的来说，这是一段非常棒、非常 nice 的体验！😃</p>
<p>也是因为连续下大雨的缘故，奶奶在家不小心摔了，把手腕整骨折了，然后住进了镇上的医院。刚好这天我骑车到家这边，所以我直接骑车去了医院。这时候亲戚都在，见到我，都吃了一惊，问我这问我那的，然后就跟我说下不为例。</p>
<p>暑假前面一段时间主要是经常来医院照顾奶奶，好在也没什么大碍，没多久就出院在家休养了，只是偶尔会去医院换个药。暑假剩余时间我也忘了干了些啥，大一就这样过去了。</p>
<h3 id="大二篇"><a href="#大二篇" class="headerlink" title="大二篇"></a>大二篇</h3><p><strong>18-09-01</strong><br>是不是这天开的学，我也记不清了。开学一段时间还是挺忙的，然后被通知可以去读党校的我还是很惊喜的，因为经过上学期后半段的努力，成绩有了很大的进步，然后又因为担任劳生委员确实很辛苦。</p>
<p>党校是在这年中秋之后开始的，然后就是每天中午一点到教室开始背书，三天一小考五天一大考，这些都算做平时成绩。除了每天中午会固定的背书之外，我早上一般会起的早一些，然后会在教室过道里背一会书，差不多要到早上第一节课开始之前。</p>
<p><strong>18-10-25</strong><br>这一天是我们积极分子的奉献日，奉献日有不同的活动，这跟不同的学院也有关系。之前几期党校的同学有去打扫烈士陵园的、有去植树的，我们那次是去老区教室办的宣传党的19大的黑板报，我其实最想做的还是植树，我觉得这对我来说会更有意义一点，毕竟还没有去植过树。</p>
<p><strong>18-10-28</strong><br>这天是学校组织去参观红色景点的社会实践，我去的是广安武胜，然后参观了乡村振兴橙子种植基地，观看了当地传统的民俗表演，还是很有意义的一天；</p>
<p>之后的整个大二上学期我就全身心投入学习了。当时的背景是这样的，离每年12月的研究生考试越来越近，加上我们学校学习氛围一向很好，然后图书馆的位置有限且离我们校区又有一点远，这样就催生出了很多在教室复习的同学，但是教室时不时有会有人上课，就得不断地换教室，所以很多人干脆直接买了小板凳小桌子摆在教学楼的过道上用来学习。</p>
<p>于是我也买了一个小板凳，开始每天早上准时6点起床，7点到教学楼与15级的师兄师姐为伴，一起背书；也是受了当时都党校时候的影响，那时候是背的党校考试的复习资料，后面党校结束后，开始看一些专业书，一直到期末。</p>
<p><strong>18-12-20</strong><br>研究生考试前夕，我还做了一些我觉得很有意义的事情，那天下午，我发动整个过道的师兄师姐一起来合张影，大家都是朝夕相处的战友，虽然可能都不认识彼此；照片中的大部分我也不认识，最后反正我认识的几个师姐都上了岸。然后晚上从图书馆回来的时候，拿着提前买的两袋大白兔奶糖，在教学楼里见人就发，然后对师兄师姐说了鼓励的话，祝他们考个好成绩！</p>
<p>临近期末，同学们都在紧张的复习准备期末考试，我也是在这个时候摸索找到了适合自己的复习方法：我会把目录撕下，然后跟着目录依次复习，然后把自己觉得重要的或者不太容易记住的知识点写在目录对应的章节处，课本过完一遍之后再做题，等到了考试前，就直接拿出目录看重点，也不用再拿书翻来翻去，因为重点都在目录上了；而且这样整个知识脉络也特别清晰。</p>
<p>因为课程比较多，然后有时候考试是上午一门下午一门，然后隔两天又是两门，复习的时间都不太够，整个学期没记错的话有13门课，包括公共课；不过我考的还是可以😁；</p>
<p>寒假干了什么早忘了，反正也没去哪玩，据我推测，大概率是在家躺尸了，偶尔去城里找同学上网……</p>
<p>然后就到了大二下学期，课程还是一如既往的多，因为之前机缘巧合之下当了手工协会的手工部部长；就要去参加我们协会举办的教学活动，一般教一些折花，穿珠子，中国结这些；中国结是我的最爱，然后我身边的朋友，我比较喜欢的老师我都送了个遍；</p>
<p>但平时大部分时间我都泡在图书馆，看书学习；因为当时课程多，作业也很多；周末的时候也在图书馆，以至于到期末的那段时间，我都感觉我眼睛经常是很干，很难受，有点用眼过度了；</p>
<p>运动会之前我认识了我另一个好哥们——蒲长松，那天正好是他生日，我去外面买了水果，回去的路上看到有一群外国人在过生日，我犹豫了一会，鼓起勇气走过去用蹩脚英语问了是谁的生日，然后我就送了他一个苹果，并祝他生日快乐！然后他叫我留下一起吃了蛋糕，从此多了一个好朋友；后来才知道，他是我们学校的研究生，那些外国人是他的学生们，他兼职教留学生汉语；</p>
<p><strong>19-04-21</strong><br>对，我大二也参加了运动会，也是报的5000，但是因为平时课比较多，我就没怎么经常去参加院上的集训；偶尔自己在操场练练；运动会那天下了好大的雨，淋着雨跑12圈半可真要命，不过成绩和去年相差不大，可累死我了😵，当时蒲长松还有他的几个学生也过来看了我的比赛，给我加油，完了还去了他家吃饭，他就租住在我们学校外面的小区里，不过后面他就搬走了，他毕业后去了另个高校教汉语；</p>
<p><strong>19-05-01</strong><br>我清楚的记得劳动节的时候是放的4天假，为啥呢，因为那四天我都在写入党材料；思想汇报，考察登记表，以及各种会议记录等等；</p>
<p><strong>19-05-07</strong><br>这一天，我光荣的加入了中国共产党，成为了一名预备党员；</p>
<p>纵观整个大二是我整个大学最刻苦，也是最忙的一年，两次一等奖学金和学年的国家励志奖学金就是最好的证明；</p>
<p>暑假，我申请了留校，打算多看些书；蒲长松也毕业了，然后他暑假去川师岗前培训；我们约好在成都碰头然后一起回南充；当时还和他的一个朋友一起看了当时大火的哪吒；然后在厕所外面明白了为啥男左女右：Men to be left because women are always right.</p>
<p><strong>19-08-06</strong><br>然后回了学校，自己学了一下python，然后把打字练了，因为自己打字特慢，而且看着打都会出错，后来练了有一月，就能盲打了，也算是这个暑假最大的收获了；</p>
<h3 id="大三篇"><a href="#大三篇" class="headerlink" title="大三篇"></a>大三篇</h3><p><strong>19-09-01</strong><br>不知不觉就到了大三，课程相对大二来说少了很多，特别是课程类型更偏向计算机了，然后我们开始更多的开始使用实训室作为我们的教室，和自习室；平时有事没事都在实训室，因此整个大三上学期除了期末那段时间去图书馆复习，其他时候都没怎么去了；</p>
<p><strong>19-09-12</strong><br>就在12开始是为期三天的全国大学生数学建模竞赛，那三天真可以用“难忘”二字形容了，数学建模竞赛是全国高校学科竞赛排行榜中第五、含金量极高的比赛；这三天的主要任务就是有一些实际生活中的难题，需要我们用数学公式表示出来，然后用程序找到一个好的解，最后写一篇论文出来；大致可以概述成建立数学模型、编程求解、论文编写三个工作；</p>
<p>当时我们只有比赛的头一天是回寝室睡的，后两天都是在实训室凑合的；但是我感觉我当时还是没有发挥好，然后我们配合也不够好，很多东西因为时间原因都没有最终体现在论文上，所以最后我们只拿了省三等奖，也算是个安慰奖吧；时至今日那段大家一起熬夜做题，吃泡面的时光依然历历在目。</p>
<p>然后数学建模也告一段落了，我也知道自己面上成绩上还比较好看，但是我自己的技术自己清楚，然后就潜下心来专研技术，但那个时候包括之前的时候都还没有一个明确的方向说我今后要干啥，我喜欢C语言，但是前两年自己摸索是啥也没做出来，就把基础学扎实了；</p>
<p>后面因为参加计算机设计大赛以及各种院上校上比赛，以及期末各科的作业，都是要求交项目，刚好大二下学期我们有个小项目组，然后把之前的项目拿来继续做了，然后不断迭代，反正在院上和校上的比赛中拿了不少奖，然后也是从这个时候接触前端的东西比较多了；</p>
<p><strong>20-01-15</strong><br>经过大三上学期的洗礼，自己的技术深入了不少，了解的东西也多了；</p>
<p>未完待续……</p>
<h3 id="大四篇"><a href="#大四篇" class="headerlink" title="大四篇"></a>大四篇</h3>]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>大学</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-学习笔记</title>
    <url>/2021/10/12/LaTeX-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="LaTeX-简介"><a href="#LaTeX-简介" class="headerlink" title="LaTeX 简介"></a>LaTeX 简介</h3><blockquote>
<p>LaTeX, which is pronounced «Lah-tech» or «Lay-tech» (to rhyme with «blech» or «Bertolt Brecht»), is a document preparation system for high-quality typesetting. It is most often used for medium-to-large technical or scientific documents but it can be used for almost any form of publishing.</p>
</blockquote>
<p>LaTeX 是一个文档准备系统 (Document Preparing System)，它非常适用于生成高印刷质量的科技类和数学类文档。它也能够生成所有其他种类的文档，小到简单的信件，大到完整的书籍。</p>
<p>上一篇文章<a href="/2021/10/10/LaTeX%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/" title="LaTeX环境搭建和配置教程">LaTeX环境搭建和配置教程</a>讲了 LaTeX 环境，本文是 LaTeX 详细用法，其内容主要归纳自《一份（不太）简短的 LaTeX 2ε 介绍》一书，文末参考连接中有该书的连接。</p>
<span id="more"></span>

<h3 id="LaTeX-基本概念"><a href="#LaTeX-基本概念" class="headerlink" title="LaTeX 基本概念"></a>LaTeX 基本概念</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>LATEX 中命令2以反斜线 \ 开头，为以下两种形式之一：</p>
<ol>
<li>反斜线和后面的一串字母，如 \LaTeX。它们以任意非字母符号（空格、数字、标点等）为界限。</li>
<li>反斜线和后面的单个非字母符号，如 $。</li>
</ol>
<p>要注意 LATEX 命令是对大小写敏感的，字母形式的 LATEX 命令忽略其后的所有连续空格。如果要人为引入空格，需要在命令后面加一对花括号阻止其忽略空格。另外也可以在命令后面紧跟一个 \␣ 命令（反斜线加空格），代表插入一个间距。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\TeX</span> ignore space.</span><br><span class="line"><span class="keyword">\TeX</span>&#123;&#125; stay space.</span><br><span class="line"><span class="keyword">\TeX</span><span class="keyword">\ </span>stay space.</span><br></pre></td></tr></table></figure>

<p>一些 LATEX 命令可以接收一些参数，参数的内容会影响命令的效果。LATEX 的参数分为可选参数和必选参数。可选参数以方括号 [] 包裹；必选参数一般以花括号 {} 包裹。还有些命令可以带一个星号 *，可以把星号看作一种特殊的可选参数。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>LATEX 中还包括环境，用以令一些效果在局部生效，或是生成特殊的文档元素。LATEX 环境的用法为一对命令 \begin 和 \end：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;⟨environment name⟩&#125;[⟨optional arguments⟩]&#123;⟨mandatory arguments⟩&#125;</span><br><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="keyword">\end</span>&#123;⟨environment name⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ⟨environment name⟩ 为环境名，\begin 和 \end 中填写的环境名应当一致。类似命令，{⟨mandatory arguments⟩} 和 [⟨optional arguments⟩] 为环境所需的必选和可选参数。LATEX 环境可能需要一个或多个必选/可选参数，也可能完全不需要参数。部分环境允许嵌套使用。</p>
<h4 id="文档类"><a href="#文档类" class="headerlink" title="文档类"></a>文档类</h4><p>LATEX 源代码以一个 \documentclass 命令作为开头，其可选参数指定了文档使用的文档类；而文档类规定了 LATEX 源代码所要生成的文档的性质——普通文章、书籍、演示文稿、个人简历等等。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[⟨options⟩]&#123;⟨class-name⟩&#125;</span><br><span class="line"><span class="comment">% 指定纸张为 A4 大小，基本字号为 11pt，双面排版</span></span><br><span class="line"><span class="keyword">\documentclass</span>[11pt,twoside,a4paper]&#123;article&#125; </span><br></pre></td></tr></table></figure>

<p>其中 ⟨class-name⟩ 为文档类的名称，如 LATEX 提供的 article | book | report（称为标准文档类），在其基础上派生的一些文档类如支持中文排版的 ctexart | ctexbook | ctexrep，或者有其它功能的一些文档类，如 moderncv | beamer 等。</p>
<p>可选参数 ⟨options⟩ 为文档类指定选项，以全局地规定一些排版的参数，如字号、纸张大小、单双面等等；更多可选参数见附录。</p>
<h4 id="宏包"><a href="#宏包" class="headerlink" title="宏包"></a>宏包</h4><p>在 \documentclass 和 \begin{document} 之间的位置称为导言区。在导言区中一般会使用 \usepackage 调用宏包，以及会进行对文档的全局设置。</p>
<p>宏包就是一些增强或补充 LATEX 功能的扩展，比如排版复杂的表格、插入图片、增加颜色甚至超链接等等。调用宏包的方法非常类似调用文档类的方法：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[⟨options⟩]&#123;⟨package-name⟩&#125;</span><br><span class="line"><span class="comment">% 一次性调用三个排版表格常用的宏包</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;tabularx, makecell, multirow&#125;</span><br></pre></td></tr></table></figure>
<p>\usepackage 可以一次性调用多个宏包，在 ⟨package-name⟩ 中用逗号隔开。这种用法一般不要指定选项；使用多个宏包时指定选项，相当于给每个宏包指定同样的选项。如果有某个宏包不能识别指定的选项，则会出错。</p>
<p>在命令行中可以通过<code>texdoc ⟨pkg-name⟩</code>命令打开宏包本地的英文文档。</p>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>当编写长篇文档时，可以将源文件分割成若干个文件，例如将每章内容单独写在一个文件中，会大大简化修改和校对的工作。LATEX 提供了命令 \include 用来在源代码里插入文件：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\include</span>&#123;⟨filename⟩&#125;</span><br><span class="line"><span class="keyword">\include</span>&#123;chapters/a.tex&#125; <span class="comment">% 相对路径</span></span><br><span class="line"><span class="keyword">\include</span>&#123;/home/Bob/file.tex&#125; <span class="comment">% Linux/macOS 绝对路径</span></span><br><span class="line"><span class="keyword">\include</span>&#123;D:/file.tex&#125; <span class="comment">% Windows 绝对路径，用正斜线</span></span><br></pre></td></tr></table></figure>

<p>⟨filename⟩ 为文件名，如果和要编译的主文件不在一个目录中，则要加上相对或绝对路径；⟨filename⟩ 可以不带扩展名，此时默认扩展名为 .tex。\include 在读入 ⟨filename⟩ 之前会另起一页，因此可以使用 \input 命令，它纯粹是把文件里的内容插入：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 插入内容，不换页</span></span><br><span class="line"><span class="keyword">\input</span>&#123;⟨filename⟩&#125;</span><br><span class="line"><span class="comment">% 限制引用的文件</span></span><br><span class="line"><span class="keyword">\includeonly</span>&#123;⟨filename1⟩,⟨filename2⟩,…&#125;</span><br></pre></td></tr></table></figure>

<p>另外 LATEX 提供了一个 \includeonly 命令来组织文件，用于导言区，指定只载入某些文件：导言区使用了 \includeonly 后，正文中不在其列表范围的 \include 命令不会起效。</p>
<blockquote>
<p>一个实用的工具宏包 syntonly。加载这个宏包后，在导言区使用 \syntaxonly 命令，可令 LATEX 编译后不生成 DVI 或者 PDF 文档，只排查错误，编译速度会快不少：</p>
</blockquote>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;syntonly&#125;</span><br><span class="line"><span class="keyword">\syntaxonly</span></span><br></pre></td></tr></table></figure>

<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li><strong>引擎</strong>：全称为排版引擎，是编译源代码并生成文档的程序，如 pdfTEX、XƎTEX 等。有时也称为编译器。</li>
<li><strong>格式</strong>：是定义了一组命令的代码集。LATEX 就是最广泛应用的一个格式，高德纳本人还编写了一个简单的 plain TEX 格式，没有定义诸如 \documentclass 和 \section 等等命令。</li>
<li><strong>编译命令</strong>：是实际调用的、结合了引擎和格式的命令。如 xelatex 命令是结合 XƎTEX 引擎和 LATEX 格式的一个编译命令。</li>
</ul>
<h3 id="LaTeX-排版文字"><a href="#LaTeX-排版文字" class="headerlink" title="LaTeX 排版文字"></a>LaTeX 排版文字</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>Unicode 是一个多国字符的集合，覆盖了几乎全球范围内的语言文字。UTF-8 是 Unicode 的一套编码方案，一个字符可以由一个到四个字节编码，其中单字节字符兼容 ASCII 编码。</p>
<p>latex 命令及 pdflatex 命令下可以使用 inputenc 宏包支持 UTF-8 编码：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br></pre></td></tr></table></figure>

<p>xelatex 和 lualatex 命令原生支持 UTF-8 编码，而且也不适用 inputenc 宏包。将 .tex 源代码保存为 UTF-8 编码，并借助 fontspec 宏包调用适当的字体，就可以在源代码中输入任意语言的文字。</p>
<h4 id="中文排版"><a href="#中文排版" class="headerlink" title="中文排版"></a>中文排版</h4><p>ctex 宏包和文档类是对 CJK 和 xeCJK 等宏包的进一步封装。ctex 文档类包括 ctexart / ctexrep / ctexbook，是对 LATEX 的三个标准文档类的封装，对 LATEX 的排版样式做了许多调整，以切合中文排版风格。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">中文<span class="keyword">\LaTeX</span>&#123;&#125;排版。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p>注：建议在使用 ctex 宏包和文档类时总是将源代码保存为 UTF-8 编码，并用 xelatex 命令编译。</p>
<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><h5 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h5><p>LATEX 源代码中，空格键和 Tab 键输入的空白字符视为“空格”。连续的若干个空白字符视为一个空格。一行开头的空格忽略不计。</p>
<p>行末的回车视为一个空格；但连续两个回车，也就是空行，会将文字分段。多个空行被视为一个空行。也可以在行末使用 \par 命令分段。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">An empty line starts a new paragraph.<span class="keyword">\par</span> 123456</span><br><span class="line"><span class="comment">% A \verb|\par| command also starts a new line.</span></span><br></pre></td></tr></table></figure>

<h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><p>以下字符在 LATEX 里有特殊用途，如 % 表示注释，$、^、_ 等用于排版数学公式，&amp; 用于排版表格，等等。直接输入这些字符得不到对应的符号，还往往会出错：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># $ &amp; &#123; &#125; _ ^ ~ \ %</span><br></pre></td></tr></table></figure>

<p>若要使用特殊字符需要在前面添加反斜杠 \，进行转义；其中 ^ 和 ~ 两个命令是需要带参数的，如果不加一对花括号（空参数），就将后面的字符作为参数，形成重音效果；而 \ 被直接定义成了手动换行的命令，输入反斜杠就只好用 \textbackslash。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\#</span> <span class="keyword">\$</span> <span class="keyword">\%</span> <span class="keyword">\&amp;</span> <span class="keyword">\&#123;</span> <span class="keyword">\&#125;</span> <span class="keyword">\_</span></span><br><span class="line"><span class="keyword">\^</span>&#123;&#125; <span class="keyword">\~</span>&#123;&#125; <span class="keyword">\textbackslash</span></span><br></pre></td></tr></table></figure>

<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>LATEX 用 % 字符作为注释。在这个字符之后直到行末，所有的字符都被忽略，行末的回车也不引入空格。</p>
<h5 id="连字"><a href="#连字" class="headerlink" title="连字"></a>连字</h5><p>西文排版中经常会出现连字（Ligatures），常见的有 ff / fi / fl / ffi / ffl。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">It&#x27;s difficult to find <span class="keyword">\ldots</span> .<span class="keyword">\\</span></span><br><span class="line">It&#x27;s dif&#123;&#125;f&#123;&#125;icult to f&#123;&#125;ind <span class="keyword">\ldots</span> .</span><br></pre></td></tr></table></figure>

<h5 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h5><p>LATEX 的单引号 ‘ ’ 用 ` 和 ‘ 输入；双引号 “ ” 用 `` 和 ‘’ 输入，虽然 “ 也能表示双引号，但没有合适的单个符号用来表示前双引号，所以不常用在正文。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">``Please press the `x&#x27; key.&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="连字号与破折号"><a href="#连字号与破折号" class="headerlink" title="连字号与破折号"></a>连字号与破折号</h5><p>LATEX 中有三种长度的“横线”可用：连字号（hyphen）、短破折号（en-dash）和长破折号（em-dash）。它们分别有不同的用途：连字号 - 用来组成复合词；短破折号 – 用来连接数字表示范围；长破折号 — 用来连接单词，与中文语境中的破折号用法类似。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">daughter-in-law, X-rated<span class="keyword">\\</span></span><br><span class="line">pages 13--67<span class="keyword">\\</span></span><br><span class="line">yes---or no?</span><br></pre></td></tr></table></figure>

<h5 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h5><p>LATEX 提供了命令 \ldots 来生成省略号，相对于直接输入三个点的方式更为合理。\ldots和 \dots 是两个等效的命令。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">one, two, three, <span class="keyword">\ldots</span> one hundred.<span class="keyword">\\</span></span><br><span class="line">A, B, C, <span class="keyword">\dots</span> Z.</span><br></pre></td></tr></table></figure>

<h5 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号"></a>波浪号</h5><p>~ 命令，它可以用来输入波浪号，但位置靠顶端（~ 命令主要用作重音，参考下一小节）。西文中较少将波浪号作为标点符号使用，通常使用中文的全角波浪号（～）。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">H<span class="keyword">\^</span>otel, na<span class="keyword">\&quot;</span><span class="keyword">\i</span> ve, <span class="keyword">\&#x27;</span>el<span class="keyword">\`</span>eve,<span class="keyword">\\</span></span><br><span class="line">sm<span class="keyword">\o</span> rrebr<span class="keyword">\o</span> d, !`Se<span class="keyword">\ </span>norita!,<span class="keyword">\\</span></span><br><span class="line">Sch<span class="keyword">\&quot;</span>onbrunner Schlo<span class="keyword">\ss</span>&#123;&#125;</span><br><span class="line">Stra<span class="keyword">\ss</span> e</span><br></pre></td></tr></table></figure>

<img src="/2021/10/12/LaTeX-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LaTeX%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E9%87%8D%E9%9F%B3%E5%92%8C%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png" class="">

<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>LATEX 定义了 \underline 命令用来为文字添加下划线；但 \underline 命令生成下划线的样式比较机械，不同的单词可能生成高低各异的下划线，并且无法换行。</p>
<p>可以使用 ulem 宏包解决了这一问题，它提供的 \uline 命令能够轻松生成自动换行的下划线：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">An <span class="keyword">\underline</span>&#123;underlined&#125; text.</span><br><span class="line"><span class="comment">% 需要 \usepackage&#123;ulem&#125;</span></span><br><span class="line">An example of <span class="keyword">\uline</span>&#123;some long and underlined words.&#125;</span><br><span class="line"></span><br><span class="line">Some <span class="keyword">\emph</span>&#123;emphasized words, including <span class="keyword">\emph</span>&#123;double-emphasized&#125; words&#125;, are shown here.</span><br></pre></td></tr></table></figure>
<p>\emph 命令用来将文字变为斜体以示强调。如果在本身已经用 \emph 命令强调的文字内部嵌套使用 \emph 命令，内部则使用直立体文字：</p>
<h4 id="断行和断页"><a href="#断行和断页" class="headerlink" title="断行和断页"></a>断行和断页</h4><p>LATEX 将文字段落在合适的位置进行断行，尽可能做到每行的宽度一致，并且单词间距匀称。文字段落和公式、图表等内容从上到下顺序排布，并在合适的位置断页，分割成匀称的页面。在绝大多数时候，我们无需自己操心断行和断页。但偶尔会遇到需要手工调整的地方。</p>
<h5 id="手动断行"><a href="#手动断行" class="headerlink" title="手动断行"></a>手动断行</h5><p>使用以下两个命令实现断行，它们有两点区别：一是 \ 可以带可选参数 ⟨length⟩，用于在换行处向下增加垂直间距，而 \newline 不带可选参数；二是 \ 也在表格、公式等地方用于分行，而 \newline 只用于文本段落中。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\\</span>[⟨length⟩]</span><br><span class="line"><span class="keyword">\\</span>[20pt] <span class="comment">% 增加 20pt 单位的垂直间距</span></span><br><span class="line"><span class="keyword">\newline</span></span><br></pre></td></tr></table></figure>

<h5 id="手动断页"><a href="#手动断页" class="headerlink" title="手动断页"></a>手动断页</h5><p>断页的命令也有两个，通常情况下两个命令都能起到另起一页的作用，但有一些区别：一是在双栏排版中 \newpage 只起到另起一栏的作用；二是涉及到浮动体的排版上行为不同。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newpage</span> </span><br><span class="line"><span class="keyword">\clearpage</span></span><br></pre></td></tr></table></figure>

<h5 id="自定义断行断页"><a href="#自定义断行断页" class="headerlink" title="自定义断行断页"></a>自定义断行断页</h5><p>可以通过以下命令告诉 LATEX 哪些地方适合断页，哪些地方不适合：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\linebreak</span>[⟨n⟩]</span><br><span class="line"><span class="keyword">\nolinebreak</span>[⟨n⟩]</span><br><span class="line"></span><br><span class="line"><span class="keyword">\pagebreak</span>[⟨n⟩]</span><br><span class="line"><span class="keyword">\nopagebreak</span>[⟨n⟩]</span><br></pre></td></tr></table></figure>

<p>以上命令都带一个可选参数，用数字 ⟨n⟩ 代表适合/不适合的程度，取值范围为 0-4，不带可选参数时，缺省为 4。比如 \linebreak[3] 意味着此处在断行时优先考虑；\nopagebreak 或\nopagebreak[4] 意味着禁止在此处断页。</p>
<p>以上命令适合给出优先考虑断行断页/禁止断行断页的位置，但不适合直接拿来断行或断页，使用 \newline 或 \newpage 等是更好的选择。因为 \newline 和 \newpage 会在断行/断页位置正确添加空白，但 \linebreak 和 \pagebreak 不能，它们的强行断行/断页会导致 LATEX 报 Underfull \hbox 等警告。</p>
<h5 id="断词"><a href="#断词" class="headerlink" title="断词"></a>断词</h5><p>如果 LATEX 遇到了很长的英文单词，仅在单词之间的位置断行无法生成宽度匀称的行时，就要考虑从单词中间断开。对于绝大部分单词，LATEX 能够找到合适的断词位置，在断开的行尾加上连字符 -。如果一些单词没能自动断词，我们可以在单词内手动使用 - 命令指定断词的位置。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a very very very long word abcdefghijklmnop<span class="keyword">\-</span>qrstuvwxyz.</span><br></pre></td></tr></table></figure>

<h3 id="LaTeX-文档元素"><a href="#LaTeX-文档元素" class="headerlink" title="LaTeX 文档元素"></a>LaTeX 文档元素</h3><p>本章了解一个结构化的文档所依赖的各种元素——章节、目录、列表、图表、交叉引用、脚注等等。</p>
<h4 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h4><p>一篇结构化的、条理清晰文档一定是层次分明的，通过不同的命令分割为章、节、小节。三个标准文档类 article、report 和 book1提供了划分章节的命令：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\chapter</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\subparagraph</span>&#123;⟨title⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中 \chapter 只在 book 和 report 文档类有定义。这些命令生成章节标题，并能够自动编号。除此之外 LATEX 还提供了 \part 命令，用来将整个文档分割为大的分块，但不影响 \chapter 或 \section 等的编号。</p>
<p>上述命令除了生成带编号的标题之外，还向目录中添加条目，并影响页眉页脚的内容。每个命令有两种变体：</p>
<ul>
<li>带可选参数的变体：\section[⟨short title⟩]{⟨title⟩} 标题使用 ⟨title⟩ 参数，在目录和页眉页脚中使用 ⟨short title⟩ 参数；</li>
<li>带星号的变体：\section*{⟨title⟩} 标题不带编号，也不生成目录项和页眉页脚。不影响较低层级的 \paragraph 和 \subparagraph 命令。</li>
</ul>
<p>带编号层级：</p>
<ul>
<li>article 文档类带编号的层级为 \section / \subsection / \subsubsection 三级；</li>
<li>report/book 文档类带编号的层级为 \chapter / \section / \subsection 三级。</li>
</ul>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>在 LATEX 中生成目录非常容易，只需在合适的地方使用命令，而正确生成目录项，一般需要编译两次源代码。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\tableofcontents</span></span><br></pre></td></tr></table></figure>

<p>这个命令会生成单独的一章（book / report）或一节（article），标题默认为 “Contents”，可<br>通过后续给出的方法定制标题。\tableofcontents 生成的章节默认不写入目录（\section*<br>或 \chapter*），可使用 tocbibind 等宏包修改设置。</p>
<p>有时我们使用了 \chapter* 或 \section* 这样不生成目录项的章节标题命令，而又想手动生成该章节的目录项，可以在标题命令后面使用：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;⟨level⟩&#125;&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;manual add title&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ⟨level⟩ 为章节层次 chapter 或 section 等，⟨title⟩ 为出现于目录项的章节标题。titletoc、tocloft 等宏包提供了具体定制目录项格式的功能，详情请参考宏包的帮助文档。</p>
<h4 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h4><p>所有标准文档类都提供了一个 \appendix 命令将正文和附录分开2，使用 \appendix 后，最高一级章节改为使用拉丁字母编号，从 A 开始。</p>
<p>book 文档类还提供了前言、正文、后记结构的划分命令：</p>
<ul>
<li>\frontmatter 前言部分，页码为小写罗马字母格式；其后的 \chapter 不编号。</li>
<li>\mainmatter 正文部分，页码为阿拉伯数字格式，从 1 开始计数；其后的章节编号正常。</li>
<li>\backmatter 后记部分，页码格式不变，继续正常计数；其后的 \chapter 不编号。</li>
</ul>
<p>以上三个命令还可和 \appendix 命令结合，生成有前言、正文、附录、后记四部分的文档。章节和目录部分再结合之前的 \include 命令和其它一些命令示意了一份完整的文档结构。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[...]&#123;book&#125;</span><br><span class="line"><span class="comment">% 导言区，加载宏包和各项设置，包括参考文献、索引等</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;makeidx&#125;</span><br><span class="line"><span class="keyword">\makeindex</span></span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\frontmatter</span></span><br><span class="line"><span class="keyword">\maketitle</span> <span class="comment">% 标题页</span></span><br><span class="line"><span class="keyword">\include</span>&#123;preface&#125; <span class="comment">% 前言章节 preface.tex</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\mainmatter</span></span><br><span class="line"><span class="keyword">\include</span>&#123;chapter1&#125; <span class="comment">% 第一章 chapter1.tex</span></span><br><span class="line"><span class="keyword">\include</span>&#123;chapter2&#125; <span class="comment">% 第二章 chapter2.tex</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">\appendix</span></span><br><span class="line"><span class="keyword">\include</span>&#123;appendixA&#125; <span class="comment">% 附录 A appendixA.tex</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">\backmatter</span></span><br><span class="line"><span class="keyword">\include</span>&#123;prologue&#125; <span class="comment">% 后记 prologue.tex</span></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;...&#125; <span class="comment">% 利用 BibTeX 工具生成参考文献</span></span><br><span class="line"><span class="keyword">\printindex</span> <span class="comment">% 利用 makeindex 工具生成索引</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h4 id="标题页"><a href="#标题页" class="headerlink" title="标题页"></a>标题页</h4><p>LATEX 支持生成简单的标题页。首先需要给定标题和作者等信息：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\title</span>&#123;⟨title⟩&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;⟨author⟩&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;⟨date⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中前两个命令是必须的（不用 \title 会报错；不用 \author 会警告），\date 命令可选。LATEX 还提供了一个 \today 命令自动生成当前日期，\date 默认使用 \today。在 \title、\author 等命令内可以使用 \thanks 命令生成标题页的脚注，用 \and 隔开多个人名。</p>
<p>在信息给定后，就可以使用 \maketitle 命令生成一个简单的标题页了。下面的代码给出了一个标题页的示例。article 文档类的标题默认不单独成页，而 report 和 book 默认单独成页。可在 \documentclass 命令调用文档类时指定 titlepage / notitlepage 选项以修改默认的行为。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\title</span>&#123;Test title&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123; Mary<span class="keyword">\thanks</span>&#123;E-mail:*****@***.com&#125;</span><br><span class="line"><span class="keyword">\and</span> Ted<span class="keyword">\thanks</span>&#123;Corresponding author&#125;</span><br><span class="line"><span class="keyword">\and</span> Louis&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 在文档中</span></span><br><span class="line"><span class="keyword">\maketitle</span></span><br></pre></td></tr></table></figure>

<p>LATEX 标准类还提供了一个简单的 titlepage 环境，生成不带页眉页脚的一页。用户可以在这个环境中使用各种排版元素自由发挥，生成自定义的标题页以替代 \maketitle 命令。甚至可以利用 titlepage 环境重新定义 \maketitle：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\maketitle</span>&#125;&#123;<span class="keyword">\begin</span>&#123;titlepage&#125;</span><br><span class="line">... <span class="comment">% 用户自定义命令</span></span><br><span class="line"><span class="keyword">\end</span>&#123;titlepage&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，为标准文档类指定了 titlepage 选项以后，使用 \maketitle 命令生成的标题页就是一个 titlepage 环境。</p>
<p>以上是 LATEX 标准文档类的标题页相关命令用法。在各种文档模板中经常有自定义的标题页，有可能需要除了 \title 和 \author 以外的命令给定信息，用法也可能与标准文档类的不一致（甚至有些模板可能没有定义 titlepage 等环境）。使用文档模板前一定要仔细阅读文档模板的帮助文档。</p>
<h4 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h4><p>交叉引用是 LATEX 强大的自动排版功能的体现之一。在能够被交叉引用的地方，如章节、公式、图表、定理等位置使用 \label 命令：为了生成正确的交叉引用，一般也需要多次编译源代码。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\label</span>&#123;⟨label-name⟩&#125;</span><br></pre></td></tr></table></figure>

<p>之后可以在别处使用 \ref 或 \pageref 命令，分别生成交叉引用的编号和页码：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\ref</span>&#123;⟨label-name⟩&#125;</span><br><span class="line"><span class="keyword">\pageref</span>&#123;⟨label-name⟩&#125;</span><br></pre></td></tr></table></figure>

<p>\label 命令可用于记录各种类型的交叉引用，使用位置分别为：</p>
<ul>
<li>章节标题 在章节标题命令 \section 等之后紧接着使用。</li>
<li>行间公式 单行公式在公式内任意位置使用；多行公式在每一行公式的任意位置使用。</li>
<li>有序列表 在 enumerate 环境的每个 \item 命令之后、下一个 \item 命令之前任意位置使用。</li>
<li>图表标题 在图表标题命令 \caption 之后紧接着使用。</li>
<li>定理环境 在定理环境内部任意位置使用。</li>
</ul>
<p>在使用不记编号的命令形式（\section<em>、\caption</em>、带可选参数的 \item 命令等）时不要使用 \label 命令，否则生成的引用编号不正确。</p>
<h4 id="脚注边注"><a href="#脚注边注" class="headerlink" title="脚注边注"></a>脚注边注</h4><p>使用 \footnote 命令可以在页面底部生成一个脚注：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\footnote</span>&#123;⟨footnote⟩&#125;</span><br></pre></td></tr></table></figure>

<p>有些情况下（比如在表格环境、各种盒子内）使用 \footnote 并不能正确生成脚注。我们可以分两步进行，先使用 \footnotemark 为脚注计数，再在合适的位置用 \footnotetext 生成脚注。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;l&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">“天地玄黄，宇宙洪荒。日月盈昃，辰宿列张。”<span class="keyword">\footnotemark</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\footnotetext</span>&#123;表格里的名句出自《千字文》。&#125;</span><br></pre></td></tr></table></figure>

<p>使用 \marginpar 命令可在边栏位置生成边注：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\marginpar</span>[⟨left-margin⟩]&#123;⟨right-margin⟩&#125;</span><br><span class="line"><span class="keyword">\marginpar</span>&#123;<span class="keyword">\footnotesize</span> 边注较窄，不要写过多文字，最好设置较小的字号。&#125;</span><br></pre></td></tr></table></figure>

<p>如果只给定了 ⟨right-margin⟩，那么边注在奇偶数页文字相同；如果同时给定了 ⟨left-margin⟩，则偶数页使用 ⟨left-margin⟩ 的文字。</p>
<h4 id="特殊环境"><a href="#特殊环境" class="headerlink" title="特殊环境"></a>特殊环境</h4><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>LATEX 提供了基本的有序和无序列表环境 enumerate 和 itemize，两者的用法很类似，都用 \item 标明每个列表项。enumerate 环境会自动对列表项编号。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 有序列表</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> An item.</span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> A nested item.<span class="keyword">\label</span>&#123;itref&#125;</span><br><span class="line"><span class="keyword">\item</span>[*] A starred item.</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> Reference(<span class="keyword">\ref</span>&#123;itref&#125;).</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 无序列表</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> An item.</span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> A nested item.</span><br><span class="line"><span class="keyword">\item</span>[+] A `plus&#x27; item.</span><br><span class="line"><span class="keyword">\item</span> Another item.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> Go back to upper level.</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure>

<p>其中 \item 可带一个可选参数，将有序列表的计数或者无序列表的符号替换成自定义的符号。列表可以嵌套使用，最多嵌套四层。</p>
<p>关键字环境 description 的用法与以上两者类似，不同的是 \item 后的可选参数用来写关键字，以粗体显示，一般是必填的：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;description&#125;</span><br><span class="line"><span class="keyword">\item</span>[Enumerate] Numbered list.</span><br><span class="line"><span class="keyword">\item</span>[Itemize] Non-numbered list.</span><br><span class="line"><span class="keyword">\end</span>&#123;description&#125;</span><br></pre></td></tr></table></figure>

<p>各级无序列表的符号由命令 \labelitemi 到 \labelitemiv 定义，可以简单地重新定义它们；而有序列表的符号由命令 \labelenumi 到 \labelenumiv 定义，重新定义这些命令还需要用到计数器相关命令：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 无序列表</span></span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\labelitemi</span>&#125;&#123;<span class="keyword">\ddag</span>&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\labelitemii</span>&#125;&#123;<span class="keyword">\dag</span>&#125;</span><br><span class="line"><span class="comment">% 有序列表</span></span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\labelenumi</span>&#125;&#123;<span class="keyword">\Alph</span>&#123;enumi&#125;&gt;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对齐环境"><a href="#对齐环境" class="headerlink" title="对齐环境"></a>对齐环境</h5><p>center、flushleft 和 flushright 环境分别用于生成居中、左对齐和右对齐的文本环境。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125; … <span class="keyword">\end</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;flushleft&#125; … <span class="keyword">\end</span>&#123;flushleft&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;flushright&#125; … <span class="keyword">\end</span>&#123;flushright&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，还可以用以下命令直接改变文字的对齐方式：\centering \raggedright \raggedleft；</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\centering</span></span><br><span class="line">Centered text paragraph.</span><br><span class="line"><span class="keyword">\raggedright</span></span><br><span class="line">Left-aligned text paragraph.</span><br><span class="line"><span class="keyword">\raggedleft</span></span><br><span class="line">Right-aligned text paragraph.</span><br></pre></td></tr></table></figure>

<p>三个命令和对应的环境经常被误用，有直接用所谓 \flushleft 命令或者 raggedright 环境的，都是不甚严格的用法（即使它们可能有效）。有一点可以将两者区分开来：center 等环境会在上下文产生一个额外间距，而 \centering 等命令不产生，只是改变对齐方式。</p>
<h5 id="引用环境"><a href="#引用环境" class="headerlink" title="引用环境"></a>引用环境</h5><p>LATEX 提供了两种引用的环境：quote 用于引用较短的文字，首行不缩进；quotation 用于引用若干段文字，首行缩进。引用环境较一般文字有额外的左右缩进。verse 用于排版诗歌，与 quotation 恰好相反，verse 是首行悬挂缩进的。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% quote</span></span><br><span class="line">Francis Bacon says:</span><br><span class="line"><span class="keyword">\begin</span>&#123;quote&#125;</span><br><span class="line">Knowledge is power.</span><br><span class="line"><span class="keyword">\end</span>&#123;quote&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% quotation</span></span><br><span class="line">《木兰诗》：</span><br><span class="line"><span class="keyword">\begin</span>&#123;quotation&#125;</span><br><span class="line">万里赴戎机，关山度若飞。</span><br><span class="line">朔气传金柝，寒光照铁衣。</span><br><span class="line">将军百战死，壮士十年归。</span><br><span class="line">归来见天子，天子坐明堂。</span><br><span class="line">策勋十二转，赏赐百千强。……</span><br><span class="line"><span class="keyword">\end</span>&#123;quotation&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% verse</span></span><br><span class="line">Rabindranath Tagore&#x27;s short poem:</span><br><span class="line"><span class="keyword">\begin</span>&#123;verse&#125;</span><br><span class="line">Beauty is truth&#x27;s smile</span><br><span class="line">when she beholds her own face in</span><br><span class="line">a perfect mirror.</span><br><span class="line"><span class="keyword">\end</span>&#123;verse&#125;</span><br></pre></td></tr></table></figure>

<h5 id="摘要环境"><a href="#摘要环境" class="headerlink" title="摘要环境"></a>摘要环境</h5><p>摘要环境 abstract 默认只在标准文档类中的 article 和 report 文档类可用，一般用于紧跟\maketitle 命令之后介绍文档的摘要。如果文档类指定了 titlepage 选项，则单独成页；反之，单栏排版时相当于一个居中的小标题加一个 quotation 环境，双栏排版时相当于 \section* 定义的一节。</p>
<h5 id="代码环境"><a href="#代码环境" class="headerlink" title="代码环境"></a>代码环境</h5><p>有时我们需要将一段代码原样转义输出，这就要用到代码环境 verbatim，它以等宽字体排版代码，回车和空格也分别起到换行和空位的作用；带星号的版本更进一步将空格显示成 ␣。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;verbatim&#125;<span class="string"></span></span><br><span class="line"><span class="string">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">std::cout &lt;&lt; &quot;Hello, world!&quot;</span></span><br><span class="line"><span class="string">&lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span><span class="keyword">\end</span>&#123;verbatim&#125;</span><br></pre></td></tr></table></figure>

<p>要排版简短的代码或关键字，可使用 \verb 命令：⟨delim⟩ 标明代码的分界位置，前后必须一致，除字母、空格或星号外，可任意选择使得不与代码本身冲突，习惯上使用 | 符号。同 verbatim 环境，\verb 后也可以带一个星号，以显示空格。\verb 命令对符号的处理比较复杂，一般不能用在其它命令的参数里，否则多半会出错。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\verb</span>⟨<span class="string">delim⟩</span>⟨code⟩⟨delim⟩</span><br><span class="line"><span class="keyword">\verb</span>|<span class="string">\LaTeX</span>|</span><br><span class="line"><span class="keyword">\verb</span>+<span class="string">(a || b)</span>+ <span class="keyword">\verb</span>*<span class="string">+(a || b)+</span></span><br></pre></td></tr></table></figure>

<p>verbatim 宏包优化了 verbatim 环境的内部命令，并提供了 \verbatiminput 命令用来直接读入文件生成代码环境。fancyvrb 宏包提供了可定制格式的 Verbatim 环境；listings 宏包更进一步，可生成关键字高亮的代码环境，支持各种程序设计语言的语法和关键字。详情请参考各自的帮助文档。</p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>排版表格最基本的 tabular 环境用法为：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;⟨column-spec⟩&#125;</span><br><span class="line">⟨item1⟩ <span class="built_in">&amp;</span> ⟨item2⟩ <span class="built_in">&amp;</span> … <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">⟨item1⟩ <span class="built_in">&amp;</span> ⟨item2⟩ <span class="built_in">&amp;</span> … <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>直接使用 tabular 环境的话，会和周围的文字混排。tabular 环境可带一个可选参数控制垂直对齐（默认是垂直居中）；但是通常情况下，tabular 环境一般会放置在 table 浮动体环境中，并用 \caption 命令加标题。</p>
<h5 id="列格式"><a href="#列格式" class="headerlink" title="列格式"></a>列格式</h5><p>tabular 环境使用 ⟨column-spec⟩ 参数指定表格的列数以及每列的格式。且表格中每行的单元格数目不能多于列格式里 l/c/r/p 的总数（可以少于这个总数），否则出错。</p>
<table>
<thead>
<tr>
<th align="left">列格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">l/c/r</td>
<td align="left">单元格内容左对齐/居中/右对齐，不折行</td>
</tr>
<tr>
<td align="left">p{⟨width⟩}</td>
<td align="left">单元格宽度固定为 ⟨width⟩，可自动折行</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">绘制竖线</td>
</tr>
<tr>
<td align="left">@{⟨string⟩}</td>
<td align="left">自定义内容 ⟨string⟩</td>
</tr>
</tbody></table>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|l|c|r|&#125;</span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    left <span class="built_in">&amp;</span> center <span class="built_in">&amp;</span> right <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>@ 格式可在单元格前后插入任意的文本，但同时它也消除了单元格前后额外添加的间距。@格式可以适当使用以充当“竖线”。特别地，@{} 可直接用来消除单元格前后的间距：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;@&#123;&#125; r@&#123;:&#125;lr @&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> one <span class="keyword">\\</span></span><br><span class="line">11 <span class="built_in">&amp;</span> 3 <span class="built_in">&amp;</span> eleven <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>另外 LATEX 还提供了简便的将格式参数重复的写法 *{⟨n⟩{⟨column-spec⟩}，比如以下两种写法是等效的：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|p&#123;4em&#125;|p&#123;4em&#125;|&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|*&#123;5&#125;&#123;c|&#125;*&#123;2&#125;&#123;p&#123;4em&#125;|&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>有时需要为整列修饰格式，比如整列改变为粗体，如果每个单元格都加上 \bfseries 命令会比较麻烦。array 宏包提供了辅助格式 &gt; 和 &lt;，用于给列格式前后加上修饰命令：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% \usepackage&#123;array&#125;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;&gt;&#123;<span class="keyword">\itshape</span>&#125;r&lt;&#123;*&#125;l&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">italic <span class="built_in">&amp;</span> normal <span class="keyword">\\</span></span><br><span class="line">column <span class="built_in">&amp;</span> column <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>array 宏包还提供了类似 p 格式的 m 格式和 b 格式，三者分别在垂直方向上靠顶端对齐、居中以及底端对齐。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span><span class="keyword">\txt</span></span><br><span class="line">&#123;a b c d e f g h i&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;cp&#123;2em&#125;m&#123;2em&#125;b&#123;2em&#125;&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">pos <span class="built_in">&amp;</span> <span class="keyword">\txt</span> <span class="built_in">&amp;</span> <span class="keyword">\txt</span> <span class="built_in">&amp;</span> <span class="keyword">\txt</span> <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<h5 id="列宽"><a href="#列宽" class="headerlink" title="列宽"></a>列宽</h5><p>LATEX 本身提供了 tabular* 环境用来排版定宽表格，但是不太方便使用，比如要用到 @ 格式插入额外命令，令单元格之间的间距为 \fill，但即使这样仍然有瑕疵：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular*&#125;&#123;14em&#125;<span class="comment">%</span></span><br><span class="line">&#123;@&#123;<span class="keyword">\extracolsep</span>&#123;<span class="keyword">\fill</span>&#125;&#125;|c|c|c|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">A <span class="built_in">&amp;</span> B <span class="built_in">&amp;</span> C <span class="built_in">&amp;</span> D <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="built_in">&amp;</span> c <span class="built_in">&amp;</span> d <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular*&#125;</span><br></pre></td></tr></table></figure>

<p>tabularx 宏包为我们提供了方便的解决方案。它引入了一个 X 列格式，类似 p 列格式，不过会根据表格宽度自动计算列宽，多个 X 列格式平均分配列宽。X 列格式也可以用 array 里的辅助格式修饰对齐方式：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabularx&#125;&#123;14em&#125;<span class="comment">%</span></span><br><span class="line">&#123;|*&#123;4&#125;&#123;&gt;&#123;<span class="keyword">\centering</span><span class="keyword">\arraybackslash</span>&#125;X|&#125;&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">A <span class="built_in">&amp;</span> B <span class="built_in">&amp;</span> C <span class="built_in">&amp;</span> D <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="built_in">&amp;</span> c <span class="built_in">&amp;</span> d <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabularx&#125;</span><br></pre></td></tr></table></figure>

<h5 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h5><p>通过 \hline 命令绘制表格线，而 \cline{⟨i⟩-⟨j⟩} 命令用来绘制跨越部分单元格的横线：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span> <span class="keyword">\cline</span>&#123;1-2&#125;</span><br><span class="line">4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span> <span class="keyword">\cline</span>&#123;3-3&#125;</span><br><span class="line">7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9 <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>
<p>在科技论文排版中广泛应用的表格形式是三线表，形式干净简明。三线表由 booktabs 宏包支持，它提供了 \toprule、\midrule 和 \bottomrule 命令用以排版三线表的三条线，以及和 \cline 对应的 \cmidrule。除此之外，最好不要用其它横线以及竖线：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;cccc&#125;</span><br><span class="line"><span class="keyword">\toprule</span></span><br><span class="line"><span class="built_in">&amp;</span> <span class="keyword">\multicolumn</span>&#123;3&#125;&#123;c&#125;&#123;Numbers&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\cmidrule</span>&#123;2-4&#125;</span><br><span class="line"><span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\midrule</span></span><br><span class="line">Alphabet <span class="built_in">&amp;</span> A <span class="built_in">&amp;</span> B <span class="built_in">&amp;</span> C <span class="keyword">\\</span></span><br><span class="line">Roman <span class="built_in">&amp;</span> I <span class="built_in">&amp;</span> II<span class="built_in">&amp;</span> III <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\bottomrule</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<h5 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h5><p>LATEX 通过 \multicolumn 合并横向单元格；</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\multicolumn</span>&#123;⟨n⟩&#125;&#123;⟨column-spec⟩&#125;&#123;⟨item⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ⟨n⟩ 为要合并的列数，⟨column-spec⟩ 为合并单元格后的列格式，只允许出现一个 l/c/r 或 p 格式。如果合并前的单元格前后带表格线 |，合并后的列格式也要带 | 以使得表格的竖线一致。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> Center <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\multicolumn</span>&#123;2&#125;&#123;|c|&#125;&#123;3&#125; <span class="built_in">&amp;</span></span><br><span class="line"><span class="keyword">\multicolumn</span>&#123;1&#125;&#123;r|&#125;&#123;Right&#125; <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">4 <span class="built_in">&amp;</span> <span class="keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;C&#125; <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>此外，形如 \multicolumn{1}{⟨column-spec⟩}{⟨item⟩} 的命令可以用来修改某一个单元格的列格式；</p>
<p>纵向合并单元格需要用到 multirow 宏包提供的 \multirow 命令：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\multirow</span>&#123;⟨n⟩&#125;&#123;⟨width⟩&#125;&#123;⟨item⟩&#125;</span><br></pre></td></tr></table></figure>

<p>⟨width⟩ 为合并后单元格的宽度，可以填 * 以使用自然宽度。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% \usepackage&#123;multirow&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;ccc&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;Item&#125; <span class="built_in">&amp;</span></span><br><span class="line"><span class="keyword">\multicolumn</span>&#123;2&#125;&#123;c&#125;&#123;Value&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\cline</span>&#123;2-3&#125;</span><br><span class="line"><span class="built_in">&amp;</span> First <span class="built_in">&amp;</span> Second <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">A <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2 <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<h5 id="嵌套表格"><a href="#嵌套表格" class="headerlink" title="嵌套表格"></a>嵌套表格</h5><p>相对于合并单元格，拆分单元格对于 LATEX 来说并非易事。在单元格中嵌套一个小表格可以起到“拆分单元格”的效果。在以下的例子中，注意要用 \multicolumn 命令配合 @{} 格式把单元格的额外边距去掉，使得嵌套的表格线能和外层的表格线正确相连；</p>
<p>如果不需要为“拆分的单元格”画线，并且只在垂直方向“拆分”的话，makecell 宏包提供的 \makecell 命令是一个简单的解决方案：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">a <span class="built_in">&amp;</span> <span class="keyword">\makecell</span>&#123;d1 <span class="keyword">\\</span> d2&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">b <span class="built_in">&amp;</span> c <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<h5 id="控制行距"><a href="#控制行距" class="headerlink" title="控制行距"></a>控制行距</h5><p>LATEX 生成的表格看起来通常比较紧凑。修改参数 \arraystretch 可以得到行距更加宽松的表格，但后续的行距都会修改；</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span><span class="keyword">\arraystretch</span>&#123;1.8&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">Really loose <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">tabular rows.<span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<p>另一种增加间距的办法是给换行命令 \ 添加可选参数，在这一行下面加额外的间距，适合用于在行间不加横线的表格；</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>LATEX 本身不支持插图功能，需要由 graphicx 宏包辅助支持，然后通过 \includegraphics 命令加载图片：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\includegraphics</span>[⟨options⟩]&#123;⟨filename⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ⟨filename⟩ 为图片文件名，与使用 \include 命令类似，文件名有时需要使用相对路径或绝对路径。图片文件的扩展名可写可不写。</p>
<p>另外 graphicx 宏包还提供了 \graphicspath 命令，用于声明一个或多个图片文件存放的目录，使用这些目录里的图片时可不用写路径：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 假设主要的图片放在 figures 子目录下，标志放在 logo 子目录下</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123;&#123;figures/&#125;&#123;logo/&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>\includegraphics 命令的可选参数 ⟨options⟩ 支持 ⟨key⟩=⟨value⟩ 形式赋值，常用的参数如下：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">width=⟨width⟩</td>
<td align="left">将图片缩放到宽度为 ⟨width⟩</td>
</tr>
<tr>
<td align="left">height=⟨height⟩</td>
<td align="left">将图片缩放到高度为 ⟨height⟩</td>
</tr>
<tr>
<td align="left">scale=⟨scale⟩</td>
<td align="left">将图片相对于原尺寸缩放 ⟨scale⟩ 倍</td>
</tr>
<tr>
<td align="left">angle=⟨angle⟩</td>
<td align="left">令图片逆时针旋转 ⟨angle⟩ 度</td>
</tr>
</tbody></table>
<h4 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h4><p>盒子是 LATEX 排版的基础单元，LATEX 提供了一些命令让我们生成一些有特定用途的盒子。</p>
<h5 id="水平盒子"><a href="#水平盒子" class="headerlink" title="水平盒子"></a>水平盒子</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mbox</span>&#123;…&#125;</span><br><span class="line"><span class="keyword">\makebox</span>[⟨width⟩][⟨align⟩]&#123;…&#125;</span><br></pre></td></tr></table></figure>
<p>\mbox 生成一个基本的水平盒子，内容只有一行，不允许分段（除非嵌套其它盒子，比如后文的垂直盒子）。外表看上去，\mbox 的内容与正常的文本无二，不过断行时文字不会从盒子里断开。</p>
<p>\makebox 更进一步，可以加上可选参数用于控制盒子的宽度 ⟨width⟩，以及内容的对齐方式⟨align⟩，可选居中 c（默认值）、左对齐 l、右对齐 r 和分散对齐 s。但分散对齐方式强行拉开单词的间距，往往会报 Underfull \hbox 的消息</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">|<span class="keyword">\mbox</span>&#123;Test some words.&#125;|<span class="keyword">\\</span></span><br><span class="line">|<span class="keyword">\makebox</span>[10em]&#123;Test some words.&#125;|<span class="keyword">\\</span></span><br><span class="line">|<span class="keyword">\makebox</span>[10em][l]&#123;Test some words.&#125;|<span class="keyword">\\</span></span><br><span class="line">|<span class="keyword">\makebox</span>[10em][r]&#123;Test some words.&#125;|<span class="keyword">\\</span></span><br><span class="line">|<span class="keyword">\makebox</span>[10em][s]&#123;Test some words.&#125;|</span><br></pre></td></tr></table></figure>

<p>\fbox 和 \framebox 让我们可以为水平盒子添加边框。使用的语法与 \mbox 和 \makebox一模一样：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\fbox</span>&#123;…&#125;</span><br><span class="line"><span class="keyword">\framebox</span>[⟨width⟩][⟨align⟩]&#123;…&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\fbox</span>&#123;Test some words.&#125;<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\framebox</span>[10em][r]&#123;Test some words.&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 可以通过 \setlength 命令调节边框的宽度 \fboxrule 和内边距 \fboxsep：</span></span><br><span class="line"><span class="keyword">\framebox</span>[10em][r]&#123;Test box&#125;<span class="keyword">\\</span>[1ex]</span><br><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\fboxrule</span>&#125;&#123;1.6pt&#125;</span><br><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\fboxsep</span>&#125;&#123;1em&#125;</span><br><span class="line"><span class="keyword">\framebox</span>[10em][r]&#123;Test box&#125;</span><br></pre></td></tr></table></figure>

<h5 id="垂直盒子"><a href="#垂直盒子" class="headerlink" title="垂直盒子"></a>垂直盒子</h5><p>如果需要排版一个文字可以换行的盒子，LATEX 提供了两种方式：</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul>
<li>LATEX 的三个标准文档类可指定的选项包括：</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10pt, 11pt, 12pt</td>
<td align="left">指定文档的基本字号。默认为 10pt。</td>
</tr>
<tr>
<td align="left">a5paper, b5paper, executivepaper, legalpaper</td>
<td align="left">指定纸张大小，默认为美式信纸 letterpaper （8.5 × 11 英寸）。</td>
</tr>
<tr>
<td align="left">twoside, oneside</td>
<td align="left">指定单面/双面排版。双面排版时，奇偶页的页眉页脚、页边距不同。article 和 report 默认为 oneside，book 默认为 twoside。</td>
</tr>
<tr>
<td align="left">onecolumn, twocolumn</td>
<td align="left">指定单栏/双栏排版。默认为 onecolumn。</td>
</tr>
<tr>
<td align="left">openright, openany</td>
<td align="left">指定新的一章 \chapter 是在奇数页（右侧）开始，还是直接紧跟着上一页开始。report 默认为 openany，book 默认为 openright。对 article 无效。</td>
</tr>
<tr>
<td align="left">landscape</td>
<td align="left">指定横向排版。默认为纵向。</td>
</tr>
<tr>
<td align="left">titlepage, notitlepage</td>
<td align="left">指定标题命令 \maketitle 是否生成单独的标题页。article 默认为 notitlepage，report 和 book 默认为 titlepage。</td>
</tr>
<tr>
<td align="left">fleqn</td>
<td align="left">令行间公式左对齐。默认为居中对齐。</td>
</tr>
<tr>
<td align="left">leqno</td>
<td align="left">将公式编号放在左边。默认为右边。</td>
</tr>
<tr>
<td align="left">draft, final</td>
<td align="left">指定草稿/终稿模式。草稿模式下，断行不良的地方会在行尾添加一个黑色方块。默认为 final。</td>
</tr>
</tbody></table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://www.latex-project.org/">LaTeX 官网</a></li>
<li><a href="https://www.overleaf.com/learn">LaTeX 英文文档</a></li>
<li><a href="https://ctan.org/">TeX 进阶 CTAN</a></li>
<li><a href="ht;tps://www.jianshu.com/p/3e842d67ada2">LaTeX零基础入门教程</a></li>
<li><a href="http://www.080910t.com/wp-content/uploads/2019/05/LATEX-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.pdf">一份（不太）简短的 LaTeX 2ε 介绍.pdf</a></li>
<li><a href="https://www.overleaf.com/">overleaf 在线编辑工具</a></li>
<li><a href="https://www.sharelatex.com/">ShareLaTeX 在线编辑工具</a></li>
<li><a href="https://www.tablesgenerator.com/">LaTeX 表格在线生成工具</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
</search>
