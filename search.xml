<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h3><blockquote>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。Git 是基于差异（delta-based）的版本控制工具。<br>在 Git中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 会为每个版本都创建一个快照。</p>
</blockquote>
<span id="more"></span>

<h3 id="Git-工作方式"><a href="#Git-工作方式" class="headerlink" title="Git 工作方式"></a>Git 工作方式</h3><p>基本的 Git 工作流程如下：</p>
<ol>
<li>在工作区中修改文件。</li>
<li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>
<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>
</ol>
<p>文件的三种状态：已提交（committed）、已修改（modified） 和 已暂存（staged）。</p>
<ul>
<li>已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
<li>已提交表示数据已经安全地保存在本地数据库中。</li>
</ul>
<p>结合文件的三种状态，与之对应的有三个位置：工作区（workspace）、暂存区（index）、Git仓库（repository）；</p>
<ul>
<li>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li>
<li>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</li>
<li>Git仓库是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</li>
</ul>
<p>Git 工作三个阶段:</p>
<img src="/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png" class="">

<p>Git 文件状态变更:</p>
<img src="/2021/04/28/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%8F%98%E6%9B%B4.png" class="">

<h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p>Windows 上安装：</p>
<ol>
<li>从官网下载，<a href="https://git-scm.com/downloads">地址</a>；</li>
<li>执行安装程序，不更改默认选项，一路确认完成安装；</li>
<li>安装完成后查看 Git 版本，<code>git --version</code> ；</li>
</ol>
<p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Linux、Mac 安装</a></p>
<h3 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h3><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p><code>git config</code>命令用于查看或更改配置信息。安装完 Git 之后，要做的第一件事就是设置用户名和邮件地址。这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改。该配置项会被写入用户文件夹下的.gitconfig 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span> <span class="comment"># 设置用户名</span></span><br><span class="line">$ git config --global user.email username@example.com <span class="comment"># 设置邮箱地址</span></span><br><span class="line">$ git config &lt;key&gt; <span class="comment"># 显示指定配置项</span></span><br><span class="line">$ git config --list <span class="comment"># 显示所有配置信息</span></span><br><span class="line">$ git config --list --show-origin <span class="comment"># 显示配置信息及配置文件路径</span></span><br><span class="line">$ git config --global core.editor <span class="string">&quot;path/to/editor&quot;</span> <span class="comment"># 配置默认的编辑器</span></span><br><span class="line">$ git config --global core.editor notepad <span class="comment"># 设置默认编辑器未notepad</span></span><br></pre></td></tr></table></figure>

<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>Git 创建仓库一般分为两种方式：</p>
<ol>
<li>在本地创建</li>
</ol>
<p><code>git init</code>命令将创建一个名为 .git 的子目录（隐藏文件夹），这个子目录包括初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/myProject <span class="comment"># 进入到项目文件夹下</span></span><br><span class="line">$ git init <span class="comment"># 在本地创建 Git 仓库，将尚未进行版本控制的本地目录转换为 Git 仓库；</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从远程克隆</li>
</ol>
<p><code>git clone</code>命令将从远程 Git 服务器上将项目下载到本地，形成一个本地的克隆仓库，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/User/Project.git <span class="comment"># 使用http协议在当前文件夹下下载Project项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:User/Project.git <span class="comment"># 使用Git协议在当前文件夹下下载Project项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/User/Project.git newName <span class="comment"># 下载Project项目到newName文件夹中，也可以跟路径，下载到指定位置</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b &lt;branchName&gt; https://github.com/User/Project.git <span class="comment"># 下载项目指定分支，并且绑定获取和推送地址为该分支；</span></span><br><span class="line"><span class="comment"># 下载链接后的 .git 可以不加；</span></span><br></pre></td></tr></table></figure>

<h4 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h4><p><code>git status</code>命令用于查看项目中文件状态，待提交、已修改、未跟踪等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment"># 查看文件状态</span></span><br><span class="line">$ git status -s/--short <span class="comment"># 查看文件状态的简略信息，其中文件名前会显示两列标志，左栏表示暂存区的状态，右栏表示工作区的状态，?表示未跟踪，A表示新增，M表示修改过</span></span><br></pre></td></tr></table></figure>

<p><code>git add</code>命令用于添加文件到缓冲区并跟踪文件，即监视文件变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add &lt;file&gt; <span class="comment"># 添加跟踪文件到暂存区</span></span><br><span class="line">$ git add *.c <span class="comment"># 添加所有.c文件</span></span><br><span class="line">$ git add . <span class="comment"># 添加所有文件</span></span><br></pre></td></tr></table></figure>

<p><code>git diff</code>命令用于查看文件更改前后之间的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff &lt;file&gt; <span class="comment"># 比较工作目录中当前文件和暂存区域快照之间的差异；</span></span><br><span class="line">$ git diff --staged <span class="comment"># 比对已暂存文件与最后一次提交的文件差异;</span></span><br></pre></td></tr></table></figure>

<p><code>git commit</code>命令用于将缓冲区中的文件提交到本地仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit <span class="comment"># 提交代码到本地仓库，默认使用 nano 编辑器，建议更改默认编辑器</span></span><br><span class="line">$ git commit -m <span class="string">&quot;comments&quot;</span> <span class="comment"># 提交代码并添加注释</span></span><br><span class="line">$ git commit -a <span class="comment"># 跳过 git add 添加到缓冲区操作，直接提交已跟踪的更改文件</span></span><br><span class="line">$ git commit -am <span class="string">&quot;comments&quot;</span> <span class="comment"># 直接提交更改文件，同时添加注释</span></span><br><span class="line">$ git commit --amend <span class="comment"># 重新提交，可以补充提交暂存区中的文件，也可以重写注释</span></span><br></pre></td></tr></table></figure>

<p><code>git mv</code>命令用于重命名已跟踪的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;fileA&gt; &lt;fileB&gt; <span class="comment"># 将文件fileA重命名为fileB</span></span><br></pre></td></tr></table></figure>

<p><code>git merge</code>命令用于合并分支，待补充。</p>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><p>远程仓库是指托管在因特网或其他网络中的你的项目的版本库。<br><code>git remote</code>命令用于查看、配置远程信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote <span class="comment"># 用于显示远程配置信息，列出你指定的每一个远程服务器的简写，克隆仓库会显示origin，这是默认远程仓库的名称\</span></span><br><span class="line">$ git remote -v <span class="comment"># 显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</span></span><br><span class="line">$ git remote add &lt;remoteName&gt; &lt;url&gt; <span class="comment"># 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写</span></span><br><span class="line">$ git remote show &lt;remoteName&gt; <span class="comment"># 显示指定远程仓库的信息</span></span><br></pre></td></tr></table></figure>

<p><code>git fetch</code>命令用于从远程仓库获取数据，该命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作，后续需要手动合并代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt; <span class="comment"># 抓取指定远程仓库的代码，省略则抓取默认的 origin 远程仓库</span></span><br></pre></td></tr></table></figure>

<p><code>git push</code>命令用于将本地仓库的代码推送到远程仓库。需要有写入权限，并且本地代码已经更新到和远程仓库同步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push [remote] [branch] <span class="comment"># 将代码推送到指定远程仓库的指定分支下，一般默认 origin 下的 master/main 主分支；</span></span><br><span class="line">$ git push [remote] HEAD:&lt;branch&gt; <span class="comment"># 使用该命令推送到指定的远程分支；</span></span><br><span class="line">$ git push --set-upstream origin &lt;newBranch&gt; <span class="comment"># 将本地分支推送到远程服务器，并创建对应的分支 </span></span><br><span class="line">$ git push origin --delete &lt;BranchName&gt; <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure>

<p><code>git pull</code>操作用于从服务器拉取更新代码，并自动合并到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull <span class="comment"># 相当于 git fetch + git merge 结合的操作</span></span><br><span class="line">$ git pull [remote] [branch] <span class="comment"># 下载指定分支代码，并快速合并</span></span><br></pre></td></tr></table></figure>

<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p><code>git branch</code>命令用于查看、创建分支等操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch <span class="comment"># 查看工作区下的分支，并显示当前分支</span></span><br><span class="line">$ git branch -a <span class="comment"># 显示所有本地分支和远程分支</span></span><br><span class="line">$ git branch -v <span class="comment"># 显示分支的哈希码以及上次提交注释信息</span></span><br><span class="line">$ git branch &lt;branchName&gt; <span class="comment"># 创建新的本地分支</span></span><br><span class="line">$ git branch -d &lt;branchName&gt; <span class="comment"># 删除本地分支</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>命令用于切换分支，切换分支体现在.git/HEAD文件中的指向；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment"># 显示工作区、暂存区和远程仓库之间的差异</span></span><br><span class="line">$ git checkout [branchName | hashValue] <span class="comment"># 切换到分支，可以切换到本地没有的分支，可以是历史提交的版本，或者远程分支，进入分离头模式（detached HEAD），在分离头模式中也可以创建新的分支；</span></span><br><span class="line">$ git checkout -b &lt;branchName&gt; <span class="comment"># 创建并切换分支</span></span><br><span class="line">$ git checkout --orphan &lt;branch-name&gt; <span class="comment"># 创建单独分支</span></span><br></pre></td></tr></table></figure>

<h4 id="撤销删除"><a href="#撤销删除" class="headerlink" title="撤销删除"></a>撤销删除</h4><p><code>git reset</code>用于撤销操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt; <span class="comment"># 用于从暂存区取消暂存文件</span></span><br></pre></td></tr></table></figure>

<p><code>git rm</code>命令用于删除 Git 项目中的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file&gt; <span class="comment"># 从暂存区中删除文件，同时永久删除文件，不能删除未提交到仓库中的文件</span></span><br><span class="line">$ git rm --cached &lt;file&gt; <span class="comment"># 只从缓冲区中删除文件，取消跟踪</span></span><br><span class="line">$ git rm -f &lt;file&gt; <span class="comment"># 强制删除文件，包括未提交到仓库中的文件</span></span><br><span class="line">$ git rm -rf . <span class="comment"># 强制移除项目中所有文件</span></span><br><span class="line">$ git rm -r --cached . <span class="comment"># 删除本地缓存，有时更新.gitignore文件不会立即生效，可以执行该命令</span></span><br></pre></td></tr></table></figure>

<p><code>git restore</code>命令用于丢弃更改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git restore &lt;file&gt; <span class="comment"># 忽略该文件的更改，退回到上次提交时的状态</span></span><br></pre></td></tr></table></figure>

<h4 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h4><p><code>git log</code>命令用于查看提交历史。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看提交历史，包括哈希值、作者、日期、注释等信息；</span></span><br><span class="line">$ git <span class="built_in">log</span> -p/--patch <span class="comment"># 补丁格式显示，显示更改内容；</span></span><br><span class="line">$ git <span class="built_in">log</span> [-2] <span class="comment"># 指定显示最后提交记录的条数；</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span> <span class="comment"># 显示提交记录的同时，显示每次提交的简略统计信息；</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline <span class="comment"># 指定显示格式，参数有 online | short | full | fuller，默认 full；</span></span><br><span class="line">$ git <span class="built_in">log</span> --abbrev-commit <span class="comment"># 只显示哈希码的前几位，一般7位</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline <span class="comment"># --pretty=oneline 和 --abbrev-commit 组合的缩写</span></span><br></pre></td></tr></table></figure>

<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><p><code>git tag</code>命令用于为不同版本提交设置标签，待补充。</p>
<h4 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h4><p>以下命令可以查看 Git 指令的描述，以及详细用法；打开的是本地的英文网页文档；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> &lt;action&gt;</span><br><span class="line">$ git &lt;action&gt; --<span class="built_in">help</span></span><br><span class="line">$ git &lt;action&gt; -h <span class="comment"># 命令缩写</span></span><br></pre></td></tr></table></figure>

<h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>当项目中有一些缓存文件、日志文件、临时文件、测试文件等不需要跟踪的文件时，可以在项目根目录下新建一个<code>.gitignore</code>文件，将不需要跟踪的文件添加进去，Git 会忽略到这些文件。</p>
<p><code>.gitignore</code>文件格式规范：</p>
<ul>
<li>所有空行或者以 # 开头的行都会被 Git 忽略，注释。</li>
<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>
<li>匹配模式可以以（/）开头防止递归。</li>
<li>匹配模式可以以（/）结尾指定目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。</li>
</ul>
<p>其中 glob 模式是指 shell 所使用的简化了的正则表达式。</p>
<ul>
<li>星号（*）匹配零个或多个任意字符；</li>
<li>[abc] 匹配任何一个列在方括号中的字符；</li>
<li>问号（?）只匹配一个任意字符；</li>
<li>如果在方括号中使用短划线分隔两个字符，表示匹配这两个字符范围内的字符；</li>
<li>使用两个星号（**）表示匹配任意中间目录；</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://git-scm.com/">Git 官网</a></li>
<li><a href="https://git-scm.com/book/zh/v2">progit 在线文档</a></li>
<li><a href="https://github.com/progit/progit2-zh/releases/download/2.1.55/progit_v2.1.55.pdf">progit PDF电子书</a></li>
<li><a href="https://www.jianshu.com/p/46ffff059092">Git 命令大全</a></li>
<li><a href="https://github.com/521xueweihan/git-tips">Git 奇淫技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>notes</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Gogs-学习笔记</title>
    <url>/2021/08/21/Gogs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="什么是-Gogs"><a href="#什么是-Gogs" class="headerlink" title="什么是 Gogs?"></a>什么是 Gogs?</h3><p>Gogs 是一款极易搭建的自助 Git 服务。可以根据操作系统平台下载二进制运行，或者通过 Docker 或 Vagrant，以及包管理安装。Gogs 是用 Go 语言开发，因此任何 Go 语言支持的平台都可以运行 Gogs，包括 Windows、Mac、Linux 以及 ARM。一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。甚至还可以将 Gogs 运行在 NAS 设备上。</p>
<p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p>
<span id="more"></span>

<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><h4 id="源文件安装"><a href="#源文件安装" class="headerlink" title="源文件安装"></a>源文件安装</h4><ol>
<li>克隆 Gogs 仓库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 https://github.com/gogs/gogs.git gogs</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入仓库文件夹下，执行编译</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build -o gogs</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试是否安装正确</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./gogs web</span><br></pre></td></tr></table></figure>

<img src="/2021/08/21/Gogs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Gogs%E8%BF%90%E8%A1%8C.png" class="">

<ol start="4">
<li>初始配置，Gogs 默认会在端口<code>3000</code>启动 HTTP 服务</li>
</ol>
<h4 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h4><p>步骤</p>
<ol>
<li>解压压缩包。</li>
<li>使用命令 cd 进入到刚刚创建的目录。</li>
<li>执行命令 <code>./gogs web</code>。</li>
<li>访问<code>/install</code>以进行初始配置。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://gogs.io/docs">官方文档</a></li>
<li><a href="https://github.com/gogs/gogs/releases">历史版本</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages搭建个人博客网站</title>
    <url>/2021/04/05/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本文记录了如何利用 Hexo 和 Github Pages 快速搭建个人博客网站的整个过程。以下代码均已我的博客和仓库为例，请自行更改为自己的。</p>
<p>中文官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>
<span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h4><p>官网地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>选择相应版本安装后分别执行<code>node -v</code>和<code>npm -v</code>查看是否正确安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v12.16.2</span><br><span class="line">&gt; npm -v</span><br><span class="line">6.14.4</span><br></pre></td></tr></table></figure>

<h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p>官网地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>同样在安装好后检查安装的版本信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git --version</span><br><span class="line">git version 2.29.2.windows.2</span><br></pre></td></tr></table></figure>

<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>全局安装<code>hexo-cli</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>检查 Hexo 版本，会得到以下输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo -v</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 12.16.2</span><br><span class="line">v8: 7.8.279.23-node.34</span><br><span class="line">uv: 1.34.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.40.0</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1e</span><br><span class="line">cldr: 36.0</span><br><span class="line">icu: 65.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure>

<p>然后依次执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; mkdir myBlog <span class="comment"># 创建一个空的博客文件夹</span></span><br><span class="line">&gt; <span class="built_in">cd</span> myBlog <span class="comment"># 进入到博客文件夹中</span></span><br><span class="line">&gt; hexo init <span class="comment"># 使用 hexo init 命令下在 Hexo 项目初始化文件</span></span><br><span class="line">&gt; npm install <span class="comment"># 下载 Hexo 项目的第三方依赖</span></span><br></pre></td></tr></table></figure>

<p>最后得到的文件目录如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">文件</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">_config.yml</td>
<td align="left">网站配置文件</td>
</tr>
<tr>
<td align="left">package.json</td>
<td align="left">项目配置文件</td>
</tr>
<tr>
<td align="left">scaffolds</td>
<td align="left">模板文件夹</td>
</tr>
<tr>
<td align="left">source</td>
<td align="left">资源文件夹</td>
</tr>
<tr>
<td align="left">themes</td>
<td align="left">主题文件夹</td>
</tr>
</tbody></table>
<p>本地预览</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo generate</span><br><span class="line">&gt; hexo server</span><br></pre></td></tr></table></figure>

<p>在浏览器中访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可查看网站默认样式。</p>
<h4 id="关联-GitHub-仓库"><a href="#关联-GitHub-仓库" class="headerlink" title="关联 GitHub 仓库"></a>关联 GitHub 仓库</h4><ul>
<li>创建仓库</li>
</ul>
<p>在 GitHub 中创建一个同名仓库，命名为<code>coley48.github.io</code>，这也将成为网站的域名。</p>
<ul>
<li>配置 Git</li>
</ul>
<p>如果初次使用Git，需要设置用户名和邮箱。打开Git Bash，设置全局用户名和邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name coley48</span><br><span class="line">$ git config --global user.email coley48@qq.com</span><br></pre></td></tr></table></figure>

<p>查看用户名和邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name &amp;&amp; git config user.email</span><br><span class="line">coley48</span><br><span class="line">coley48@qq.com</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 SSH 密钥</li>
</ul>
<p><code>ssh</code>还可以设置密码，通常方便起见，这里不设置密码，全部回车。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;coley48@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>默认创建在用户文件夹下的<code>.ssh</code>文件夹中，查看生成的密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh &amp;&amp; ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥，用于上传到 GitHub。</p>
<p>将<code>ssh key</code>关联到 GitHub 账号<br>在 Git Bash 中复制<code>id_rsa.pub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub &gt; /dev/clipboard</span><br></pre></td></tr></table></figure>

<p>或在 cmd 终端中复制<code>id_rsa.pub</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; clip &lt; id_rsa.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 SSH 密钥</li>
</ul>
<p>在 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 页面中选择<code>New SSH key</code>新建<code>ssh key</code>，标题自定义，然后将上一步复制的公钥粘贴进去，点击<code>Add SSH key</code>完成添加。</p>
<img src="/2021/04/05/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/%E6%B7%BB%E5%8A%A0ssh-key.png" class="">

<ul>
<li>测试 SSH 连接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">&#x27;192.30.255.113&#x27;</span> to the list of known hosts.</span><br><span class="line">Hi Coley48! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<p>GitHub文档：<a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh">使用 SSH 连接到 GitHub</a></p>
<ul>
<li>Hexo 一键部署</li>
</ul>
<p>一键部署功能是在本地编辑完成之后，直接使用<code>hexo deploy</code>命令就可以完成部署操作。</p>
<p>一键部署功能需要安装 Hexo 的部署插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后修改_config.yml，为 Hexo 指定部署的 Github 仓库：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Coley48/coley48.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>之后就可以使用以下命令更新网站：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean <span class="comment"># 清除之前生成的静态文件，不是必须的</span></span><br><span class="line">&gt; hexo generate <span class="comment"># 生成静态网页文件</span></span><br><span class="line">&gt; hexo deploy <span class="comment"># 部署到远程仓库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定个人域名</li>
</ul>
<p>GitHub Pages还提供 Custom Domain 可以使用自定义域名。</p>
<ol>
<li>在域名解析控制台添加 CNAME 解析记录，将 coley48.github.io 解析到 blog.coley48.cn。</li>
<li>同时在 github.io 仓库中设置 Custom Domain 为 blog.coley48.cn。</li>
<li>然后在 /source 文件夹下创建一个 CNAME 文本文件，存放域名。</li>
<li>最后重新生成部署一下网站，稍微等待片刻便可以通过自己的域名访问博客网站了。</li>
</ol>
<p>Github文档：<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site">配置 GitHub Pages 站点的自定义域</a></p>
<h3 id="Hexo-基本配置"><a href="#Hexo-基本配置" class="headerlink" title="Hexo 基本配置"></a>Hexo 基本配置</h3><p>Hexo的所有配置都在_config.yml文件中，部分配置如下：</p>
<table>
<thead>
<tr>
<th align="right">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="right">title</td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="right">subtitle</td>
<td align="left">网站副标题，可以放座右铭</td>
</tr>
<tr>
<td align="right">description</td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="right">keywords</td>
<td align="left">网站的关键词</td>
</tr>
<tr>
<td align="right">author</td>
<td align="left">作者名字</td>
</tr>
<tr>
<td align="right">language</td>
<td align="left">网站使用的语言</td>
</tr>
<tr>
<td align="right">url</td>
<td align="left">网址，必须是完整的url</td>
</tr>
<tr>
<td align="right">post_asset_folder</td>
<td align="left">启动 Asset 文件夹，默认false</td>
</tr>
<tr>
<td align="right">relative_link</td>
<td align="left">把链接改为与根目录的相对位址，默认false</td>
</tr>
<tr>
<td align="right">theme</td>
<td align="left">设置主题，false禁用主题</td>
</tr>
<tr>
<td align="right">theme_config</td>
<td align="left">主题的配置参数，优先级高</td>
</tr>
<tr>
<td align="right">deploy</td>
<td align="left">部署配置</td>
</tr>
</tbody></table>
<p>更多配置详见<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></p>
<h3 id="Hexo-的基本使用"><a href="#Hexo-的基本使用" class="headerlink" title="Hexo 的基本使用"></a>Hexo 的基本使用</h3><ul>
<li>初始化</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建网站，未指定 folder 时在当前文件夹下创建。<br>创建步骤：</p>
<ol>
<li>git 下载包含 hexo-theme-landscape 主题的 hexo-starter 项目。</li>
<li>通过包管理工具安装依赖，默认使用 npm。</li>
</ol>
<ul>
<li>新建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建文章，<code>layout</code>默认使用<code>_config.yml</code>中<code>default_layout</code>参数值，包含空格的标题需要加引号。三种布局：<code>post</code>、<code>page</code>、<code>draft</code>。<br>参数：<br><code>-p, --path</code> 自定义文章的路径，默认使用标题作为文章路径。<br><code>-r, --replace</code> 替换同名文章。<br><code>-s, --slug</code> 作为新文章的文件名和发布后的 URL。</p>
<ul>
<li>生成</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo generate/g</span><br></pre></td></tr></table></figure>

<p>生成网页，将生成的文件放入<code>public</code>文件夹下，如果存在<code>public</code>，默认只生成改动的文件。<br>参数：<br><code>-d, --deploy</code> 文件生成后立即部署网站。<br><code>-w, --watch</code> 监视文件变动。<br><code>-b, --bail</code> 生成过程中如果发生任何未处理的异常则爆出异常。<br><code>-f, --force</code> 强制重新生成文件，等同于<code>hexo clean &amp;&amp; hexo generate</code>。<br><code>-c, --concurrency</code> 设置最大同时生成文件的数量，默认无限制。<br><code>--config &lt;custom.yml&gt; [config.json]</code> 使用自定义配置文件。</p>
<ul>
<li>发布</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<ul>
<li>本地预览</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo server/s</span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，网址为：<a href="http://localhost:4000/">http://localhost:4000</a>。<br>参数：<br><code>-p, --port</code> 设置端口。<br><code>-s, --static</code> 只使用静态文件。<br><code>-l, --log</code> 启动日志记录，使用覆盖记录格式。<br><code>--config &lt;custom.yml&gt;</code> 使用自定义配置文件。</p>
<ul>
<li>部署</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo deploy/d</span><br></pre></td></tr></table></figure>

<p>部署网站<br><code>-g, --generate</code> 部署之前预先生成静态文件，等同于<code>hexo g -d</code>。</p>
<ul>
<li>清除</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件<code>db.json</code>和已生成的静态文件夹<code>public</code>。</p>
<p>更多命令详见<a href="https://hexo.io/zh-cn/docs/commands">官方文档</a>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></li>
<li><a href="https://www.cnblogs.com/michael-xiang/p/10464518.html">Hexo 搭建 Blog 精简笔记</a></li>
<li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.baidujs&dist_request_id=1328741.37347.16169781187402753&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.baidujs">Hexo 史上最全搭建教程</a></li>
<li><a href="http://www.xinxiaoyang.com/programming/2016-11-25-hexo-image-bug/">Hexo 图片插入</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题的配置和优化</title>
    <url>/2021/04/14/Hexo-Next%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Next-简介"><a href="#Next-简介" class="headerlink" title="Next 简介"></a>Next 简介</h3><p>Next 是 Hexo 最受欢迎的主题之一，而且在 Next 之下还分为4个<code>scheme</code>。可以根据个人喜好来设置相应的<code>scheme</code>。</p>
<img src="/2021/04/14/Hexo-Next%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/Next-theme.png" class="">

<p>官方文档：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a><br>GitHub 地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<span id="more"></span>

<h3 id="Next-安装"><a href="#Next-安装" class="headerlink" title="Next 安装"></a>Next 安装</h3><p>进入到博客根目录下，将主题项目下载到<code>themes/</code>文件夹下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> myBlog</span><br><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>然后打开根目录下的<code>_config.yml</code>配置文件，即网站配置文件，将其中的主题选项，参数改为<code>next</code>即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h3 id="Next-配置"><a href="#Next-配置" class="headerlink" title="Next 配置"></a>Next 配置</h3><p>这里有两种方式配置 Next 主题，一是更改<code>/themes/next/</code>文件夹下的<code>_config.yml</code>，即主题配置文件；二是在网站配置文件中添加一个 <code>theme_config</code>属性，然后在该属性后面添加配置参数。</p>
<p>这里推荐使用第二种方式，因为网站配置文件中<code>theme_config</code>下参数优先级高于主题配置文件，因此会覆盖主题配置文件，同时不用更改 Next 主题源码，当 Next 主题更新时也不需要再修改主题配置文件。</p>
<p>以我的博客为例，主题配置部分如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme_config:</span> </span><br><span class="line">  <span class="comment"># 页面底部设置</span></span><br><span class="line">  <span class="attr">footer:</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># 设置年份和版权信息</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span> <span class="comment"># 默认心形，也可以设置 Font Awessome 中的其他图标 </span></span><br><span class="line">      <span class="comment"># https://fontawesome.com/icons</span></span><br><span class="line">      <span class="attr">animated:</span> <span class="literal">true</span> <span class="comment"># 添加动画，默认 false</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#fc6423&quot;</span> <span class="comment"># 使用十六进制设置图标颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">powered:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Powered by Hexo &amp; NexT</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2021</span> <span class="comment"># 设置建站时间</span></span><br><span class="line">    <span class="attr">copyright:</span> <span class="string">Hush</span> <span class="comment"># 设置版权归属</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文章协议</span></span><br><span class="line">  <span class="attr">creative_commons:</span></span><br><span class="line">    <span class="attr">license:</span> <span class="string">by-nc-sa</span> <span class="comment"># 协议名</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="literal">false</span> <span class="comment"># 是否显示在侧栏</span></span><br><span class="line">    <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 是否显示在文章中</span></span><br><span class="line">    <span class="attr">language:</span> <span class="comment"># 选择语言</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 主题方案</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">Gemini</span> <span class="comment"># 选择主题方案，默认 Muse</span></span><br><span class="line">  <span class="comment"># Muse | Mist | Pisces | Geminim</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 菜单栏页面设置</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span> <span class="comment"># 主页</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span> <span class="comment"># 关于</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span> <span class="comment"># 标签</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span> <span class="comment"># 分类</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span> <span class="comment"># 归档</span></span><br><span class="line">    <span class="comment">#schedule: /schedule/ || fa fa-calendar # 计划</span></span><br><span class="line">    <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap # 站点地图</span></span><br><span class="line">    <span class="comment"># commonweal: /404/ || fa fa-heartbeat # 公益404</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 头像设置</span></span><br><span class="line">  <span class="attr">avatar:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/images/avator.jpg</span> <span class="comment"># 设置头像路径</span></span><br><span class="line">    <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 头像圆角</span></span><br><span class="line">    <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment"># 头像旋转效果</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 社交设置</span></span><br><span class="line">  <span class="attr">social:</span></span><br><span class="line">    <span class="attr">GitHub:</span> <span class="string">https://github.com/Coley48</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span> <span class="comment"># GitHub</span></span><br><span class="line">    <span class="attr">E-Mail:</span> <span class="string">mailto:coley48@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span> <span class="comment"># 邮箱</span></span><br><span class="line">    <span class="comment"># Weibo | Google | Twitter | FB Page | StackOverflow |  YouTube</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打赏功能设置</span></span><br><span class="line">  <span class="attr">reward_settings:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否开启打赏功能</span></span><br><span class="line">    <span class="attr">animation:</span> <span class="literal">false</span> <span class="comment"># 打赏功能动画效果</span></span><br><span class="line">    <span class="comment">#comment: Donate comment here. # 设置打赏语</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打赏方式设置</span></span><br><span class="line">  <span class="attr">reward:</span></span><br><span class="line">    <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">    <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">    <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">    <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代码块设置</span></span><br><span class="line">  <span class="attr">codeblock:</span></span><br><span class="line">    <span class="attr">highlight_theme:</span> <span class="string">normal</span> <span class="comment"># 高亮主题 </span></span><br><span class="line">    <span class="comment"># normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">    <span class="attr">copy_button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启一键复制功能</span></span><br><span class="line">      <span class="attr">show_result:</span> <span class="literal">true</span> <span class="comment"># 显示复制成功结果</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">mac</span> <span class="comment"># 三种显示效果 default | flat | mac</span></span><br><span class="line">    <span class="attr">beian:</span> <span class="comment"># 备案</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">icp:</span> <span class="string">蜀ICP备</span> <span class="number">20003974</span><span class="number">-1</span><span class="string">号</span></span><br><span class="line">      <span class="comment"># gongan_id: 1234567890</span></span><br><span class="line">      <span class="comment"># gongan_num: 京公网安备 1234567890号</span></span><br><span class="line">      <span class="comment"># gongan_icon_url: /uploads/beian.png</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 回顶部按钮</span></span><br><span class="line">  <span class="attr">back2top:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># 在侧栏显示</span></span><br><span class="line">    <span class="attr">scrollpercent:</span> <span class="literal">true</span> <span class="comment"># 显示百分比</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 阅读进度条</span></span><br><span class="line">  <span class="attr">reading_progress:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># 显示位置 top | bottom</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span> <span class="comment"># 进度条颜色</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">3px</span> <span class="comment"># 进度条宽度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">  <span class="attr">github_banner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="string">https://github.com/Coley48</span> <span class="comment"># GitHub 地址</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Local Search 本地搜索</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment"># 搜索结果显示方式，auto 内容更改显示；manual 手动回车显示</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span> <span class="comment"># 设置显示条数，-1 为显示所有</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span> <span class="comment"># 反转义 html 字符串</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span> <span class="comment"># 页面加载时预加载搜索数据</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 添加友链</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">    <span class="comment"># Title: http://site.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多配置详见：<a href="http://theme-next.iissnan.com/">Next 使用文档</a>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://jiyali.github.io/2019/04/15/hexo-next-%E9%83%A8%E7%BD%B2%E5%90%84%E7%A7%8D%E7%82%AB%E9%85%B7%E5%8D%9A%E5%AE%A2%E7%89%B9%E6%95%88/">hexo+next 部署各种炫酷博客特效</a></li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization/">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI + GitHub Pages自动部署Hexo博客</title>
    <url>/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="什么是持续集成？"><a href="#什么是持续集成？" class="headerlink" title="什么是持续集成？"></a>什么是持续集成？</h3><p>持续集成（Continuous Integration，简称 CI）指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码“集成”到主干。</p>
<p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>
<p>Travis CI 提供的是持续集成服务。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p>
<p>本文记录了利用 Travis CI 搭建自动部署的 Hexo 博客系统的整个过程。</p>
<span id="more"></span>

<h3 id="Travis-CI-的使用"><a href="#Travis-CI-的使用" class="headerlink" title="Travis CI 的使用"></a>Travis CI 的使用</h3><h4 id="创建-token"><a href="#创建-token" class="headerlink" title="创建 token"></a>创建 token</h4><ol>
<li><p>进入配置页面，先在 Github 的设置页面中找到 Developer settings，点进入后选择第三条 Personal access tokens，或者直接点击<a href="https://github.com/settings/tokens">这个链接</a>跳转配置页面。</p>
</li>
<li><p>生成密钥，点击右上 Generate new token 按钮，可能会需要输入密码验证一下用户身份，然后填写 token 名称用于标识该 token 的用途，然后在下方为 token 设置权限，这里只需要添加 repo 即可。</p>
<img src="/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/%E7%94%9F%E6%88%90personal-access-token.png" class="">
<p>这里需要注意的是，密钥只会在第一次生成时可见，页面刷新后就无法查看密钥的值，因此创建后需要立即保存，否则只能重新生成。</p>
</li>
<li><p>添加密钥，进入 Travis CI 官网 <a href="https://travis-ci.com/">travis-ci.com</a>，首次进入需要通过 Github 来进行仓库的授权访问，完成之后会进入到自己的控制面板，这里可以看到自己 GitHub 上的所有仓库，然后进入需要部署的仓库的 setting 页面，在这里添加环境变量，变量名设置为 GH_TOKEN ，变量值为上一步骤中保存的哈希值。</p>
<img src="/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/%E6%B7%BB%E5%8A%A0token%E5%88%B0Travis-CI%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" class="">
<p>切记不要点开 DISPLAY VALUE IN BUILD LOG 选项，否则 token 值会输出到构建日志中，就会暴露给别人。</p>
</li>
</ol>
<h4 id="添加travis-yml"><a href="#添加travis-yml" class="headerlink" title="添加travis.yml"></a>添加<code>travis.yml</code></h4><p>Travis CI 的的部署极其简单，只用在项目根目录中添加一个<code>travis.yml</code>配置文件，该文件指定了所有 Travis CI 的构建和部署行为。</p>
<p>下面以我的 Hexo 博客项目为例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">os:</span> <span class="string">linux</span> <span class="comment"># 选择构建的操作系统</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 项目语言</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span>  <span class="comment"># 使用 nodejs LTS v10</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 只监控存放源代码的 main 分支</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span> <span class="comment"># 缓存 node_modules 加快构建速度</span></span><br><span class="line"><span class="attr">before_script:</span> <span class="comment"># 构建环境搭建，根据所用的主题，这里会有所不同</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 在 CI 环境内安装 Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">themes</span> <span class="comment"># 由于 main 分支中没有将 themes/ 文件夹，所以需要重新创建</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/hexo-theme-next</span> <span class="string">themes/next</span> <span class="comment">#从 Github 上拉取 next 主题</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 最后在根目录安装站点需要的依赖 </span></span><br><span class="line"><span class="attr">script:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># 生成静态文件</span></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 根据个人情况，这里会有所不同</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span> <span class="comment"># 构建完成后不清除</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">git</span> <span class="comment"># 默认使用 git</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GH_TOKEN</span> <span class="comment"># 在 Travis CI 中设置的环境变量 token</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span> <span class="comment"># 保存历史</span></span><br><span class="line">  <span class="attr">fqdn:</span> <span class="string">blog.coley48.cn</span> <span class="comment"># 自定义域名，使用 username.github.io 可删除</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># hexo 站点源文件所在的 branch</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">gh-pages</span> <span class="comment"># 存放生成站点文件的 branch，使用 username.github.io 必须是 master</span></span><br></pre></td></tr></table></figure>

<h4 id="提交项目"><a href="#提交项目" class="headerlink" title="提交项目"></a>提交项目</h4><p><code>git push</code>命令执行完成之后，稍等片刻 Travis CI 就会开始运行。<br>在 Travis CI 控制面板中，进入到自己的仓库页面中可以看到项目正在构建，显示黄色：</p>
<img src="/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis-CI%E6%9E%84%E5%BB%BA%E4%B8%AD.png" class="">

<p>在下方<code>Job log</code>中还可以查看构建过程中的输出信息：</p>
<img src="/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis-CI%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF.png" class="">

<p>当输出<code>Done. Your build exited with 0.</code>时，表示构建成功，显示为绿色：</p>
<img src="/2021/04/15/Travis-CI-GitHub-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis-CI%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%88%90.png" class="">

<p>此后，Travis CI 会自动监听 GitHub 仓库提交，每次有新的代码提交，Travis CI 会自动按照<code>travis.yml</code>配置文件中的命令执行，然后将生成的代码推送到指定的分支中。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.travis-ci.com/">Travis CI 官网</a></li>
<li><a href="https://www.travis-ci.com/getting_started">Travis CI 官方文档</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">持续集成服务 Travis CI 教程</a></li>
<li><a href="https://dunwu.github.io/tools/travis-ci%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B.html">Travis CI 极简教程</a></li>
<li><a href="https://www.itrhx.com/2018/08/15/A02-hexo-blog/">使用 Github Pages 和 Hexo 搭建自己的独立博客</a></li>
<li><a href="https://segmentfault.com/a/1190000017909815?utm_source=sf-similar-article">Travis CI + github + hexo 自动化部署</a></li>
<li><a href="https://segmentfault.com/a/1190000021987832">Travis CI 加 Hexo 实现自动构建部署 Github Pages 博客</a></li>
<li><a href="https://developer.aliyun.com/article/569237">使用Travis CI自动部署Hexo博客</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Travis-CI</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack-学习笔记</title>
    <url>/2021/07/28/Webpack-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="webpack-学习笔记"><a href="#webpack-学习笔记" class="headerlink" title="webpack 学习笔记"></a>webpack 学习笔记</h2><blockquote>
<p>At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles.<br>本质上，webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图 (dependency graph) ，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。</p>
</blockquote>
<span id="more"></span>

<h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>webpack 是基于 nodejs 的，因此 webpack 项目也是一个 node 项目，直接使用 npm 来初始化项目；对于大多数项目，建议本地安装，便于后期分项目升级；</p>
<ol>
<li>使用<code>npm init</code>命令初始化项目文件夹，创建<code>package.json</code>文件；</li>
<li>安装 webpack 和 webpack-cli 开发依赖；</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm init -y</span><br><span class="line">&gt; npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<p>以该项目为例，目录结构如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .gitignore</span><br><span class="line">├── README.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── src</span><br><span class="line">|   └── index.js</span><br><span class="line">└── dist</span><br></pre></td></tr></table></figure>

<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol>
<li>新建一个模块<code>a.js</code>，并在里面编写一个简单的打印函数；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/a.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    print,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建入口<code>index.js</code>，并引入模块<code>a.js</code>；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"></span><br><span class="line">moduleA.print(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行 <code>npx webpack</code> 开始打包，结果将被输出到根目录下 dist 文件夹中，并得到以下输出：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">asset main.js 224 bytes [compared <span class="keyword">for</span> emit] [minimized] (name: main)</span><br><span class="line">./src/index.js 83 bytes [built] [code generated]</span><br><span class="line">./src/a.js 104 bytes [built] [code generated]</span><br><span class="line"></span><br><span class="line">WARNING <span class="keyword">in</span> configuration</span><br><span class="line">The <span class="string">&#x27;mode&#x27;</span> option has not been <span class="built_in">set</span>, webpack will fallback to <span class="string">&#x27;production&#x27;</span> <span class="keyword">for</span> this value.</span><br><span class="line">Set <span class="string">&#x27;mode&#x27;</span> option to <span class="string">&#x27;development&#x27;</span> or <span class="string">&#x27;production&#x27;</span> to <span class="built_in">enable</span> defaults <span class="keyword">for</span> each environment.</span><br><span class="line">You can also <span class="built_in">set</span> it to <span class="string">&#x27;none&#x27;</span> to <span class="built_in">disable</span> any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line">webpack 5.37.1 compiled with 1 warning <span class="keyword">in</span> 201 ms</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>得到打包好的输出文件<code>dist/main.js</code>；</li>
</ol>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><strong>入口</strong>（entry）：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图（dependency graph）的开始，默认值是<code>./src/index.js</code>。</li>
<li><strong>输出</strong>（output）：告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在<code>./dist</code>文件夹中。</li>
<li><strong>加载器</strong>（loader）：让 webpack 能够去处理 js 和 json 以外的其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中。 </li>
<li><strong>插件</strong>（plugin）：让 webpack 可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量等。                           </li>
<li><strong>模式</strong>（mdoe）：通过选择<code>development</code>、<code>production</code>或<code>none</code>之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为<code>production</code>。</li>
<li><strong>目标</strong>（target）：告知 webpack 为部署目标指定一个环境。默认值为<code>browserslist</code>，如果没有找到<code>browserslist</code>的配置，则默认为<code>web</code>。      </li>
<li><strong>模块热替换</strong>（HMR - hot module replacement）：是指在应用程序运行过程中，替换、添加或删除模块，而无需重新加载整个页面。</li>
<li><strong>初始化块</strong>（initail chunk） 是入口起点的主块。此 chunk 包含为入口起点指定的所有模块及其依赖项。默认名为<code>main.js</code>。</li>
<li><strong>非初始化块</strong> （non-initial chunk）是可以延迟加载的块。可能会出现在使用 动态导入(dynamic imports) 或者 SplitChunksPlugin 时。默认情况下，这些非初始化块没有名称，因此会使用唯一 ID 来替代名称。</li>
</ul>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>webpack 可以无需使用任何配置文件。webpack 会假定项目的入口起点为<code>src/index.js</code>，然后会在<code>dist/main.js</code>输出结果，并且在生产环境开启压缩和优化。但通常我们还需要对 webpack 进行更精细化的配置，以充分发挥 webpack 的能力。</p>
<p>习惯性的将配置文件拆分为三个配置文件，并提取公共配置部分到<code>webpack.common.js</code>，然后分别将开发模式和生产模式的配置放在<code>webpack.dev.js</code>和<code>webpack.prod.js</code>中，并用<code>webpack-merge</code>合并公共部分的配置。</p>
<p>最后<code>package.json</code>中添加 webpack 的 script 启动命令，让 webpack 使用自定义的配置文件替代默认的<code>webpack.config.js</code>：</p>
<p><strong>package.json</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;script&quot; : &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;webpack --config webpack.dev.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遵循不重复原则(Don’t repeat yourself - DRY)，保留一个通用配置，将相同的公共配置放入<code>webpack.common.js</code>中：</p>
<p><strong>webpack.common.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">        print: <span class="string">&#x27;./src/print.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            include: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">            loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        &#125;, ],</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        symlinks: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        sideEffects: <span class="literal">true</span>,</span><br><span class="line">        usedExports: <span class="literal">true</span>,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">&#x27;async&#x27;</span>, <span class="comment">// 对哪些块进行优化，all | async | initial，</span></span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    priority: -<span class="number">10</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    priority: -<span class="number">20</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将开发模式的配置放入<code>webpack.dev.js</code>中：</p>
<p><strong>webpack.dev.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    merge</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(config, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        publicPath: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        port: <span class="number">8000</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            index: <span class="string">&#x27;/index.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            esModule: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            esModule: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        runtimeChunk: <span class="string">&#x27;single&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将生产模式的配置放入<code>webpack.prod.js</code>中：</p>
<p><strong>webpack.prod.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(config, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        publicPath: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">            assetNameRegExp: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            cssProcessor: <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>),</span><br><span class="line">            cssProcessorPluginOptions: &#123;</span><br><span class="line">                preset: [<span class="string">&#x27;default&#x27;</span>, &#123;</span><br><span class="line">                    discardComments: &#123;</span><br><span class="line">                        removeAll: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">            canPrint: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                sideEffects: <span class="literal">true</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            publicPath: <span class="string">&quot;../&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                sideEffects: <span class="literal">true</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            publicPath: <span class="string">&quot;../&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 webpack-cli 脚手架初始化项目，需要安装 @webpack-cli/generators 依赖；<br>根据项目需要选择相应配置；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npx webpack-cli init &lt;project&gt;</span><br></pre></td></tr></table></figure>

<h4 id="实现热重载"><a href="#实现热重载" class="headerlink" title="实现热重载"></a>实现热重载</h4><p>热重载能为开发提供极大的便利，不需要每次修改代码后手动编译，然后在浏览器中手动刷新页面来观察效果；同时每次只更新改动部分的代码，并且将编译的结果存在内存中；通过在内存中（而不是写入磁盘）编译和 serve 资源来提高性能。这里提供两种实现热重载的方式：</p>
<p><strong>webpack-dev-serve</strong><br>使用 webpack 官方提供的开发服务器实现热重载是最简便的方式，需要安装开发依赖<code>webpack-dev-serve</code>，然后只需要在<code>webpack.dev.js</code>配置文件中添加 devSever 项的配置即可；</p>
<p><strong>webpack watch + live server</strong><br>使用 webpack 的 watch 模式是一种替代方案，它会实时监听文件的变动，编辑保存后便开始编译，并将文件输出到 dist 文件夹下，然后开启 VS Code 的插件 live server 即可实现模块热替换。</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol>
<li>package.json 属性说明</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>name</code></td>
<td align="left">设置软件包的名称。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">列出软件包的作者名称。</td>
</tr>
<tr>
<td align="left"><code>contributors</code></td>
<td align="left">除作者外，该项目可以有一个或多个贡献者。 此属性是列出他们的数组。</td>
</tr>
<tr>
<td align="left"><code>bugs</code></td>
<td align="left">链接到软件包的问题跟踪器，最常用的是 GitHub 的 issues 页面。</td>
</tr>
<tr>
<td align="left"><code>homepage</code></td>
<td align="left">设置软件包的主页。</td>
</tr>
<tr>
<td align="left"><code>version</code></td>
<td align="left">指定软件包的当前版本。x.x.x 分别表示主版本号、次版本号、补丁版本号仅修复缺陷的版本是补丁版本，引入向后兼容的更改的版本是次版本，具有重大更改的是主版本。</td>
</tr>
<tr>
<td align="left"><code>license</code></td>
<td align="left">指定软件包的许可证。</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">此属性包含与软件包功能相关的关键字数组。</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">此属性包含了对软件包的简短描述。</td>
</tr>
<tr>
<td align="left"><code>repository</code></td>
<td align="left">此属性指定了此程序包仓库所在的位置。</td>
</tr>
<tr>
<td align="left"><code>main</code></td>
<td align="left">设置软件包的入口点。</td>
</tr>
<tr>
<td align="left"><code>private</code></td>
<td align="left">如果设置为 true，则可以防止应用程序/软件包被意外发布到 npm 上。</td>
</tr>
<tr>
<td align="left"><code>scripts</code></td>
<td align="left">可以定义一组可以运行的 node 脚本。</td>
</tr>
<tr>
<td align="left"><code>dependencies</code></td>
<td align="left">设置作为依赖安装的 npm 软件包的列表。</td>
</tr>
<tr>
<td align="left"><code>devDependencies</code></td>
<td align="left">设置作为开发依赖安装的 npm 软件包的列表。</td>
</tr>
<tr>
<td align="left"><code>browserslist</code></td>
<td align="left">用于告知要支持哪些浏览器（及其版本）。 Babel、Autoprefixer 和其他工具会用到它，以将所需的 polyfill 和 fallback 添加到目标浏览器。</td>
</tr>
</tbody></table>
<ol start="2">
<li>软件包版本说明符</li>
</ol>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">~</td>
<td align="left">如果写入的是 〜0.13.0，则只更新补丁版本：即 0.13.1 可以，但 0.14.0 不可以。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">如果写入的是 ^0.13.0，则要更新补丁版本和次版本：即 0.13.1、0.14.0、依此类推。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">如果写入的是 *，则表示接受所有的更新，包括主版本升级。</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">接受高于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">接受等于或高于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">接受等于或低于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">接受低于指定版本的任何版本。</td>
</tr>
<tr>
<td align="left">无符号</td>
<td align="left">仅接受指定的特定版本。</td>
</tr>
<tr>
<td align="left">latest</td>
<td align="left">使用可用的最新版本。</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">使用范围组合</td>
</tr>
</tbody></table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://webpack.docschina.org/">webpack中文官方文档</a></li>
<li><a href="https://v4.webpack.js.org/">webpack v4 官网</a></li>
<li><a href="https://github.com/ronami/minipack">一个简单打包工具的详细说明</a></li>
<li><a href="https://blog.csdn.net/weixin_33936401/article/details/87963738">nodejs 中的依赖管理</a></li>
<li><a href="https://github.com/Coley48/webpack">个人webpack项目地址</a></li>
<li><a href="https://github.com/Coley48/webpack-code">个人webpack测试代码项目地址</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>学习笔记</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>写给自己</title>
    <url>/2021/06/29/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p>首先要对自己说一句：“毕业快乐！”。<br>四年大学生活已经落下帷幕，从此也踏上了新的人生征途。<br>纵观整个大学四年，我觉得自己过得很充实，也没留下什么遗憾。</p>
<span id="more"></span>

<p><strong>做个简单的总结：</strong></p>
<p>大一担任了班委，进了院上两委会，工作上比较忙，有时候饭都顾不上吃；然后参加了校上运动会，结交了很多朋友，但是学业上有些忽略了，所以前期成绩不太理想，后面开始慢慢将精力投入到学习上来，成绩有了很大的提升；</p>
<p>大二因为大一表现还不错，有幸读了党校，也因此认识了更多的优秀的同学；虽然大二没有留在两委会，但进入了学校的社团，认识了不少其他学院的同学；平时的时间大多都是在泡在图书馆里看书学习，因此大二整个学年的成绩都还不错；</p>
<p>从大三开始，积极参加了各种专业上的学科竞赛，数学建模、创新创业、计算机设计大赛、蓝桥杯等，不断积累项目经验以及获奖经历；专业的知识技能也是在大三这一年不断的通过项目的打磨提升上来的。</p>
<p>到了大四，整个第一学期，几乎都是在为老师写项目，我们也因为项目成为了很好的朋友；这个项目也是成为了我的毕业设计，然后也是找到了跟专业对口的工作，进入了新的人生阶段；</p>
<img src="/2021/06/29/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/thumbnail.png" class="">

<p>当然毕业不是终点，而是新生活、新奋斗的起点；<br>况且学无止境，我愿常怀一颗赤子之心，在知识的海洋里，乘风破浪；在学习的道路上，披荆斩棘！</p>
<p>最后愿你历尽千帆，归来仍是少年；<br>愿你在多年之后再读到这篇文章时，仍是个积极进取，不断向前的少年。加油！</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>大学</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>我的大学</title>
    <url>/2021/08/31/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>一转眼已经毕业了2个月了，算上实习也工作了有4个月了。总的来说，自己已经逐渐适应了每天两点一线的上班生活。相较而言，工作的压力要大一些，什么事情都要自己考虑，花钱的地方也多，因此还是读书要比工作轻松；然后另一个感受是经济独立真的太爽了，从出来工作之后也没再问家里要过钱，虽然之前实习挣的少，还要交房租，但还是勉强撑过来了，之后的日子也会逐渐步入正轨，越来越好！</p>
<p>由于自己没有写日记的习惯，因此大学经历过的很多有趣好玩的事情并没记录下来，就打算写一篇文章，大概记录一下自己觉得好玩、有意义的事情，也算是自己的一篇大学的自传！有些时间点有些不准确，只是大概的参考日期。</p>
<span id="more"></span>

<h3 id="大一篇"><a href="#大一篇" class="headerlink" title="大一篇"></a>大一篇</h3><p><strong>2017-09-06</strong><br>大一，刚进入大学，便是为期一周的寝室内务 + 半个多月的军训，完全刷新了我对咱们学校的认知😱；不过比较好的一点是我们学校有一个传统是大二同专业的学长会带着大一新生搞内务；</p>
<p>这是我总结的内务操作指南：</p>
<ul>
<li>缝床单：要用针线把床单沿着席子的边缝在一起，这样看起来床单才整齐；</li>
<li>包棕垫：要用牛皮纸将棕垫包起来，用透明胶粘好，避免掉棕毛；</li>
<li>砂铁锈：要用砂纸将床上的铁锈擦掉，然后涂上指甲油防锈；</li>
<li>擦地板：要用洗衣粉把地面刷过之后，再拿帕子擦干净；</li>
<li>叠军被：要把处理过的被子叠成豆腐块，但我们睡觉的时候一般都收到柜子里盖另一床被子，免得每天都叠；</li>
<li>拉军被：要用桌桌面盖在被子上，来回拉扯把被子压得平薄，4人合作拉桌腿，2人站桌斗里加重量，1人往地上的席子上抹肥皂减小摩擦；</li>
</ul>
<p>拉军被的工作量最大，都是师兄弟一起拉了几天才完成，最后我们还去了女寝（还是头一次去女生寝室😊）帮女生拉军被，当时不知道有多少张桌子腿被拉断了。</p>
<p>军训期间我的社死瞬间：刚开始军训，无知的把军训服里的腰带当作皮带用了，然后教官讲了正确的使用方式，可是该死的裤子太大了，我只能把裤子提得尽量高一点，然后把腰带扎紧一点，这样裤子也被扎住了；可惜我还是年轻了，结束了上午的军训，刚好到饭点，高年级的也下课了，我转过主教楼，迎面走来几个师姐，好巧不巧的就在这个时候，我裤子哗的一下掉了下来，我🙃…..，也没敢看她们，就一把抓住了裤子，绕开从边上跑了，还隐隐听到了她们在笑，我去之后我就把裤子裁了。</p>
<p><strong>2017-09-15</strong><br>军训期间，我也认识了我大学中的第一位贵人，我们的班助（班主任助理），也是我的老大————婷哥；</p>
<p><strong>2017-10-08</strong><br>国庆之后，班会上我竞选班长，落选了，当了劳生委员；后来我跟着婷哥进了两委会监察部，她是部长，我是干事。<br>按院上两委会的传统，每届都会有一个新干事见面大会，每个部门都会出一个节目，当时在一起排练的场景我还依稀记得；后面居然还是在新传演播大厅举行的！</p>
<p><strong>2017-10-18</strong><br>我在大学过的第一个生日是我们监察部的小伙伴陪我过的，真的很惊喜！<br>那天真的是出奇的忙，中午饭晚饭都没顾上吃，就中午忙完回了寝室吃了两口面包，还拉肚子了……<br>然后那天也是我们高中校庆，我还穿了一天高中校服。✌</p>
<p><strong>2017-11-01</strong><br>自己攒钱买了自行车，为此吃了半个月的土，谁能想象我半个月只用了80块；<br>从此我都生活中多了一个伙伴，没事的时候就喜欢骑车到处跑，所以南充的路，我也比较熟。</p>
<p><strong>2017-12-29</strong><br>后来遇到了我的初恋，那是快放寒假假的时候了；<br>寒假在家拿了驾照，之前科三挂了，然后还干了些啥都忘干净了。</p>
<p><strong>2018-04-01</strong><br>第二学期开学没多久，学校的运动会就来了；我也参加了院上的集训队，带我们训练的教练都是体育学院的高年级学长；只要不下雨，每天都会训练，包括周末；大概持续了大半个月的样子，反正每天都是腰酸背痛的，在训练的日子里，虽然训练的时候很累，但是过的真的很充实，还认识了很多朋友，大家都是一起训练的同学们，可能是因为一起吃过苦，所以革命友谊都很深厚！</p>
<p><strong>2018-04-21</strong><br>因为我的优势是耐力好，所以我报的项目是5000米，后面进行专项训练的时候，差不多每天会跑15、6圈左右，最高纪录是训练一天一共跑了7000多米，没记错的话；正式比赛的时候，还是有点紧张，感觉还是没有发挥好，最后小组第3名，总成绩第10名，运动会也就告一段落了。</p>
<p>我还是像之前一样，一边学一边玩，不过数学课程已经听不懂了，是真心难😐；期中之后，突然意识到，这样下去不行，怕是毕业后工作都不好找，危机感油然而生；从此以后开始好好学习，课后都是追着老师问问题，有高中时候那味儿了。😕</p>
<p><strong>2018-07-09</strong><br>剩下半个学期也很快过去，临时通知要和大二的一起搬寝室到新区，折腾了两天总算搬完了；<br>然后我就踏上了回家的路途，但是和往常不同的是，这次放暑假，我选择骑自行车回家；都是瞒着家里的，他们这时候还不知道我自己买了自行车；😁</p>
<p><strong>2018-07-10</strong><br>大部分行李提前寄回家了，只背了一个书包，头一天上午全是在山里绕来绕去，有的坡是陡得没法，只能下来把车推上去；整个上午骑了刚好有100公里，已经一点钟了，找了个管子吃了饭，在路边休息了一会又出发了，下午骑了有60多公里，六点刚好到了绵阳三台，随便找了个宾馆住了一晚，花了我100块……（好贵，我回家车费也才100块不到😭）</p>
<p><strong>2018-07-11</strong><br>第二天早上有点下雨，我等到10点雨停了才出发；第二天明显比第一天累多了，不过路况要好得多，大多时候是走的省道；当然也有走机耕道的时候，特别是下午跟着导航走到了一处低洼处，这里的路已经被水淹没，还好我当时没打算涉险淌过去，我折回去，凭着感觉继续往另一边的大路上走，后面好长一段前不着村后不着店，水也喝完了，后面终于又导航到了一条新的路上；所以能够发现最后轨迹图上有一个很明显的弧形；</p>
<p>18年暑假那段时间刚好在下暴雨，不过那两天还好都没怎么下雨，我才能按计划顺利到家；在路上就能够看到路边的河道里全是洪水，岸边的玉米，一些房子有一半都泡在了水里；不过总的来说，这是一段非常棒、非常 nice 的体验！😃</p>
<p>暂时先写大一的，后续再补充；</p>
<!-- ### 大二篇

大二是我整个大学最刻苦，也是最忙的一年，
两次一等奖学金和国家励志奖学金就是最好的证明；

有多忙呢，
大二上课程排的满满当当的，周一到周五，差不多没有拿个半天是没课的，
然后我又在这个时候读了党校，每天中午要么考试，要么在教室背书，
然后逐渐的养成了早起的习惯，
那时候有很多15级的师兄师姐们都在教学楼过道上复习准备考研；
大家都有自己的小板凳，于是我也跟着她们一起学习；

具体刻苦到什么程度呢，
早上6点起床，6点半出公寓，7点准时到教学楼开始看书；

大二第二学期，差不多所有的课余时间都是在图书馆度过的；
然后因为参加了社团，周末会有一些活动；

### 大三篇

### 大四篇 -->
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>大学</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>斯人已去，举国皆哀</title>
    <url>/2021/05/27/%E6%96%AF%E4%BA%BA%E5%B7%B2%E5%8E%BB%EF%BC%8C%E4%B8%BE%E5%9B%BD%E7%9A%86%E5%93%80/</url>
    <content><![CDATA[<blockquote>
<p>我一直有两个梦想，一个是 禾下乘凉梦，一个是杂交水稻覆盖世界梦。————袁隆平</p>
</blockquote>
<img src="/2021/05/27/%E6%96%AF%E4%BA%BA%E5%B7%B2%E5%8E%BB%EF%BC%8C%E4%B8%BE%E5%9B%BD%E7%9A%86%E5%93%80/dream.jpg" class="">

<span id="more"></span>

<p>2021年5月22日是每个中国人都应该铭记的日子，“杂交水稻之父”，中国工程院院士，“共和国勋章”获得者袁隆平爷爷永远的离开了我们。<br>先是从外公口中得知了这个消息，后面有人出来辟谣，但随后新闻报道证实，袁老因为多器官功能衰竭，在长沙逝世。得知这个噩耗，一时还真有点难以接受。</p>
<p>对此，我深有感触，因为这天上午刚刚在田里帮忙插秧，仅仅一个上午的时间，我就全身肌肉酸痛，所以我也早就明白了为什么粒粒皆辛苦，为什么纸上学来终觉浅，绝知此事要躬行！<br>晚上躺在床上，久久不能入睡，打开微博，全是袁老的话题。“袁老病危时仍挂念田里的稻子”，“长沙市民鸣笛送别袁老”，“市民雨中送别”……泪水止不住的往出涌。我也是一个感性的人，每每看到袁老那些感人的事迹，就会引起共鸣，立马泪目。</p>
<p>虽然文字是最苍白无力的，况且自己的文笔不好，但终究还是想写点什么。谨以此篇，献给为我们付出一生的袁老，一路走好！</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>diary</tag>
        <tag>纪念</tag>
      </tags>
  </entry>
</search>
